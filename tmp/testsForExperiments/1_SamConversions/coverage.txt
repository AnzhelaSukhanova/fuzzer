[{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.ResolveSession","methodName":"getLanguageVersionSettings","parameters":[""],"returnType":"LanguageVersionSettings"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.checkers.FunInterfaceDeclarationChecker","methodName":"checkSingleAbstractMember","parameters":["FunctionDescriptor","PsiElement","DeclarationCheckerContext"],"returnType":"Unit"},108,{"pathToFun":"org.jetbrains.kotlin.codegen.ConstructorCodegen","methodName":"genSimpleSuperCall","parameters":["InstructionAdapter","Type"],"returnType":"void"},52,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.TypeVariableDependencyInformationProvider","methodName":"addAllRelatedNodes","parameters":["MutableSet","TypeConstructorMarker","Boolean"],"returnType":"Unit"},45,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.ResolvedAtomCompleter","methodName":"updateTraceForLambda","parameters":["ResolvedLambdaAtom","BindingTrace","UnwrappedType","List"],"returnType":"Unit"},92,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeReference","methodName":"getAnnotationEntries","parameters":[""],"returnType":"List"},113,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiUtil","methodName":"isNonLocalCallable","parameters":["KtDeclaration"],"returnType":"boolean"},113,{"pathToFun":"org.jetbrains.kotlin.psi.KtClassBody","methodName":"getParent","parameters":[""],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.NewCommonSuperTypeCalculator","methodName":"calculateArgument","parameters":["TypeSystemCommonSuperTypesContext","TypeParameterMarker","List","Int"],"returnType":"TypeArgumentMarker"},8,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitUserType","parameters":["KtUserType","D"],"returnType":"R"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.ArgumentsUtilsKt","methodName":"hasDefaultValue","parameters":["ValueParameterDescriptor"],"returnType":"Boolean"},84,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.MutableVariableWithConstraints","methodName":"newConstraintIsUseless","parameters":["Constraint","Constraint"],"returnType":"Boolean"},50,{"pathToFun":"org.jetbrains.kotlin.psi.KtParameter","methodName":"getDestructuringDeclaration","parameters":[""],"returnType":"KtDestructuringDeclaration"},105,{"pathToFun":"org.jetbrains.kotlin.resolve.ModifierCheckerCore","methodName":"checkLanguageLevelSupport","parameters":["BindingTrace","ASTNode","LanguageVersionSettings","List"],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseTypeRef","parameters":["TokenSet"],"returnType":"void"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.utils.ScopeUtilsKt","methodName":"findFirstFromMeAndParent","parameters":["HierarchicalScope","(HierarchicalScope) -> T"],"returnType":"T"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"isExpect","parameters":[""],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.types.CommonSupertypes","methodName":"computeCommonRawSupertypes","parameters":["Collection"],"returnType":"Map"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"getProperEnclosingClass","parameters":[""],"returnType":"ClassDescriptor"},113,{"pathToFun":"org.jetbrains.kotlin.psi.KtClassOrObject","methodName":"getSecondaryConstructors","parameters":[""],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.ResolveSession","methodName":"getSupertypeLoopChecker","parameters":[""],"returnType":"SupertypeLoopChecker"},111,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"closure","parameters":["Collection","Boolean","(T) -> Collection"],"returnType":"Collection"},52,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.MutableClosure","methodName":"enclosingExtensionMemberForClass","parameters":["ClassDescriptor"],"returnType":"CallableDescriptor"},113,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"declareParameter","parameters":["KtParameter"],"returnType":"Unit"},105,{"pathToFun":"org.jetbrains.kotlin.codegen.codegenUtilKt","methodName":"initializeVariablesForDestructuredLambdaParameters","parameters":["ExpressionCodegen","List","Label"],"returnType":"Unit"},96,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getUnsubstitutedMemberScope","parameters":["KotlinTypeRefiner"],"returnType":"MemberScope"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.TypeVariableTypeConstructor","methodName":"getDeclarationDescriptor","parameters":[""],"returnType":"ClassifierDescriptor"},54,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"generateUnboxMethodForInlineClass","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.diagnostics.PositioningStrategyKt","methodName":"markElement","parameters":["PsiElement"],"returnType":"List"},33,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitLambdaExpression","parameters":["KtLambdaExpression","D"],"returnType":"R"},95,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.SamTypeConversions","methodName":"conversionIsNeededBeforeSubtypingCheck","parameters":["KotlinCallArgument"],"returnType":"Boolean"},111,{"pathToFun":"org.jetbrains.kotlin.psi.KtProperty","methodName":"getValueParameters","parameters":[""],"returnType":"List"},81,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"createPropertiesFromPrimaryConstructorParameters","parameters":["Name","MutableSet"],"returnType":"Unit"},100,{"pathToFun":"org.jetbrains.kotlin.psi.KtParameter","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},105,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitLambdaExpression","parameters":["KtLambdaExpression"],"returnType":"Unit"},95,{"pathToFun":"org.jetbrains.kotlin.codegen.state.typeMapperUtilsKt","methodName":"removeExternalProjections","parameters":["KotlinType"],"returnType":"KotlinType"},87,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.NewCommonSuperTypeCalculator","methodName":"superTypeWithGivenConstructor","parameters":["TypeSystemCommonSuperTypesContext","List","TypeConstructorMarker","Int"],"returnType":"SimpleTypeMarker"},8,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.AbstractLocalRedeclarationChecker","methodName":"checkBeforeAddingToScope","parameters":["LexicalScope","DeclarationDescriptor"],"returnType":"Unit"},109,{"pathToFun":"org.jetbrains.kotlin.codegen.CallGenerator$DefaultCallGenerator","methodName":"genValueAndPut","parameters":["ValueParameterDescriptor","KtExpression","JvmKotlinType","Int"],"returnType":"Unit"},107,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.NewCommonSuperTypeCalculator","methodName":"filterSupertypes","parameters":["TypeSystemCommonSuperTypesContext","List","AbstractTypeCheckerContext"],"returnType":"List"},12,{"pathToFun":"org.jetbrains.kotlin.types.TypeSubstitutor","methodName":"conflictType","parameters":["Variance","Variance"],"returnType":"VarianceConflictType"},101,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.ClassConstructorDescriptorImpl","methodName":"getOverriddenDescriptors","parameters":[""],"returnType":"Collection"},64,{"pathToFun":"org.jetbrains.kotlin.types.checker.NewKotlinTypeCheckerImpl","methodName":"equalTypes","parameters":["KotlinType","KotlinType"],"returnType":"Boolean"},75,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionCodegen","methodName":"computeParameterName","parameters":["int","ValueParameterDescriptor"],"returnType":"String"},107,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitSimpleNameExpression","parameters":["KtSimpleNameExpression","StackValue"],"returnType":"StackValue"},112,{"pathToFun":"org.jetbrains.kotlin.diagnostics.DiagnosticFactory","methodName":"getSeverity","parameters":[""],"returnType":"Severity"},49,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.UnderscoreUsageChecker","methodName":"checkSimpleNameUsage","parameters":["DeclarationDescriptor","KtSimpleNameExpression","BindingTrace"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.psi.KtLambdaExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},95,{"pathToFun":"org.jetbrains.kotlin.psi.KtProperty","methodName":"getReceiverTypeRefByTree","parameters":[""],"returnType":"KtTypeReference"},81,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitQualifiedExpression","parameters":["KtQualifiedExpression","D"],"returnType":"R"},111,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"findCommonIntegerLiteralTypesSuperType","parameters":["List"],"returnType":"SimpleTypeMarker"},8,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.SamTypeConversions","methodName":"convertParameterType","parameters":["KotlinResolutionCandidate","KotlinCallArgument","ParameterDescriptor","UnwrappedType"],"returnType":"UnwrappedType"},111,{"pathToFun":"org.jetbrains.kotlin.types.model.TypeSystemContext","methodName":"isNullableNothing","parameters":["KotlinTypeMarker"],"returnType":"Any"},88,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getVisibility","parameters":[""],"returnType":"Visibility"},112,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.RenderingContext$Companion","methodName":"of","parameters":["Any"],"returnType":"RenderingContext"},35,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.JvmSignatureWriter","methodName":"writeFormalTypeParameter","parameters":["String"],"returnType":"void"},59,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.VariableDescriptorImpl","methodName":"getValueParameters","parameters":[""],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.callResolverUtil.CallResolverUtilKt","methodName":"isSuperOrDelegatingConstructorCall","parameters":["Call"],"returnType":"Boolean"},60,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.utils.ScopeUtilsKt","methodName":"processForMeAndParent","parameters":["HierarchicalScope","(HierarchicalScope) -> Unit"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ResultTypeResolver","methodName":"computeCommonSuperType","parameters":["Context","List"],"returnType":"KotlinTypeMarker"},39,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.VariableControlFlowState$Companion","methodName":"create","parameters":["InitState","Boolean"],"returnType":"VariableControlFlowState"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.ClassBodyCodegen","methodName":"generateUnboxMethodForInlineClass","parameters":[""],"returnType":"void"},110,{"pathToFun":"org.jetbrains.kotlin.types.SpecialTypesKt","methodName":"makeIntersectionTypeDefinitelyNotNullOrNotNull","parameters":["KotlinType"],"returnType":"SimpleType"},17,{"pathToFun":"org.jetbrains.kotlin.resolve.QualifiedExpressionResolver","methodName":"resolveDescriptorForType","parameters":["KtUserType","LexicalScope","BindingTrace","Boolean"],"returnType":"TypeQualifierResolutionResult"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorUtils","methodName":"isNonCompanionObject","parameters":["DeclarationDescriptor"],"returnType":"boolean"},113,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.PseudocodeVariablesData","methodName":"isPropertyWithoutBackingField","parameters":["VariableDescriptor"],"returnType":"Boolean"},81,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker\\$CallImpl","methodName":"getCalleeExpression","parameters":[""],"returnType":"KtExpression"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CompletionModeCalculator$CalculatorForNestedCall","methodName":"collectRequiredDirectionsForVariables","parameters":["CsCompleterContext","KotlinTypeMarker","TypeVariance","MutableSet"],"returnType":"Unit"},24,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.TowerLevelsKt","methodName":"getConstructorsOfClassifier","parameters":["ClassifierDescriptor"],"returnType":"List"},83,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"getParentCodegen","parameters":[""],"returnType":"MemberCodegen"},110,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.MemberScopeTowerLevel","methodName":"getVariables","parameters":["Name","ReceiverValueWithSmartCastInfo"],"returnType":"Collection"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorUtils","methodName":"isSingletonOrAnonymousObject","parameters":["ClassDescriptor"],"returnType":"boolean"},53,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"generateJumpsToCatchAndFinally","parameters":[""],"returnType":"Unit"},101,{"pathToFun":"org.jetbrains.kotlin.resolve.inline.InlineUtil","methodName":"isInlinedArgument","parameters":["KtFunction","BindingContext","boolean"],"returnType":"boolean"},95,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.declarations.AbstractPsiBasedDeclarationProvider","methodName":"getScriptDeclarations","parameters":["Name"],"returnType":"MutableList"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.VariableTypeAndInitializerResolver","methodName":"approximateType","parameters":["KotlinType","Boolean"],"returnType":"UnwrappedType"},76,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"getUpperBound","parameters":["TypeParameterMarker","Int"],"returnType":"KotlinTypeMarker"},59,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.SubstitutingScope","methodName":"getContributedClassifier","parameters":["Name","LookupLocation"],"returnType":"Any"},50,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.UninitializedStoresProcessor$UninitializedNewValueMarkerInterpreter","methodName":"checkUninitializedObjectCopy","parameters":["TypeInsnNode","AbstractInsnNode"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.AbstractTypeCheckerContextForConstraintSystem","methodName":"simplifyLowerConstraint","parameters":["KotlinTypeMarker","KotlinTypeMarker","Boolean"],"returnType":"Boolean"},55,{"pathToFun":"org.jetbrains.kotlin.types.IntersectionTypeConstructor","methodName":"createType","parameters":[""],"returnType":"SimpleType"},9,{"pathToFun":"org.jetbrains.kotlin.diagnostics.PsiDiagnosticUtils\\$LineAndColumn","methodName":"getColumn","parameters":[""],"returnType":"int"},40,{"pathToFun":"org.jetbrains.kotlin.types.expressions.FunctionsTypingVisitor","methodName":"collectReturns","parameters":["KtDeclarationWithBody","BindingTrace"],"returnType":"List"},46,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"resolveValueParameterAnnotations","parameters":["LexicalScope","KtParameter","BindingTrace","Annotations"],"returnType":"Annotations"},105,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.NewCommonSuperTypeCalculator","methodName":"commonSuperTypeForSimpleTypes","parameters":["TypeSystemCommonSuperTypesContext","List","Int","AbstractTypeCheckerContext","AbstractTypeCheckerContext"],"returnType":"SimpleTypeMarker"},13,{"pathToFun":"org.jetbrains.kotlin.types.DisjointKeysUnionTypeSubstitution","methodName":"isEmpty","parameters":[""],"returnType":"Any"},53,{"pathToFun":"org.jetbrains.kotlin.codegen.ConstructorCodegen","methodName":"markLineNumberForConstructor","parameters":["ClassConstructorDescriptor","KtConstructor","ExpressionCodegen"],"returnType":"void"},53,{"pathToFun":"org.jetbrains.kotlin.types.model.TypeSystemContext","methodName":"isFlexible","parameters":["KotlinTypeMarker"],"returnType":"Boolean"},63,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getDanglingAnnotations","parameters":[""],"returnType":"Annotations"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtClass","methodName":"isEnum","parameters":[""],"returnType":"Boolean"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"generateConstInstance","parameters":["Type","Type"],"returnType":"void"},86,{"pathToFun":"org.jetbrains.kotlin.types.IndexedParametersSubstitution","methodName":"get","parameters":["KotlinType"],"returnType":"TypeProjection"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.KotlinConstraintSystemCompleter","methodName":"analyzeNextReadyPostponedArgument","parameters":["Context","List","ConstraintSystemCompletionMode","(PostponedResolvedAtom) -> Unit"],"returnType":"Boolean"},46,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitModifierList","parameters":["KtModifierList","D"],"returnType":"R"},112,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"generateHeaderDelegationSpecifiers","parameters":["KtClassOrObject"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"immediateSupertypes","parameters":["KotlinType"],"returnType":"Collection"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.FiniteBoundRestrictionChecker","methodName":"check","parameters":["KtClass","ClassDescriptor","DiagnosticSink"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.CapturedTypeConstructorKt","methodName":"isCaptured","parameters":["KotlinType"],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.types.DelegatingSimpleTypeImpl","methodName":"replaceAnnotations","parameters":["Annotations"],"returnType":"Any"},72,{"pathToFun":"org.jetbrains.kotlin.types.TypeUtils","methodName":"createSubstitutedSupertype","parameters":["KotlinType","KotlinType","TypeSubstitutor"],"returnType":"KotlinType"},113,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"isInterfaceOrAnnotationClass","parameters":["KotlinTypeMarker"],"returnType":"Boolean"},59,{"pathToFun":"org.jetbrains.kotlin.resolve.ModifierCheckerCore","methodName":"checkTarget","parameters":["BindingTrace","ASTNode","List"],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"mapReturnType","parameters":["CallableDescriptor","JvmSignatureWriter","KotlinType"],"returnType":"Type"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.ClosureCodegen","methodName":"calculateConstructorParameters","parameters":["KotlinTypeMapper","LanguageVersionSettings","CalculatedClosure","Type"],"returnType":"List"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl","methodName":"canBeProper","parameters":["KotlinTypeMarker"],"returnType":"Boolean"},92,{"pathToFun":"org.jetbrains.kotlin.types.checker.NewCapturedTypeKt","methodName":"replaceArguments","parameters":["UnwrappedType","List"],"returnType":"Any"},25,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionCodegen","methodName":"endVisit","parameters":["MethodVisitor","String","KtElement"],"returnType":"void"},108,{"pathToFun":"org.jetbrains.kotlin.codegen.ClassBodyCodegen","methodName":"shouldProcessFirst","parameters":["KtDeclaration"],"returnType":"boolean"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.DelegationResolver$Companion","methodName":"generateDelegatedMembers","parameters":["KtPureClassOrObject","ClassDescriptor","Collection","BindingTrace","MemberExtractor","TypeResolver","DelegationFilter","LanguageVersionSettings"],"returnType":"Collection"},112,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"getName","parameters":["TypeParameterMarker"],"returnType":"Name"},59,{"pathToFun":"org.jetbrains.kotlin.codegen.CallReceiver","methodName":"generateCallReceiver","parameters":["ResolvedCall","ExpressionCodegen","Callable","ReceiverParameterDescriptor","StackValue","ReceiverParameterDescriptor","StackValue"],"returnType":"StackValue"},111,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"visitSimpleNameExpression","parameters":["KtSimpleNameExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"getPrimaryConstructor","parameters":[""],"returnType":"ClassConstructorDescriptor"},112,{"pathToFun":"org.jetbrains.kotlin.parsing.PrecedingDocCommentsBinder","methodName":"getEdgePosition","parameters":["List","Boolean","WhitespacesAndCommentsBinder.TokenTextGetter"],"returnType":"Int"},81,{"pathToFun":"org.jetbrains.kotlin.psi.KtProperty","methodName":"getSetter","parameters":[""],"returnType":"KtPropertyAccessor"},81,{"pathToFun":"org.jetbrains.kotlin.resolve.TypeResolver$Companion","methodName":"resolveProjectionKind","parameters":["KtProjectionKind"],"returnType":"Variance"},50,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.TypeVariableFromCallableDescriptor","methodName":"hasOnlyInputTypesAnnotation","parameters":[""],"returnType":"Boolean"},49,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"loadUnit","parameters":["KtExpression"],"returnType":"Unit"},70,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkTypesInClassHeader","parameters":["KtClassOrObject"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.JvmCodegenUtil","methodName":"getPropertyDelegateType","parameters":["VariableDescriptorWithAccessors","BindingContext"],"returnType":"KotlinType"},92,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"createInitializerScopeParent","parameters":[""],"returnType":"DeclarationDescriptor"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.FiniteBoundRestrictionChecker$GraphBuilder","methodName":"build","parameters":[""],"returnType":"Graph"},52,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintIncorporator","methodName":"insideOtherConstraint","parameters":["Context","TypeVariableMarker","Constraint"],"returnType":"Unit"},55,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.MemberScopeTowerLevel","methodName":"getObjects","parameters":["Name","ReceiverValueWithSmartCastInfo"],"returnType":"Collection"},111,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.ClassDescriptorImpl","methodName":"isInline","parameters":[""],"returnType":"boolean"},111,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeArgumentList","methodName":"getArguments","parameters":[""],"returnType":"List"},51,{"pathToFun":"org.jetbrains.kotlin.codegen.codegenUtilKt","methodName":"extractReificationArgument","parameters":["TypeSystemCommonBackendContext","KotlinTypeMarker"],"returnType":"Pair"},41,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"isJvmPrimitive","parameters":["KotlinType"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.ClosureCodegen","methodName":"generateBridge","parameters":["Method","List","KotlinType","Method","KotlinType","boolean"],"returnType":"void"},108,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.ResolveSession","methodName":"getDescriptorResolver","parameters":[""],"returnType":"DescriptorResolver"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.ClassBodyCodegen","methodName":"generateDefaultImplsIfNeeded","parameters":[""],"returnType":"void"},110,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"resolvePrimaryConstructor","parameters":[""],"returnType":"ClassConstructorDescriptor"},112,{"pathToFun":"org.jetbrains.kotlin.types.checker.NewCapturedTypeConstructor","methodName":"getBuiltIns","parameters":[""],"returnType":"KotlinBuiltIns"},13,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiUtil","methodName":"isScriptDeclaration","parameters":["KtDeclaration"],"returnType":"boolean"},73,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"isUninferredParameter","parameters":["KotlinTypeMarker"],"returnType":"Boolean"},55,{"pathToFun":"org.jetbrains.kotlin.diagnostics.DiagnosticUtils","methodName":"getLineAndColumnRangeInPsiFile","parameters":["PsiFile","TextRange"],"returnType":"LineAndColumnRange"},40,{"pathToFun":"org.jetbrains.kotlin.types.checker.NullabilityChecker","methodName":"isSubtypeOfAny","parameters":["UnwrappedType"],"returnType":"Boolean"},12,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.LocalVariableDescriptor","methodName":"getVisibility","parameters":[""],"returnType":"Visibility"},76,{"pathToFun":"org.jetbrains.kotlin.psi.KtParameter","methodName":"getTypeParameters","parameters":[""],"returnType":"List"},105,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitQualifiedExpression","parameters":["KtQualifiedExpression","Void"],"returnType":"Void"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"isInlineMethodContext","parameters":[""],"returnType":"boolean"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.BothSignatureWriter","methodName":"writeTypeArgumentEnd","parameters":[""],"returnType":"void"},84,{"pathToFun":"org.jetbrains.kotlin.psi.KtLambdaExpression","methodName":"accept","parameters":["PsiElementVisitor"],"returnType":"void"},95,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"createTypeArgument","parameters":["KotlinTypeMarker","TypeVariance"],"returnType":"TypeArgumentMarker"},24,{"pathToFun":"org.jetbrains.kotlin.codegen.CollectionStubMethodGenerator","methodName":"computeTasksToGenerate","parameters":[""],"returnType":"TasksToGenerate"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtProperty","methodName":"getReceiverTypeReference","parameters":[""],"returnType":"KtTypeReference"},81,{"pathToFun":"org.jetbrains.kotlin.util.Box","methodName":"hashCode","parameters":[""],"returnType":"int"},83,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver","methodName":"checkOverrideForMember","parameters":["CallableMemberDescriptor"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingServices","methodName":"getBodyExpressionType","parameters":["BindingTrace","LexicalScope","DataFlowInfo","KtDeclarationWithBody","FunctionDescriptor"],"returnType":"KotlinType"},46,{"pathToFun":"org.jetbrains.kotlin.resolve.BindingTraceContext","methodName":"record","parameters":["WritableSlice","K"],"returnType":"void"},82,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.declarations.AbstractPsiBasedDeclarationProvider","methodName":"getPropertyDeclarations","parameters":["Name"],"returnType":"List"},113,{"pathToFun":"org.jetbrains.kotlin.diagnostics.DiagnosticFactoryWithPsiElement","methodName":"getTextRanges","parameters":["ParametrizedDiagnostic"],"returnType":"List"},40,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl","methodName":"isProperType","parameters":["KotlinTypeMarker"],"returnType":"Boolean"},85,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"writeGenericArguments","parameters":["JvmSignatureWriter","List","List","TypeMappingMode"],"returnType":"Unit"},81,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitTypeArgumentList","parameters":["KtTypeArgumentList","Void"],"returnType":"Void"},51,{"pathToFun":"org.jetbrains.kotlin.types.expressions.FunctionsTypingVisitor","methodName":"collectReturns","parameters":["KtFunctionLiteral","BindingTrace"],"returnType":"Collection"},95,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitTypeReference","parameters":["KtTypeReference","D"],"returnType":"R"},113,{"pathToFun":"org.jetbrains.kotlin.diagnostics.PsiDiagnosticUtils\\$LineAndColumn","methodName":"getLineContent","parameters":[""],"returnType":"String"},40,{"pathToFun":"org.jetbrains.kotlin.types.checker.NewCapturedTypeConstructor","methodName":"hashCode","parameters":[""],"returnType":"Int"},21,{"pathToFun":"org.jetbrains.kotlin.diagnostics.AbstractDiagnostic","methodName":"getSeverity","parameters":[""],"returnType":"Severity"},41,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseMemberDeclarationRest","parameters":["ModifierDetector"],"returnType":"IElementType"},111,{"pathToFun":"org.jetbrains.kotlin.types.TypeUtils","methodName":"getAllSupertypes","parameters":["KotlinType"],"returnType":"Set"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalScopeStorage","methodName":"addDescriptor","parameters":["DeclarationDescriptor"],"returnType":"Int"},109,{"pathToFun":"org.jetbrains.kotlin.resolve.DelegatingBindingTrace","methodName":"recordType","parameters":["KtExpression","KotlinType"],"returnType":"Unit"},109,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapperBase","methodName":"mapDefaultImpls","parameters":["ClassDescriptor"],"returnType":"Type"},112,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"declareVariable","parameters":["KtVariableDeclaration"],"returnType":"Unit"},81,{"pathToFun":"org.jetbrains.kotlin.types.checker.NewKotlinTypeCheckerImpl","methodName":"equalTypes","parameters":["ClassicTypeCheckerContext","UnwrappedType","UnwrappedType"],"returnType":"Boolean"},75,{"pathToFun":"org.jetbrains.kotlin.util.Box","methodName":"getData","parameters":[""],"returnType":"T"},83,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver$Companion","methodName":"checkMissingOverridesByJava8Restrictions","parameters":["Set","CheckInheritedSignaturesReportStrategy"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver$Companion","methodName":"getRelevantDirectlyOverridden","parameters":["MutableMap","Set"],"returnType":"Set"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"isBoxMethodForInlineClass","parameters":["FunctionDescriptor"],"returnType":"Boolean"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.ClosureCodegen","methodName":"classForInnerClassRecord","parameters":[""],"returnType":"ClassDescriptor"},108,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"replaceAnnotations","parameters":["KotlinType","Annotations"],"returnType":"KotlinType"},71,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyTypeParameterDescriptor","methodName":"getAllUpperBounds","parameters":[""],"returnType":"Collection"},52,{"pathToFun":"org.jetbrains.kotlin.types.TypeUtils","methodName":"getClassDescriptor","parameters":["KotlinType"],"returnType":"ClassDescriptor"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintIncorporator","methodName":"incorporate","parameters":["Context","TypeVariableMarker","Constraint"],"returnType":"Unit"},55,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl","methodName":"buildCurrentSubstitutor","parameters":["Map"],"returnType":"TypeSubstitutorMarker"},107,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getAnnotations","parameters":[""],"returnType":"Annotations"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"stackValueForLocal","parameters":["DeclarationDescriptor","int"],"returnType":"StackValue"},108,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"isInner","parameters":[""],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtProperty","methodName":"getDelegateExpression","parameters":[""],"returnType":"KtExpression"},81,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.ClassicTypeSystemContextForCS","methodName":"safeSubstitute","parameters":["TypeSubstitutorMarker","KotlinTypeMarker"],"returnType":"KotlinTypeMarker"},93,{"pathToFun":"org.jetbrains.kotlin.codegen.CallableMethod","methodName":"genInvokeInstruction","parameters":["InstructionAdapter"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isPrimitiveTypeOrNullablePrimitiveType","parameters":["KotlinType"],"returnType":"boolean"},113,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitTypeReference","parameters":["KtTypeReference","Void"],"returnType":"Void"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CompletionModeCalculator$CalculatorForNestedCall","methodName":"enqueueTypesFromConstraints","parameters":["VariableWithConstraints"],"returnType":"Unit"},24,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.VariableFixationFinder","methodName":"isProperArgumentConstraint","parameters":["Context","Constraint"],"returnType":"Any"},50,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"mapClass","parameters":["ClassifierDescriptor"],"returnType":"Type"},113,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PackageFragmentDescriptorImpl","methodName":"getSource","parameters":[""],"returnType":"SourceElement"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.checkers.BigFunctionTypeAvailabilityChecker","methodName":"check","parameters":["ClassifierDescriptor","PsiElement","ClassifierUsageCheckerContext"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.PlatformClassesMappedToKotlinChecker","methodName":"reportPlatformClassMappedToKotlin","parameters":["PlatformToKotlinClassMap","BindingTrace","KtElement","DeclarationDescriptor"],"returnType":"void"},113,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"checkNull","parameters":["KtSimpleNameExpression","ExpressionTypingContext","KotlinType"],"returnType":"void"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.data.KtClassInfoUtil","methodName":"createClassOrObjectInfo","parameters":["KtClassOrObject"],"returnType":"KtClassOrObjectInfo"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtSuperTypeList","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},39,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitDotQualifiedExpression","parameters":["KtDotQualifiedExpression","D"],"returnType":"R"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getConstructors","parameters":[""],"returnType":"Collection"},112,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"write","parameters":["KtElement","KtElement","PseudoValue","AccessTarget","Map"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.receivers.AbstractReceiverValue","methodName":"getOriginal","parameters":[""],"returnType":"ReceiverValue"},26,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"declareFunction","parameters":["KtElement","Pseudocode"],"returnType":"Unit"},94,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitModifierList","parameters":["KtModifierList","Void"],"returnType":"Void"},112,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.PseudocodeImpl","methodName":"getJumpTarget","parameters":["Label"],"returnType":"Instruction"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"checkBounds","parameters":["KtTypeReference","KotlinType","TypeParameterDescriptor","TypeSubstitutor","BindingTrace"],"returnType":"void"},52,{"pathToFun":"org.jetbrains.kotlin.codegen.JvmRuntimeTypes","methodName":"createClass","parameters":["PackageFragmentDescriptor","String","ClassKind"],"returnType":"ClassDescriptor"},109,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"setDeferredReturnType","parameters":["ClassConstructorDescriptorImpl"],"returnType":"Unit"},53,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker\\$CallImpl","methodName":"getFunctionLiteralArguments","parameters":[""],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.SubstitutingScope","methodName":"substitute","parameters":["D"],"returnType":"D"},112,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContextKt","methodName":"singleBestRepresentative","parameters":["Collection"],"returnType":"Any"},40,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"constituentTypes","parameters":["Collection"],"returnType":"Collection"},52,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.BothSignatureWriter","methodName":"writeFormalTypeParameter","parameters":["String"],"returnType":"void"},59,{"pathToFun":"org.jetbrains.kotlin.resolve.TypeResolutionContext","methodName":"noBareTypes","parameters":[""],"returnType":"TypeResolutionContext"},63,{"pathToFun":"org.jetbrains.kotlin.psi.KtUserType","methodName":"getReferenceExpression","parameters":[""],"returnType":"KtSimpleNameExpression"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.AnnotationResolverImpl","methodName":"reportUnsupportedAnnotationForTypeParameter","parameters":["KtTypeParameter","BindingTrace"],"returnType":"void"},52,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallExpressionResolver","methodName":"getSafeOrUnsafeSelectorTypeInfo","parameters":["Receiver","CallExpressionElement","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"isDefinitelyNotSamInterface","parameters":[""],"returnType":"boolean"},103,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"createClInitFunctionDescriptor","parameters":["DeclarationDescriptor"],"returnType":"SimpleFunctionDescriptorImpl"},90,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"intoClass","parameters":["ClassDescriptor","OwnerKind","GenerationState"],"returnType":"ClassContext"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.JvmSignatureWriter","methodName":"writeInterfaceBoundEnd","parameters":[""],"returnType":"void"},7,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"isUnsignedNumberType","parameters":["KotlinType"],"returnType":"Boolean"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.AnnotationCodegen","methodName":"forParameter","parameters":["int","MethodVisitor","InnerClassConsumer","GenerationState"],"returnType":"AnnotationCodegen"},107,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"generateDefaultImplsIfNeeded","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtFunctionLiteral","methodName":"hasBody","parameters":[""],"returnType":"boolean"},95,{"pathToFun":"org.jetbrains.kotlin.codegen.AnnotationCodegen","methodName":"generateNullabilityAnnotation","parameters":["KotlinType","Set"],"returnType":"void"},113,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitClass","parameters":["KtClass","Void"],"returnType":"Void"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorUtils","methodName":"isEnumClass","parameters":["DeclarationDescriptor"],"returnType":"boolean"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.descriptorUtil.annotationsForResolveKt","methodName":"hasOnlyInputTypesAnnotation","parameters":["TypeParameterDescriptor"],"returnType":"Boolean"},49,{"pathToFun":"org.jetbrains.kotlin.psi.KtProperty","methodName":"getTypeReference","parameters":[""],"returnType":"KtTypeReference"},81,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ResultTypeResolver","methodName":"resultType","parameters":["Context","KotlinTypeMarker","KotlinTypeMarker","VariableWithConstraints"],"returnType":"KotlinTypeMarker"},39,{"pathToFun":"org.jetbrains.kotlin.psi.psiUtil.ktPsiUtilKt","methodName":"collectAnnotationEntriesFromPsi","parameters":["KtAnnotationsContainer"],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"getVisibilityAccessFlagForAnonymous","parameters":["ClassDescriptor"],"returnType":"int"},110,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitSuperTypeList","parameters":["KtSuperTypeList","D"],"returnType":"R"},39,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"getDefaultSupertype","parameters":["ClassDescriptor"],"returnType":"KotlinType"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.VariableFixationFinder","methodName":"hasDependencyToOtherTypeVariables","parameters":["Context","TypeConstructorMarker"],"returnType":"Boolean"},50,{"pathToFun":"org.jetbrains.kotlin.types.WrappedTypeFactory","methodName":"createRecursionIntolerantDeferredType","parameters":["BindingTrace","() -> KotlinType"],"returnType":"KotlinType"},62,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkTypeParameters","parameters":["KtTypeParameterListOwner"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"generateEnumMethods","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl","methodName":"checkOnlyInputTypesAnnotation","parameters":["MutableVariableWithConstraints","KotlinTypeMarker"],"returnType":"Unit"},50,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"addDataClassMethods","parameters":["MutableCollection","LookupLocation"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"isExtensionFunction","parameters":["SimpleTypeMarker"],"returnType":"Boolean"},8,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallResolver","methodName":"resolveSimpleProperty","parameters":["BasicCallResolutionContext"],"returnType":"OverloadResolutionResults"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.sam.SamConversionResolverImplKt","methodName":"getFunctionTypeForPossibleSamType","parameters":["SamConversionResolver","UnwrappedType","SamConversionOracle"],"returnType":"UnwrappedType"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LocalRedeclarationChecker$DO_NOTHING","methodName":"checkBeforeAddingToScope","parameters":["LexicalScope","DeclarationDescriptor"],"returnType":"Unit"},68,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isPrimitiveArray","parameters":["KotlinType"],"returnType":"boolean"},53,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.MutableClosure","methodName":"getClosureClass","parameters":[""],"returnType":"ClassDescriptor"},109,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.KotlinConstraintSystemCompleter$Companion","methodName":"findResolvedAtomBy","parameters":["TypeVariableMarker","List"],"returnType":"ResolvedAtom"},50,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.ForceResolveUtil","methodName":"forceResolveAllContents","parameters":["TypeConstructor"],"returnType":"void"},26,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"doneOrDrop","parameters":["Marker","IElementType","boolean"],"returnType":"void"},92,{"pathToFun":"org.jetbrains.kotlin.resolve.TypeResolver","methodName":"resolveType","parameters":["TypeResolutionContext","KtTypeReference"],"returnType":"KotlinType"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CompletionModeCalculator$CalculatorForNestedCall","methodName":"computeDirections","parameters":["CsCompleterContext"],"returnType":"Unit"},24,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap","methodName":"put","parameters":["DiagnosticFactory1","String","DiagnosticParameterRenderer"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.NewCommonSuperTypeCalculator","methodName":"commonSuperType","parameters":["TypeSystemCommonSuperTypesContext","List"],"returnType":"KotlinTypeMarker"},80,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.TowerLevelsKt","methodName":"getClassifierFromMeAndSuperclasses","parameters":["KotlinType","Name","LookupLocation"],"returnType":"ClassifierDescriptor"},111,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.DiagnosticRendererUtilKt","methodName":"renderParameter","parameters":["P","DiagnosticParameterRenderer","RenderingContext"],"returnType":"Any"},35,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isPrimitiveType","parameters":["KotlinType"],"returnType":"boolean"},113,{"pathToFun":"org.jetbrains.kotlin.psi.KtUserType","methodName":"getQualifier","parameters":[""],"returnType":"KtUserType"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateReceiverValue","parameters":["ReceiverValue","boolean"],"returnType":"StackValue"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"putLocalVariableIntoFrameMap","parameters":["KtVariableDeclaration"],"returnType":"void"},72,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.synthetic.FunInterfaceConstructorsSyntheticScope","methodName":"getSyntheticConstructors","parameters":["ClassifierDescriptor","LookupLocation"],"returnType":"Collection"},83,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext","methodName":"getConstraintsForVariable","parameters":["TypeVariableMarker"],"returnType":"Any"},55,{"pathToFun":"org.jetbrains.kotlin.resolve.OverridingUtil","methodName":"getOverriddenDeclarations","parameters":["CallableMemberDescriptor"],"returnType":"Set"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeParameterList","methodName":"getTrailingComma","parameters":[""],"returnType":"PsiElement"},53,{"pathToFun":"org.jetbrains.kotlin.resolve.BodyResolver","methodName":"getPrimaryConstructorParametersScope","parameters":["LexicalScope","ConstructorDescriptor"],"returnType":"LexicalScope"},53,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorUtils","methodName":"classCanHaveOpenMembers","parameters":["ClassDescriptor"],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.InterfaceImplBodyCodegen","methodName":"generateSyntheticPartsBeforeBody","parameters":[""],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.codegen.state.typeMappingUtilKt","methodName":"updateArgumentModeFromAnnotations","parameters":["TypeMappingMode","KotlinTypeMarker","TypeSystemCommonBackendContext"],"returnType":"TypeMappingMode"},84,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector","methodName":"isAllowedType","parameters":["Context","KotlinTypeMarker"],"returnType":"Any"},30,{"pathToFun":"org.jetbrains.kotlin.types.TypeConstructorSubstitution","methodName":"get","parameters":["KotlinType"],"returnType":"Any"},80,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"put","parameters":["Type","InstructionAdapter"],"returnType":"void"},110,{"pathToFun":"org.jetbrains.kotlin.psi.KtProperty","methodName":"getDelegate","parameters":[""],"returnType":"KtPropertyDelegate"},81,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitParameter","parameters":["KtParameter"],"returnType":"Unit"},105,{"pathToFun":"org.jetbrains.kotlin.resolve.NonExpansiveInheritanceRestrictionChecker$GraphBuilder","methodName":"doBuildGraph","parameters":["TypeConstructor"],"returnType":"Unit"},52,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.LazyImportScope","methodName":"isClassifierVisible","parameters":["LazyImportResolver","ClassifierDescriptor"],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtExpressionImpl","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"Any"},95,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintIncorporator","methodName":"areThereRecursiveConstraints","parameters":["Context","TypeVariableMarker","Constraint"],"returnType":"Any"},55,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.ArgumentsUtilsKt","methodName":"checkExpectedParameter","parameters":["ValueParameterDescriptor","(ValueParameterDescriptor) -> Boolean"],"returnType":"Boolean"},106,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext","methodName":"addLowerConstraint","parameters":["TypeConstructorMarker","KotlinTypeMarker","Boolean"],"returnType":"Any"},55,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.BaseHierarchicalScope","methodName":"getContributedClassifier","parameters":["Name","LookupLocation"],"returnType":"ClassifierDescriptor"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"generateFieldForSingleton","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.types.expressions.LabelResolver","methodName":"resolveControlLabel","parameters":["KtExpressionWithLabel","ResolutionContext"],"returnType":"KtElement"},100,{"pathToFun":"org.jetbrains.kotlin.codegen.ClosureCodegen","methodName":"generateDeclaration","parameters":[""],"returnType":"void"},108,{"pathToFun":"org.jetbrains.kotlin.types.IndexedParametersSubstitution","methodName":"approximateContravariantCapturedTypes","parameters":[""],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt","methodName":"setSingleOverridden","parameters":["CallableMemberDescriptor","CallableMemberDescriptor"],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.MutableClosure","methodName":"getCapturedReceiverFromOuterContext","parameters":[""],"returnType":"KotlinType"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.ForceResolveUtil","methodName":"forceResolveAllContents","parameters":["KotlinType"],"returnType":"KotlinType"},26,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowValueKindUtilsKt","methodName":"variableKind","parameters":["VariableDescriptor","ModuleDescriptor","BindingContext","KtElement","LanguageVersionSettings"],"returnType":"DataFlowValue.Kind"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.TypeResolver","methodName":"resolveDescriptorForType","parameters":["LexicalScope","KtUserType","BindingTrace","Boolean"],"returnType":"QualifiedExpressionResolver.TypeQualifierResolutionResult"},113,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseLambdaExpression","parameters":[""],"returnType":"void"},95,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorUtils","methodName":"isObject","parameters":["DeclarationDescriptor"],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"findLocalOrCapturedValue","parameters":["DeclarationDescriptor"],"returnType":"StackValue"},108,{"pathToFun":"org.jetbrains.kotlin.psi.psiUtil.psiUtilsKt","methodName":"hasFunModifier","parameters":["KtModifierList"],"returnType":"Any"},110,{"pathToFun":"org.jetbrains.kotlin.psi.KtParameter","methodName":"getEqualsToken","parameters":[""],"returnType":"PsiElement"},105,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ResultTypeResolver","methodName":"findSuperType","parameters":["Context","VariableWithConstraints"],"returnType":"KotlinTypeMarker"},39,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"approximateCapturedType","parameters":["KotlinType"],"returnType":"KotlinType"},36,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap","methodName":"put","parameters":["DiagnosticFactory3","String","DiagnosticParameterRenderer","DiagnosticParameterRenderer","DiagnosticParameterRenderer"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.TypeResolver","methodName":"resolveTypeAnnotations","parameters":["TypeResolutionContext","KtElementImplStub"],"returnType":"Annotations"},113,{"pathToFun":"org.jetbrains.kotlin.psi.KtClassOrObject","methodName":"hasExplicitPrimaryConstructor","parameters":[""],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.ClassResolutionScopesSupportKt","methodName":"scopeForInitializerResolution","parameters":["LazyClassDescriptor","DeclarationDescriptor","List"],"returnType":"LexicalScope"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext","methodName":"getTypeVariable","parameters":["TypeConstructorMarker"],"returnType":"TypeVariableMarker"},55,{"pathToFun":"org.jetbrains.kotlin.resolve.AnnotationUseSiteTargetChecker","methodName":"checkTypeReference","parameters":["BindingTrace","KtTypeReference","LanguageVersionSettings","Boolean"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.descriptors.annotations.FilteredAnnotations","methodName":"isEmpty","parameters":[""],"returnType":"Boolean"},96,{"pathToFun":"org.jetbrains.kotlin.types.AbstractTypeCheckerContext","methodName":"runWithArgumentsSettings","parameters":["KotlinTypeMarker","AbstractTypeCheckerContext.() -> T"],"returnType":"T"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CompletionModeCalculator$CalculatorForNestedCall","methodName":"hasProperConstraint","parameters":["CsCompleterContext","VariableWithConstraints","FixationDirection"],"returnType":"Boolean"},24,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"identicalArguments","parameters":["SimpleTypeMarker","SimpleTypeMarker"],"returnType":"Boolean"},85,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap","methodName":"put","parameters":["DiagnosticFactory1","String","MultiRenderer"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingVisitor","methodName":"visitReturnExpression","parameters":["KtReturnExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},100,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitSuperTypeEntry","parameters":["KtSuperTypeEntry"],"returnType":"Unit"},37,{"pathToFun":"org.jetbrains.kotlin.psi.KtParameter","methodName":"getTypeReference","parameters":[""],"returnType":"KtTypeReference"},105,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"genClosure","parameters":["KtElement","FunctionDescriptor","FunctionGenerationStrategy","SamType","ResolvedCall","StackValue"],"returnType":"StackValue"},108,{"pathToFun":"org.jetbrains.kotlin.psi.KtParameter","methodName":"getValOrVarKeyword","parameters":[""],"returnType":"PsiElement"},105,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getKind","parameters":[""],"returnType":"ClassKind"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtNamedFunction","methodName":"hasDeclaredReturnType","parameters":[""],"returnType":"boolean"},77,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalWritableScope","methodName":"checkMayWrite","parameters":[""],"returnType":"Unit"},109,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.instructions.eval.LoadUnitValueInstruction","methodName":"accept","parameters":["InstructionVisitor"],"returnType":"Unit"},70,{"pathToFun":"org.jetbrains.kotlin.resolve.TypeResolver","methodName":"resolveTypeForClass","parameters":["TypeResolutionContext","Annotations","ClassDescriptor","KtElement","QualifiedExpressionResolver.TypeQualifierResolutionResult"],"returnType":"PossiblyBareType"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"inferReturnTypeFromExpressionBody","parameters":["BindingTrace","LexicalScope","DataFlowInfo","KtDeclarationWithBody","FunctionDescriptor"],"returnType":"KotlinType"},46,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionCodegen","methodName":"endVisit","parameters":["MethodVisitor","String","KtPureElement"],"returnType":"void"},90,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CollectionTypeVariableUsagesInfo","methodName":"isContainedInInvariantOrContravariantPositionsWithDependencies","parameters":["NewConstraintSystem","TypeVariableFromCallableDescriptor","DeclarationDescriptor"],"returnType":"Boolean"},54,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.ResolvedAtomCompleter","methodName":"completeLambda","parameters":["ResolvedLambdaAtom"],"returnType":"Unit"},92,{"pathToFun":"org.jetbrains.kotlin.psi.stubs.elements.KtClassElementType","methodName":"createPsiFromAst","parameters":["ASTNode"],"returnType":"KtClass"},111,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseValueParameter","parameters":["boolean","boolean"],"returnType":"boolean"},105,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.DiagnosticParameterRendererKt","methodName":"Renderer","parameters":["(O) -> String"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.ValueParameterDescriptorImpl","methodName":"isVar","parameters":[""],"returnType":"Any"},104,{"pathToFun":"org.jetbrains.kotlin.resolve.BindingContextUtils","methodName":"isCapturedInClosureWithExactlyOnceEffect","parameters":["BindingContext","DeclarationDescriptor"],"returnType":"boolean"},108,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitUserType","parameters":["KtUserType"],"returnType":"void"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"signature","parameters":["ClassDescriptor","Type","SuperClassInfo","KotlinTypeMapper"],"returnType":"JvmClassSignature"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor\\$LazyClassTypeConstructor","methodName":"getParameters","parameters":[""],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowValueFactoryImpl","methodName":"createDataFlowValue","parameters":["ReceiverValue","ResolutionContext"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.QualifiedExpressionResolver","methodName":"resolveQualifierInExpressionAndUnroll","parameters":["KtQualifiedExpression","ExpressionTypingContext","(KtSimpleNameExpression) -> Boolean"],"returnType":"List"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getScopeForConstructorHeaderResolution","parameters":[""],"returnType":"LexicalScope"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtFunctionLiteral","methodName":"hasBlockBody","parameters":[""],"returnType":"boolean"},95,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitReturnExpression","parameters":["KtReturnExpression"],"returnType":"Unit"},100,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"isInline","parameters":[""],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.types.WrappedType","methodName":"unwrap","parameters":[""],"returnType":"UnwrappedType"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.AnnotationResolver","methodName":"resolveAnnotationsWithArguments","parameters":["LexicalScope","KtModifierList","BindingTrace"],"returnType":"Annotations"},84,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.instructions.InstructionVisitor","methodName":"visitReturnValue","parameters":["ReturnValueInstruction"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"createSyntheticCompanionObjectDescriptor","parameters":[""],"returnType":"ClassDescriptorWithResolutionScopes"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"checkProjectionsInImmediateArguments","parameters":["BindingTrace","KtTypeElement","KotlinType"],"returnType":"void"},39,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedLambdaAtom","methodName":"setAnalyzedResults","parameters":["ReturnArgumentsInfo","List"],"returnType":"Unit"},92,{"pathToFun":"org.jetbrains.kotlin.psi.KtProperty","methodName":"getInitializer","parameters":[""],"returnType":"KtExpression"},89,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.KotlinConstraintSystemCompleter","methodName":"fixVariable","parameters":["Context","VariableWithConstraints","TypeVariableDirectionCalculator.ResolveDirection","List"],"returnType":"Unit"},46,{"pathToFun":"org.jetbrains.kotlin.psi.KtClassOrObject","methodName":"getDeclarations","parameters":[""],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.CallGenerator$DefaultCallGenerator","methodName":"processAndPutHiddenParameters","parameters":["Boolean"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"isSignedOrUnsignedNumberType","parameters":["KotlinType"],"returnType":"Boolean"},6,{"pathToFun":"org.jetbrains.kotlin.descriptors.annotations.KotlinTarget$Companion","methodName":"classActualTargets","parameters":["ClassDescriptor"],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.RenderersKt","methodName":"asRenderer","parameters":["DescriptorRenderer"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.checkers.InlineParameterChecker","methodName":"reportIncorrectInline","parameters":["KtParameter","KtModifierKeywordToken","DiagnosticSink"],"returnType":"Unit"},105,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"generateFunctionsForDataClasses","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"processParameters","parameters":["List"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.instructions.InstructionVisitor","methodName":"visitMagic","parameters":["MagicInstruction"],"returnType":"Unit"},108,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.PostponedArgumentsAnalyzer","methodName":"forFunctionalType","parameters":["UnwrappedType?","UnwrappedType.() -> T"],"returnType":"T"},92,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"getContainingClass","parameters":["LexicalScope"],"returnType":"ClassDescriptor"},58,{"pathToFun":"org.jetbrains.kotlin.psi.KtElementImpl","methodName":"getPsiOrParent","parameters":[""],"returnType":"KtElement"},109,{"pathToFun":"org.jetbrains.kotlin.psi.KtClassOrObject","methodName":"getSuperTypeList","parameters":[""],"returnType":"KtSuperTypeList"},112,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"magic","parameters":["KtElement","KtElement","List","MagicKind"],"returnType":"MagicInstruction"},108,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiUtil","methodName":"getEnclosingElementForLocalDeclaration","parameters":["KtDeclaration"],"returnType":"KtElement"},113,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"isArrayOrNullableArray","parameters":["KotlinTypeMarker"],"returnType":"Boolean"},41,{"pathToFun":"org.jetbrains.kotlin.codegen.ClassBodyCodegen","methodName":"generatePrimaryConstructorProperties","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.ClassBodyCodegen","methodName":"generateDeclaration","parameters":["KtDeclaration"],"returnType":"void"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.FrameMapWithExpectActualSupport","methodName":"findActualParameter","parameters":["ParameterDescriptor"],"returnType":"ParameterDescriptor"},107,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.DiagnosticParameterRendererKt","methodName":"ContextDependentRenderer","parameters":["(O, RenderingContext) -> String"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"intoConstructor","parameters":["ConstructorDescriptor","KotlinTypeMapper"],"returnType":"ConstructorContext"},53,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitClassOrObject","parameters":["KtClassOrObject","Void"],"returnType":"Void"},112,{"pathToFun":"org.jetbrains.kotlin.extensions.internal.TypeResolutionInterceptor","methodName":"interceptFunctionLiteralDescriptor","parameters":["KtLambdaExpression","ExpressionTypingContext","AnonymousFunctionDescriptor"],"returnType":"Any"},95,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.BothSignatureWriter","methodName":"writeInterfaceBoundEnd","parameters":[""],"returnType":"void"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getConstructorDescriptor","parameters":["ResolvedCall"],"returnType":"ClassConstructorDescriptor"},60,{"pathToFun":"org.jetbrains.kotlin.codegen.ClosureCodegen","methodName":"generateBridges","parameters":[""],"returnType":"void"},108,{"pathToFun":"org.jetbrains.kotlin.types.AbstractClassTypeConstructor","methodName":"getBuiltIns","parameters":[""],"returnType":"KotlinBuiltIns"},65,{"pathToFun":"org.jetbrains.kotlin.resolve.AnnotationChecker","methodName":"checkPropertyUseSiteTargetAnnotations","parameters":["KtProperty","BindingTrace"],"returnType":"Unit"},81,{"pathToFun":"org.jetbrains.kotlin.types.checker.NewCapturedTypeConstructor","methodName":"initializeSupertypes","parameters":["List"],"returnType":"Unit"},25,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitTypeParameterList","parameters":["KtTypeParameterList","Void"],"returnType":"Void"},53,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitProperty","parameters":["KtProperty"],"returnType":"Unit"},81,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.CapturingInClosureChecker","methodName":"checkFieldInExactlyOnceLambdaInitialization","parameters":["VariableDescriptor","BindingTrace","DeclarationDescriptor","PsiElement"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext","methodName":"extractAllConstraints","parameters":[""],"returnType":"Any"},55,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CollectionTypeVariableUsagesInfo","methodName":"recordInfoAboutTypeVariableUsagesAsInvariantOrContravariantParameter","parameters":["TypeVariableFromCallableDescriptor"],"returnType":"Unit"},16,{"pathToFun":"org.jetbrains.kotlin.types.TypeIntersector","methodName":"getUpperBoundsAsType","parameters":["TypeParameterDescriptor"],"returnType":"KotlinType"},53,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"boundClosure","parameters":["Collection"],"returnType":"Collection"},52,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallExpressionResolver","methodName":"checkSelectorTypeInfo","parameters":["KtQualifiedExpression","KotlinTypeInfo","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},111,{"pathToFun":"org.jetbrains.kotlin.psi.psiUtil.psiUtilsKt","methodName":"hasExpectModifier","parameters":["KtModifierList"],"returnType":"Any"},110,{"pathToFun":"org.jetbrains.kotlin.psi.psiUtil.ReservedCheckingKt","methodName":"checkReservedYieldBeforeLambda","parameters":["PsiElement","DiagnosticSink"],"returnType":"Unit"},95,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"singleBestRepresentative","parameters":["Collection"],"returnType":"KotlinTypeMarker"},40,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitExpressionWithLabel","parameters":["KtExpressionWithLabel","Void"],"returnType":"Void"},100,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitAssignment","parameters":["KtExpression","() -> PseudoValue","KtExpression"],"returnType":"Unit"},83,{"pathToFun":"org.jetbrains.kotlin.types.checker.IntersectionTypeKt","methodName":"intersectTypes","parameters":["List"],"returnType":"UnwrappedType"},24,{"pathToFun":"org.jetbrains.kotlin.resolve.QualifiedExpressionResolver","methodName":"checkNotEnumEntry","parameters":["DeclarationDescriptor","BindingTrace","KtSimpleNameExpression"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkClassButNotObject","parameters":["KtClass","ClassDescriptorWithResolutionScopes"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenBinding","methodName":"asmTypeForAnonymousClassOrNull","parameters":["BindingContext","CallableDescriptor"],"returnType":"Type"},109,{"pathToFun":"org.jetbrains.kotlin.types.expressions.typeInfoFactory.TypeInfoFactoryKt","methodName":"createTypeInfo","parameters":["KotlinType"],"returnType":"KotlinTypeInfo"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.checkers.ExperimentalUsageChecker$ClassifierUsage","methodName":"check","parameters":["ClassifierDescriptor","PsiElement","ClassifierUsageCheckerContext"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$Local","methodName":"putSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.diagnostics.DiagnosticUtils","methodName":"firstRange","parameters":["List"],"returnType":"TextRange"},40,{"pathToFun":"org.jetbrains.kotlin.types.DisjointKeysUnionTypeSubstitution","methodName":"filterAnnotations","parameters":["Annotations"],"returnType":"Any"},53,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallExpressionResolver","methodName":"getUnsafeSelectorTypeInfo","parameters":["Receiver","ASTNode","KtExpression","ExpressionTypingContext","DataFlowInfo"],"returnType":"KotlinTypeInfo"},111,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.JvmDescriptorTypeWriter","methodName":"writeTypeVariable","parameters":["Name","T"],"returnType":"Unit"},86,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalChainedScope","methodName":"getContributedClassifierIncludeDeprecated","parameters":["Name","LookupLocation"],"returnType":"DescriptorWithDeprecation"},84,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.JvmSignatureWriter","methodName":"writeTypeArgumentEnd","parameters":[""],"returnType":"void"},84,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"generateEnumEntries","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.parsing.TrailingCommentsBinder","methodName":"getEdgePosition","parameters":["List","Boolean","WhitespacesAndCommentsBinder.TokenTextGetter"],"returnType":"Int"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker\\$CallImpl","methodName":"getCallOperationNode","parameters":[""],"returnType":"ASTNode"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkMethodsOfAnyInInterface","parameters":["ClassDescriptorWithResolutionScopes"],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"recoverOnPlatformTypeSuffix","parameters":[""],"returnType":"void"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.KotlinConstraintSystemCompleter","methodName":"findPostponedArgumentWithRevisableExpectedType","parameters":["List"],"returnType":"Any"},46,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitExpressionWithLabel","parameters":["KtExpressionWithLabel"],"returnType":"void"},100,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalScopeStorage","methodName":"descriptorByIndex","parameters":["Int"],"returnType":"Any"},108,{"pathToFun":"org.jetbrains.kotlin.diagnostics.PsiDiagnosticUtils","methodName":"offsetToLineAndColumn","parameters":["Document","int"],"returnType":"LineAndColumn"},40,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.KotlinToResolvedCallTransformer","methodName":"createStubResolvedCallAndWriteItToTrace","parameters":["ResolvedCallAtom","BindingTrace","Collection","NewTypeSubstitutor"],"returnType":"ResolvedCall"},92,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.TypeVariableDependencyInformationProvider","methodName":"getConstraintEdges","parameters":["TypeConstructorMarker"],"returnType":"Set"},45,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"intoDefaultImplsClass","parameters":["ClassDescriptor","ClassContext","GenerationState"],"returnType":"ClassContext"},110,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.MutableClosure","methodName":"isSuspend","parameters":[""],"returnType":"boolean"},111,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor","methodName":"processLocalDeclaration","parameters":["KtDeclaration"],"returnType":"Unit"},94,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"getClassOrPackageParentContext","parameters":[""],"returnType":"CodegenContext"},112,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowInformationProvider","methodName":"checkIsInitialized","parameters":["VariableInitContext","KtElement","MutableCollection"],"returnType":"Unit"},108,{"pathToFun":"org.jetbrains.kotlin.codegen.InterfaceImplBodyCodegen","methodName":"generateDeclaration","parameters":[""],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.NewResolvedCallImpl","methodName":"updateDispatchReceiverType","parameters":["KotlinType"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"done","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor\\$LazyClassTypeConstructor","methodName":"isDenotable","parameters":[""],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyPackageMemberScope","methodName":"getNonDeclaredProperties","parameters":["Name","MutableSet"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.InnerClassesScopeWrapper","methodName":"getContributedDescriptors","parameters":["DescriptorKindFilter","(Name) -> Boolean"],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.diagnostics.DiagnosticWithParameters1","methodName":"getFactory","parameters":[""],"returnType":"DiagnosticFactory1"},25,{"pathToFun":"org.jetbrains.kotlin.types.AbstractTypeApproximator","methodName":"approximateToSubType","parameters":["KotlinTypeMarker","TypeApproximatorConfiguration"],"returnType":"KotlinTypeMarker"},93,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionCodegen","methodName":"processInterfaceMethod","parameters":["CallableMemberDescriptor","OwnerKind","boolean","boolean","JvmDefaultMode"],"returnType":"boolean"},109,{"pathToFun":"org.jetbrains.kotlin.types.AbstractTypeCheckerContext","methodName":"initialize","parameters":[""],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.types.model.MarkerExtensionsKt","methodName":"freshTypeConstructor","parameters":["TypeVariableMarker","TypeSystemInferenceExtensionContext"],"returnType":"Any"},55,{"pathToFun":"org.jetbrains.kotlin.diagnostics.PositioningStrategy","methodName":"isValid","parameters":["E"],"returnType":"Boolean"},40,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.SingleOverloadResolutionResult","methodName":"getResultingDescriptor","parameters":[""],"returnType":"D"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl","methodName":"fixVariable","parameters":["TypeVariableMarker","KotlinTypeMarker","ResolvedAtom"],"returnType":"Unit"},50,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.Renderers","methodName":"commaSeparated","parameters":["DiagnosticParameterRenderer"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.builtins.functionTypesKt","methodName":"createFunctionType","parameters":["KotlinBuiltIns","Annotations","KotlinType","List","List","KotlinType","Boolean"],"returnType":"SimpleType"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateNonIntrinsicSimpleNameExpression","parameters":["KtSimpleNameExpression","StackValue","DeclarationDescriptor","ResolvedCall","boolean"],"returnType":"StackValue"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.MissingSupertypesResolver","methodName":"getMissingSuperClassifiers","parameters":["ClassifierDescriptor"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.psi.KtProperty","methodName":"hasDelegate","parameters":[""],"returnType":"boolean"},81,{"pathToFun":"org.jetbrains.kotlin.psi.KtClassOrObject","methodName":"getBody","parameters":[""],"returnType":"KtClassBody"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.context.DefaultImplsClassContext","methodName":"getAccessors","parameters":[""],"returnType":"Collection"},110,{"pathToFun":"org.jetbrains.kotlin.psi.KtProperty","methodName":"hasInitializer","parameters":[""],"returnType":"boolean"},81,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"generateToArray","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.types.model.TypeSystemContext","methodName":"get","parameters":["TypeArgumentListMarker","Int"],"returnType":"TypeArgumentMarker"},111,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ValueParameterResolver","methodName":"resolveDefaultValue","parameters":["ValueParameterDescriptor","KtParameter","ExpressionTypingContext"],"returnType":"Unit"},105,{"pathToFun":"org.jetbrains.kotlin.resolve.ObservableBindingTrace","methodName":"addHandler","parameters":["WritableSlice","RecordHandler"],"returnType":"ObservableBindingTrace"},83,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.JvmSignatureWriter","methodName":"writeClassBoundEnd","parameters":[""],"returnType":"void"},59,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.Nullability","methodName":"canBeNonNull","parameters":[""],"returnType":"boolean"},99,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseTypeParameterList","parameters":["TokenSet"],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.extensions.internal.TypeResolutionInterceptor","methodName":"interceptType","parameters":["KtElement","ExpressionTypingContext","KotlinType"],"returnType":"KotlinType"},95,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"generateKotlinMetadataAnnotation","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtClassOrObject","methodName":"getPrimaryConstructorModifierList","parameters":[""],"returnType":"KtModifierList"},49,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadResolutionResults\\$Code","methodName":"isSuccess","parameters":[""],"returnType":"boolean"},109,{"pathToFun":"org.jetbrains.kotlin.types.AbstractTypeApproximator","methodName":"approximateIntersectionType","parameters":["SimpleTypeMarker","TypeApproximatorConfiguration","Boolean","Int"],"returnType":"KotlinTypeMarker"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"checkNullableSupertypeAndStripQuestionMarks","parameters":["BindingTrace","KtTypeElement"],"returnType":"KtTypeElement"},39,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.VariableFixationFinder","methodName":"variableHasOnlyIncorporatedConstraintsFromDeclaredUpperBound","parameters":["Context","TypeConstructorMarker"],"returnType":"Boolean"},50,{"pathToFun":"org.jetbrains.kotlin.resolve.VarianceCheckerCore","methodName":"varianceWithManual","parameters":["TypeParameterDescriptor"],"returnType":"Any"},52,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"isFun","parameters":[""],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.load.java.descriptors.utilKt","methodName":"getParentJavaStaticClassScope","parameters":["ClassDescriptor"],"returnType":"LazyJavaStaticClassScope"},113,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseDelegationSpecifierList","parameters":[""],"returnType":"void"},39,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ResultTypeResolver","methodName":"findSubType","parameters":["Context","VariableWithConstraints"],"returnType":"KotlinTypeMarker"},39,{"pathToFun":"org.jetbrains.kotlin.types.AbstractTypeChecker","methodName":"isCommonDenotableType","parameters":["AbstractTypeCheckerContext","KotlinTypeMarker"],"returnType":"Boolean"},79,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.NewTypeSubstitutorByConstructorMap","methodName":"substituteNotNullTypeWithConstructor","parameters":["TypeConstructor"],"returnType":"UnwrappedType"},50,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkPrivateExpectedDeclaration","parameters":["KtDeclaration","MemberDescriptor"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenBinding","methodName":"canHaveOuter","parameters":["BindingContext","ClassDescriptor"],"returnType":"boolean"},30,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.instructions.special.VariableDeclarationInstruction","methodName":"accept","parameters":["InstructionVisitor"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.psi.KtProperty","methodName":"isVar","parameters":[""],"returnType":"boolean"},81,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.LazyDeclarationResolver","methodName":"findClassDescriptorIfAny","parameters":["KtNamedDeclaration","LookupLocation"],"returnType":"ClassDescriptor"},111,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseLabelReferenceWithNoWhitespace","parameters":[""],"returnType":"void"},100,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.JvmSignatureWriter","methodName":"writeInterfaceEnd","parameters":[""],"returnType":"void"},113,{"pathToFun":"org.jetbrains.kotlin.psi.KtBlockExpression","methodName":"acceptChildren","parameters":["KtVisitor","D"],"returnType":"void"},95,{"pathToFun":"org.jetbrains.kotlin.psi.KtNamedDeclarationUtil","methodName":"getFQName","parameters":["KtNamedDeclaration"],"returnType":"FqName"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.NewCommonSuperTypeCalculator","methodName":"isCapturedStubType","parameters":["TypeSystemCommonSuperTypesContext","SimpleTypeMarker"],"returnType":"Boolean"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"resolveUnknownVisibilitiesForMembers","parameters":["Collection"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitTypeElement","parameters":["KtTypeElement","D"],"returnType":"R"},113,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"contains","parameters":["KotlinTypeMarker","(KotlinTypeMarker) -> Boolean"],"returnType":"Boolean"},99,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"resolveTypeParameterForDescriptor","parameters":["DeclarationDescriptor","LexicalScope","KtTypeParameter","int","BindingTrace"],"returnType":"TypeParameterDescriptorImpl"},25,{"pathToFun":"org.jetbrains.kotlin.codegen.SamWrapperCodegen","methodName":"generateDelegatesToDefaultImpl","parameters":["Type","ClassDescriptor","ClassDescriptor","FunctionCodegen","GenerationState"],"returnType":"void"},106,{"pathToFun":"org.jetbrains.kotlin.codegen.ClosureCodegen","methodName":"generateClosureBody","parameters":[""],"returnType":"void"},108,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.coroutineCodegenUtilKt","methodName":"isSuspendLambdaOrLocalFunction","parameters":["FunctionDescriptor"],"returnType":"Any"},108,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitClass","parameters":["KtClass"],"returnType":"void"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.BoxingInterpreter","methodName":"unaryOperation","parameters":["AbstractInsnNode","BasicValue"],"returnType":"BasicValue"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateFinallyBlocksIfNeeded","parameters":["Type","KotlinType","Label"],"returnType":"void"},100,{"pathToFun":"org.jetbrains.kotlin.resolve.VarianceCheckerCore","methodName":"checkTypePosition","parameters":["TypeBinding","Variance"],"returnType":"Any"},35,{"pathToFun":"org.jetbrains.kotlin.resolve.sam.SamConversionResolverImpl","methodName":"resolveFunctionTypeIfSamInterface","parameters":["ClassDescriptor"],"returnType":"SimpleType"},110,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor","methodName":"isSuspend","parameters":[""],"returnType":"boolean"},109,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalScopeStorage","methodName":"getContributedClassifier","parameters":["Name","LookupLocation"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"generateConstructors","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"recordClassForCallable","parameters":["KtElement","CallableDescriptor","Collection","String"],"returnType":"ClassDescriptor"},109,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyTypeParameterDescriptor","methodName":"getContainingDeclaration","parameters":[""],"returnType":"LazyClassDescriptor"},52,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.IntegerLiteralTypeConstructor$Companion","methodName":"fold","parameters":["SimpleType","SimpleType","Mode"],"returnType":"SimpleType"},10,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.VariableDescriptorImpl","methodName":"getOriginal","parameters":[""],"returnType":"VariableDescriptor"},85,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorUtils","methodName":"shouldRecordInitializerForProperty","parameters":["VariableDescriptor","KotlinType"],"returnType":"boolean"},58,{"pathToFun":"org.jetbrains.kotlin.psi.KtDeclarationImpl","methodName":"hasModifier","parameters":["KtModifierKeywordToken"],"returnType":"boolean"},95,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.BothSignatureWriter","methodName":"writeClassBound","parameters":[""],"returnType":"void"},59,{"pathToFun":"org.jetbrains.kotlin.types.DeferredType","methodName":"isComputed","parameters":[""],"returnType":"boolean"},83,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.NewResolvedCallImpl","methodName":"getSubstitutorWithoutFlexibleTypes","parameters":["NewTypeSubstitutor","List"],"returnType":"NewTypeSubstitutor"},75,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"mapSupertype","parameters":["KotlinType","JvmSignatureWriter"],"returnType":"Type"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"markLineNumberForElement","parameters":["PsiElement","InstructionAdapter"],"returnType":"void"},39,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"createSimpleType","parameters":["TypeConstructorMarker","List","Boolean","Boolean"],"returnType":"SimpleTypeMarker"},8,{"pathToFun":"org.jetbrains.kotlin.psi.psiUtil.ktPsiUtilKt","methodName":"collectAnnotationEntriesFromStubOrPsi","parameters":["KtAnnotationsContainer"],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.AbstractLazyMemberScope","methodName":"doGetProperties","parameters":["Name"],"returnType":"Collection"},113,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.VariableDescriptorImpl","methodName":"isConst","parameters":[""],"returnType":"boolean"},109,{"pathToFun":"org.jetbrains.kotlin.resolve.FunctionDescriptorResolver","methodName":"resolvePrimaryConstructorDescriptor","parameters":["LexicalScope","ClassDescriptor","KtPureClassOrObject","BindingTrace"],"returnType":"ClassConstructorDescriptorImpl"},49,{"pathToFun":"org.jetbrains.kotlin.psi.KtClassOrObject","methodName":"getPrimaryConstructorParameterList","parameters":[""],"returnType":"KtParameterList"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.sam.SamConversionResolverImplKt","methodName":"getSingleAbstractMethodOrNull","parameters":["ClassDescriptor"],"returnType":"FunctionDescriptor"},110,{"pathToFun":"org.jetbrains.kotlin.psi.KtLambdaArgument","methodName":"getLambdaExpression","parameters":[""],"returnType":"KtLambdaExpression"},91,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CreateFreshVariablesSubstitutor","methodName":"getTypePreservingFlexibilityWrtTypeVariable","parameters":["KotlinType","TypeVariableFromCallableDescriptor"],"returnType":"Any"},36,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getDeclaredCallableMembers","parameters":[""],"returnType":"Collection"},112,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseMemberDeclaration","parameters":[""],"returnType":"void"},111,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"computePseudoValueForParameter","parameters":["KtParameter"],"returnType":"PseudoValue"},105,{"pathToFun":"org.jetbrains.kotlin.resolve.sam.SamConversionResolverImplKt","methodName":"getFunctionTypeForSamType","parameters":["KotlinType","SamConversionResolver","SamConversionOracle"],"returnType":"KotlinType"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.MutableClosure","methodName":"getEnclosingClass","parameters":[""],"returnType":"ClassDescriptor"},30,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"intoClosure","parameters":["FunctionDescriptor","LocalLookup","KotlinTypeMapper"],"returnType":"ClosureContext"},109,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"getDeclarationAccessTarget","parameters":["KtElement"],"returnType":"AccessTarget"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.diagnostics.KotlinSuppressCache$EmptySuppressor","methodName":"dominates","parameters":["Suppressor"],"returnType":"Boolean"},40,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"bindLabel","parameters":["Label"],"returnType":"Unit"},108,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver","methodName":"checkOverridesForParameters","parameters":["CallableMemberDescriptor"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.ResolveSession","methodName":"getTopLevelClassifierDescriptors","parameters":["FqName","LookupLocation"],"returnType":"Collection"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.AbstractTypeCheckerContextForConstraintSystem","methodName":"simplifyUpperConstraint","parameters":["KotlinTypeMarker","KotlinTypeMarker"],"returnType":"Boolean"},55,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"addValidSupertype","parameters":["List","KotlinType"],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.ClassResolutionScopesSupport","methodName":"createInheritanceScope","parameters":["LexicalScope","DeclarationDescriptor","ClassDescriptor","Boolean","Boolean"],"returnType":"LexicalScope"},112,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingServices","methodName":"getNewInferenceLambdaInfo","parameters":["ExpressionTypingContext","KtElement"],"returnType":"LambdaInfo"},110,{"pathToFun":"org.jetbrains.kotlin.resolve.AnnotationChecker","methodName":"checkSuperTypeAnnotations","parameters":["KtClass","BindingTrace"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.BodyResolver","methodName":"resolveSuperTypeEntryList","parameters":["DataFlowInfo","KtClassOrObject","ClassDescriptor","ConstructorDescriptor","LexicalScope","LexicalScope"],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"captureFromArguments","parameters":["SimpleTypeMarker","CaptureStatus"],"returnType":"SimpleTypeMarker"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.JvmSignatureWriter","methodName":"writeClassBound","parameters":[""],"returnType":"void"},59,{"pathToFun":"org.jetbrains.kotlin.resolve.FunctionDescriptorResolver","methodName":"removeParameterNameAnnotation","parameters":["KotlinType"],"returnType":"KotlinType"},65,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.AbstractLazyMemberScope","methodName":"computeDescriptorsFromDeclaredElements","parameters":["DescriptorKindFilter","(Name) -> Boolean","LookupLocation"],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorUtils","methodName":"getAllOverriddenDescriptors","parameters":["D"],"returnType":"Set"},112,{"pathToFun":"org.jetbrains.kotlin.types.expressions.FunctionsTypingVisitor","methodName":"createFunctionLiteralDescriptor","parameters":["KtLambdaExpression","ExpressionTypingContext"],"returnType":"AnonymousFunctionDescriptor"},95,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.TypeVariableDependencyInformationProvider","methodName":"computeConstraintEdges","parameters":[""],"returnType":"Unit"},50,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"returnValue","parameters":["KtExpression","PseudoValue","KtElement"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.diagnostics.PositioningStrategyKt","methodName":"hasSyntaxErrors","parameters":["PsiElement"],"returnType":"Boolean"},40,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererOptionsImpl","methodName":"copy","parameters":[""],"returnType":"DescriptorRendererOptionsImpl"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.LazyDeclarationResolver","methodName":"findClassDescriptor","parameters":["KtNamedDeclaration","LookupLocation"],"returnType":"ClassDescriptor"},111,{"pathToFun":"org.jetbrains.kotlin.types.CommonSupertypes","methodName":"commonSupertype","parameters":["Collection"],"returnType":"KotlinType"},95,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.PseudocodeVariablesData$ReadOnlyUseControlFlowInfoImpl","methodName":"getOrNull","parameters":["VariableDescriptor"],"returnType":"VariableUseState"},109,{"pathToFun":"org.jetbrains.kotlin.resolve.BodyResolver","methodName":"checkRedeclarationsInClassHeaderWithoutPrimaryConstructor","parameters":["ClassDescriptor","LexicalScope"],"returnType":"void"},110,{"pathToFun":"org.jetbrains.kotlin.resolve.BodyResolver","methodName":"getAllowedFinalSupertypes","parameters":["ClassDescriptor","Map","KtClassOrObject"],"returnType":"Set"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.ClassBodyCodegen","methodName":"generateBody","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver$Companion","methodName":"checkInheritedDescriptorsGroup","parameters":["CallableMemberDescriptor","Collection","CheckInheritedSignaturesReportStrategy"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.codegenUtilKt","methodName":"getCallLabelForLambdaArgument","parameters":["KtFunctionLiteral","BindingContext"],"returnType":"String"},95,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.functionTypeResolveUtilsKt","methodName":"createValueParametersForInvokeInFunctionType","parameters":["FunctionDescriptor","List"],"returnType":"List"},108,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver","methodName":"checkNameAndDefaultForFakeOverrideParameter","parameters":["CallableMemberDescriptor","ValueParameterDescriptor","Boolean"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.TypeVariableDependencyInformationProvider","methodName":"forAllMyTypeVariables","parameters":["KotlinTypeMarker","(TypeConstructorMarker) -> Unit"],"returnType":"Any"},50,{"pathToFun":"org.jetbrains.kotlin.psi.KtProperty","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},81,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitSuperTypeEntry","parameters":["KtSuperTypeEntry"],"returnType":"void"},37,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.instructions.InstructionVisitor","methodName":"visitLoadUnitValue","parameters":["LoadUnitValueInstruction"],"returnType":"Unit"},70,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker","methodName":"makeCallWithExpressions","parameters":["KtElement","Receiver","ASTNode","KtExpression","List","CallType","boolean"],"returnType":"Call"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.MemberComparator","methodName":"compare","parameters":["DeclarationDescriptor","DeclarationDescriptor"],"returnType":"int"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"visitSimpleNameExpression","parameters":["KtSimpleNameExpression","KotlinType"],"returnType":"CompileTimeConstant"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl","methodName":"isProperTypeImpl","parameters":["KotlinTypeMarker"],"returnType":"Boolean"},55,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.instructions.eval.MagicInstruction","methodName":"accept","parameters":["InstructionVisitor"],"returnType":"Any"},108,{"pathToFun":"org.jetbrains.kotlin.types.model.TypeSystemContext","methodName":"isDynamic","parameters":["KotlinTypeMarker"],"returnType":"Boolean"},79,{"pathToFun":"org.jetbrains.kotlin.parsing.AbstractKotlinParsing\\$OptionalMarker","methodName":"error","parameters":["String"],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher","methodName":"visitQualifiedExpression","parameters":["KtQualifiedExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.data.KtClassOrObjectInfo","methodName":"getCompanionObjects","parameters":[""],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.checkers.ExpectedActualDeclarationChecker$Companion","methodName":"isOptionalAnnotationClass","parameters":["DeclarationDescriptor"],"returnType":"Boolean"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.resolvedCallUtil.resolvedCallUtilKt","methodName":"makeNullableTypeIfSafeReceiver","parameters":["ResolvedCall","KotlinType","CallResolutionContext"],"returnType":"Any"},86,{"pathToFun":"org.jetbrains.kotlin.psi.KtParameter","methodName":"hasValOrVar","parameters":[""],"returnType":"boolean"},105,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiUtil","methodName":"isLHSOfDot","parameters":["KtExpression"],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.utils.ScopeUtilsKt","methodName":"findLocalVariable","parameters":["LexicalScope","Name"],"returnType":"VariableDescriptor"},109,{"pathToFun":"org.jetbrains.kotlin.codegen.JvmBridgesImplKt","methodName":"isJvmDefaultOrPlatformDependent","parameters":["CallableMemberDescriptor","JvmDefaultMode"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"recordLookup","parameters":["Name","LookupLocation"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.OverloadResolver","methodName":"checkOverloadsInClass","parameters":["ClassDescriptorWithResolutionScopes","Collection"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.types.IntersectionTypeConstructor","methodName":"getDeclarationDescriptor","parameters":[""],"returnType":"ClassifierDescriptor"},8,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker","methodName":"makeCall","parameters":["KtElement","Receiver","ASTNode","KtExpression","List","CallType","boolean"],"returnType":"Call"},112,{"pathToFun":"org.jetbrains.kotlin.cfg.ConstructorConsistencyChecker","methodName":"check","parameters":[""],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.ValueParameterDescriptorImpl","methodName":"getOverriddenDescriptors","parameters":[""],"returnType":"Collection"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.JvmCodegenUtil","methodName":"isDelegatedLocalVariable","parameters":["DeclarationDescriptor"],"returnType":"boolean"},108,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CompletionModeCalculator$CalculatorForNestedCall","methodName":"compositeVariance","parameters":["CsCompleterContext","TypeVariance","TypeArgumentMarker","TypeParameterMarker"],"returnType":"TypeVariance"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"computeSupertypes","parameters":[""],"returnType":"Collection"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeParameter","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},53,{"pathToFun":"org.jetbrains.kotlin.psi.KtParameter","methodName":"getReceiverTypeReference","parameters":[""],"returnType":"KtTypeReference"},105,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.ClassResolutionScopesSupport","methodName":"createLazyValue","parameters":["StorageManager","((Boolean) -> T)","() -> T"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingVisitor","methodName":"getFunctionExpectedReturnType","parameters":["FunctionDescriptor","KtElement","ExpressionTypingContext"],"returnType":"KotlinType"},100,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.ClassDescriptorImpl","methodName":"getModality","parameters":[""],"returnType":"Modality"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getNothingType","parameters":[""],"returnType":"KotlinType"},101,{"pathToFun":"org.jetbrains.kotlin.codegen.state.BuilderFactoryForDuplicateSignatureDiagnostics","methodName":"asRawSignature","parameters":["FunctionDescriptor"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.cfg.ConstructorConsistencyChecker$Companion","methodName":"check","parameters":["KtClassOrObject","BindingTrace","Pseudocode","PseudocodeVariablesData"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.parsing.AbstractKotlinParsing","methodName":"eol","parameters":[""],"returnType":"boolean"},89,{"pathToFun":"org.jetbrains.kotlin.codegen.ClassBodyCodegen","methodName":"getPrimaryConstructorParameters","parameters":[""],"returnType":"List"},53,{"pathToFun":"org.jetbrains.kotlin.resolve.PossiblyBareType","methodName":"isBare","parameters":[""],"returnType":"boolean"},113,{"pathToFun":"org.jetbrains.kotlin.util.MappedExtensionProvider","methodName":"update","parameters":[""],"returnType":"R"},41,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.ClassConstructorDescriptorImpl","methodName":"substitute","parameters":["TypeSubstitutor"],"returnType":"ClassConstructorDescriptor"},61,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.PseudocodeVariablesData","methodName":"isTrivialInitializer","parameters":["WriteValueInstruction"],"returnType":"Any"},110,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.PostponeArgumentsChecksKt","methodName":"extractLambdaInfoFromFunctionalType","parameters":["UnwrappedType","LambdaKotlinCallArgument","TypeVariableForLambdaReturnType"],"returnType":"ResolvedLambdaAtom"},92,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"getConstructors","parameters":[""],"returnType":"Collection"},112,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingServices","methodName":"updateContextFromNILambdaInfo","parameters":["LambdaInfo","ExpressionTypingContext"],"returnType":"ExpressionTypingContext"},46,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.ClassDescriptorBase","methodName":"getSource","parameters":[""],"returnType":"SourceElement"},113,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitParameter","parameters":["KtParameter","Void"],"returnType":"Void"},105,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseReturn","parameters":[""],"returnType":"void"},100,{"pathToFun":"org.jetbrains.kotlin.resolve.TypeResolver","methodName":"resolveTypeElement","parameters":["TypeResolutionContext","Annotations","KtModifierList","KtTypeElement"],"returnType":"PossiblyBareType"},113,{"pathToFun":"org.jetbrains.kotlin.types.TypeUtils","methodName":"getImmediateSupertypes","parameters":["KotlinType"],"returnType":"List"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CollectionTypeVariableUsagesInfo","methodName":"isContainedInInvariantOrContravariantPositions","parameters":["NewConstraintSystem","TypeConstructorMarker","KotlinTypeMarker","Boolean"],"returnType":"Boolean"},54,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.declarations.FileBasedDeclarationProviderFactory","methodName":"getClassMemberDeclarationProvider","parameters":["KtClassLikeInfo"],"returnType":"ClassMemberDeclarationProvider"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"genClassOrObject","parameters":["CodegenContext","KtPureClassOrObject","GenerationState","MemberCodegen","ClassDescriptor"],"returnType":"void"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.context.MethodContext","methodName":"isDefaultFunctionContext","parameters":[""],"returnType":"boolean"},107,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"visitLambdaExpression","parameters":["KtLambdaExpression"],"returnType":"void"},95,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"checkBounds","parameters":["KtTypeReference","KotlinType","BindingTrace"],"returnType":"void"},40,{"pathToFun":"org.jetbrains.kotlin.resolve.diagnostics.KotlinSuppressCache","methodName":"isSuppressed","parameters":["Diagnostic"],"returnType":"Boolean"},41,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseTypeArgumentModifierList","parameters":[""],"returnType":"boolean"},51,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.data.KtClassOrObjectInfo","methodName":"getDeclarations","parameters":[""],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorEquivalenceForOverrides","methodName":"areEquivalent","parameters":["DeclarationDescriptor","DeclarationDescriptor","Boolean","Boolean"],"returnType":"Boolean"},51,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"genClosureFields","parameters":["List","ClassBuilder"],"returnType":"void"},113,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseMembers","parameters":[""],"returnType":"void"},111,{"pathToFun":"org.jetbrains.kotlin.psi.KtClassOrObject","methodName":"getSuperTypeListEntries","parameters":[""],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.TrivialConstraintTypeInferenceOracle","methodName":"isSuitableResultedType","parameters":["KotlinTypeMarker"],"returnType":"Boolean"},24,{"pathToFun":"org.jetbrains.kotlin.resolve.DelegationResolver","methodName":"generateDelegatedMembers","parameters":[""],"returnType":"Collection"},112,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.ClassConstructorDescriptorImpl","methodName":"createSubstitutedCopy","parameters":["DeclarationDescriptor","FunctionDescriptor","Kind","Name","Annotations","SourceElement"],"returnType":"ClassConstructorDescriptorImpl"},48,{"pathToFun":"org.jetbrains.kotlin.codegen.AnnotationCodegen","methodName":"safe","parameters":["AnnotationVisitor"],"returnType":"AnnotationVisitor"},113,{"pathToFun":"org.jetbrains.kotlin.types.flexibleTypesKt","methodName":"singleBestRepresentative","parameters":["Collection"],"returnType":"KotlinType"},40,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"mapAsmMethod","parameters":["FunctionDescriptor","OwnerKind"],"returnType":"Method"},108,{"pathToFun":"org.jetbrains.kotlin.psi.KtElementImplStub","methodName":"toString","parameters":[""],"returnType":"String"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"adjustVariableValue","parameters":["StackValue","DeclarationDescriptor"],"returnType":"StackValue"},108,{"pathToFun":"org.jetbrains.kotlin.codegen.SamType","methodName":"create","parameters":["KotlinType"],"returnType":"SamType"},110,{"pathToFun":"org.jetbrains.kotlin.diagnostics.DiagnosticUtils","methodName":"getLineAndColumnRange","parameters":["Diagnostic"],"returnType":"LineAndColumnRange"},40,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.SyntheticScopesKt","methodName":"collectSyntheticMemberFunctions","parameters":["SyntheticScopes","Collection","Name","LookupLocation"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext","methodName":"isCapturedTypeFromSubtyping","parameters":["KotlinTypeMarker"],"returnType":"Any"},55,{"pathToFun":"org.jetbrains.kotlin.codegen.AbstractClassBuilder","methodName":"newField","parameters":["JvmDeclarationOrigin","int","String","String","String","Object"],"returnType":"FieldVisitor"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"generateSyntheticPartsAfterBody","parameters":[""],"returnType":"void"},109,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.synthetic.FunInterfaceConstructorsSyntheticScope","methodName":"recordSamLookupsToClassifier","parameters":["ClassifierDescriptor","LookupLocation"],"returnType":"Unit"},83,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.BaseHierarchicalScope","methodName":"getContributedVariables","parameters":["Name","LookupLocation"],"returnType":"Collection"},109,{"pathToFun":"org.jetbrains.kotlin.types.SimpleTypeImpl","methodName":"replaceAnnotations","parameters":["Annotations"],"returnType":"Any"},110,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.SubstitutingScope","methodName":"getContributedVariables","parameters":["Name","LookupLocation"],"returnType":"Any"},69,{"pathToFun":"org.jetbrains.kotlin.codegen.JvmCodegenUtil","methodName":"getDispatchReceiverParameterForConstructorCall","parameters":["ConstructorDescriptor","CalculatedClosure"],"returnType":"ClassDescriptor"},63,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.JvmSignatureWriter","methodName":"writeInterfaceBound","parameters":[""],"returnType":"void"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.QualifiedExpressionResolver","methodName":"asQualifierPartList","parameters":["KtUserType"],"returnType":"Pair"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"getVisibilityAccessFlagForClass","parameters":["ClassDescriptor"],"returnType":"int"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.ConstructorCodegen","methodName":"registerAccessorForHiddenConstructorIfNeeded","parameters":["ClassConstructorDescriptor"],"returnType":"void"},53,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseSelectorCallExpression","parameters":[""],"returnType":"void"},111,{"pathToFun":"org.jetbrains.kotlin.storage.LockBasedLazyResolveStorageManager$LockProtectedTrace","methodName":"record","parameters":["WritableSlice","K"],"returnType":"Unit"},82,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.TowerLevelsKt","methodName":"getClassWithConstructors","parameters":["ClassifierDescriptor"],"returnType":"ClassDescriptor"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"canHaveSideEffects","parameters":[""],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"local","parameters":["int","Type","VariableDescriptor","KotlinType"],"returnType":"StackValue"},108,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowValueFactoryImpl","methodName":"createDataFlowValueForProperty","parameters":["KtProperty","VariableDescriptor","BindingContext","ModuleDescriptor"],"returnType":"DataFlowValue"},67,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.VariableDescriptorImpl","methodName":"getExtensionReceiverParameter","parameters":[""],"returnType":"ReceiverParameterDescriptor"},108,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.TypeIntersectionScope$Companion","methodName":"create","parameters":["String","Collection"],"returnType":"MemberScope"},9,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeArgumentList","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},51,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"addLeaveTaskToRemoveLocalVariableFromFrameMap","parameters":["KtVariableDeclaration","Label","List"],"returnType":"void"},72,{"pathToFun":"org.jetbrains.kotlin.types.TypeSubstitutor","methodName":"combine","parameters":["Variance","Variance"],"returnType":"Variance"},96,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CompletionModeCalculator$CalculatorForNestedCall","methodName":"updateDirection","parameters":["FixationDirectionForVariable"],"returnType":"Unit"},24,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"asmType","parameters":["KotlinType"],"returnType":"Type"},110,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CompletionModeCalculator$CalculatorForNestedCall","methodName":"directionRequirementsForVariablesHold","parameters":["CsCompleterContext"],"returnType":"Boolean"},24,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.BlockScopeVariableInfoImpl","methodName":"registerVariableDeclaredInScope","parameters":["VariableDescriptor","BlockScope"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"asArgumentList","parameters":["SimpleTypeMarker"],"returnType":"TypeArgumentListMarker"},112,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.AbstractDiagnosticWithParametersRenderer","methodName":"render","parameters":["D"],"returnType":"String"},35,{"pathToFun":"org.jetbrains.kotlin.util.slicedMap.BasicWritableSlice","methodName":"toString","parameters":[""],"returnType":"String"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt","methodName":"isCompanionObject","parameters":["DeclarationDescriptor"],"returnType":"Boolean"},113,{"pathToFun":"org.jetbrains.kotlin.types.SubstitutionUtils","methodName":"fillInDeepSubstitutor","parameters":["KotlinType","TypeSubstitutor","Map","Multimap"],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt","methodName":"isTypeRefinementEnabled","parameters":["ModuleDescriptor"],"returnType":"Boolean"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.checkers.PlatformDiagnosticSuppressor$Default","methodName":"shouldReportUnusedParameter","parameters":["VariableDescriptor"],"returnType":"Boolean"},70,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.data.KtClassOrObjectInfo","methodName":"getModifierList","parameters":[""],"returnType":"KtModifierList"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitTypeParameter","parameters":["KtTypeParameter"],"returnType":"void"},53,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.BoxingInterpreterKt","methodName":"isInlineClassBoxingMethodDescriptor","parameters":["MethodInsnNode","GenerationState"],"returnType":"Boolean"},110,{"pathToFun":"org.jetbrains.kotlin.codegen.FrameMapWithExpectActualSupport","methodName":"getIndex","parameters":["DeclarationDescriptor"],"returnType":"Int"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.SamTypeConversions","methodName":"needCompatibilityResolveForSAM","parameters":["KotlinResolutionCandidate","UnwrappedType"],"returnType":"Boolean"},87,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitSuperTypeListEntry","parameters":["KtSuperTypeListEntry"],"returnType":"void"},39,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitTypeArgumentList","parameters":["KtTypeArgumentList","D"],"returnType":"R"},51,{"pathToFun":"org.jetbrains.kotlin.psi.KtProperty","methodName":"isLocal","parameters":[""],"returnType":"boolean"},81,{"pathToFun":"org.jetbrains.kotlin.resolve.diagnostics.KotlinSuppressCache","methodName":"getOrCreateSuppressor","parameters":["KtAnnotated"],"returnType":"Suppressor"},41,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getVariableType","parameters":["VariableDescriptor"],"returnType":"Type"},72,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalWritableScope","methodName":"addClassifierDescriptor","parameters":["ClassifierDescriptor"],"returnType":"Unit"},25,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker\\$CallImpl","methodName":"getCallElement","parameters":[""],"returnType":"KtElement"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.LocalVariableResolver","methodName":"checkLocalVariableDeclaration","parameters":["ExpressionTypingContext","VariableDescriptor","KtProperty"],"returnType":"Unit"},72,{"pathToFun":"org.jetbrains.kotlin.psi.KtNamedDeclarationStub","methodName":"getTextOffset","parameters":[""],"returnType":"int"},92,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorUtils","methodName":"getAllDescriptors","parameters":["MemberScope"],"returnType":"Collection"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ResultTypeResolver","methodName":"findResultIfThereIsEqualsConstraint","parameters":["Context","VariableWithConstraints"],"returnType":"KotlinTypeMarker"},50,{"pathToFun":"org.jetbrains.kotlin.types.TypeIntersector","methodName":"intersectUpperBounds","parameters":["TypeParameterDescriptor","List"],"returnType":"KotlinType"},53,{"pathToFun":"org.jetbrains.kotlin.psi.KtClassOrObject","methodName":"hasSecondaryConstructors","parameters":[""],"returnType":"Boolean"},111,{"pathToFun":"org.jetbrains.kotlin.types.checker.TypeIntersector$ResultNullability$NOT_NULL","methodName":"combine","parameters":["UnwrappedType"],"returnType":"Any"},11,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalChainedScope$Companion","methodName":"create","parameters":["LexicalScope","DeclarationDescriptor","Boolean","ReceiverParameterDescriptor","LexicalScopeKind","MemberScope","Boolean"],"returnType":"LexicalScope"},112,{"pathToFun":"org.jetbrains.kotlin.types.TypeApproximator","methodName":"approximateToSubType","parameters":["UnwrappedType","TypeApproximatorConfiguration"],"returnType":"UnwrappedType"},92,{"pathToFun":"org.jetbrains.kotlin.codegen.SignatureCollectingClassBuilderFactory$SignatureCollectingClassBuilder","methodName":"newField","parameters":["JvmDeclarationOrigin","Int","String","String","String","Any"],"returnType":"FieldVisitor"},111,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractClassDescriptor","methodName":"getUnsubstitutedInnerClassesScope","parameters":[""],"returnType":"MemberScope"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.VariableFixationFinder","methodName":"isProperType","parameters":["Context","KotlinTypeMarker"],"returnType":"Boolean"},50,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingUtils","methodName":"isLocal","parameters":["DeclarationDescriptor","DeclarationDescriptor"],"returnType":"boolean"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getVariableTypeNoSharing","parameters":["VariableDescriptor"],"returnType":"Type"},108,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallExpressionResolver$Companion","methodName":"checkNestedClassAccess","parameters":["KtQualifiedExpression","ExpressionTypingContext"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.diagnostics.KotlinSuppressCache$Companion","methodName":"getDiagnosticSuppressKey","parameters":["Diagnostic"],"returnType":"String"},41,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getStaticScope","parameters":[""],"returnType":"MemberScope"},112,{"pathToFun":"org.jetbrains.kotlin.descriptors.EffectiveVisibilityKt","methodName":"effectiveVisibility","parameters":["ClassDescriptor","Boolean"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitQualifiedExpression","parameters":["KtQualifiedExpression"],"returnType":"void"},111,{"pathToFun":"org.jetbrains.kotlin.types.expressions.FunctionsTypingVisitor","methodName":"isSuspendFunctionType","parameters":["KotlinType"],"returnType":"Any"},95,{"pathToFun":"org.jetbrains.kotlin.resolve.LateinitModifierApplicabilityChecker","methodName":"checkLateinitModifierApplicability","parameters":["BindingTrace","KtCallableDeclaration","VariableDescriptor"],"returnType":"Unit"},87,{"pathToFun":"org.jetbrains.kotlin.types.model.typeSystemContextHelpersKt","methodName":"typeConstructor","parameters":["KotlinTypeMarker","TypeSystemContext"],"returnType":"TypeConstructorMarker"},50,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"newValue","parameters":["KtElement"],"returnType":"PseudoValue"},101,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.PopBackwardPropagationTransformer$Transformer$HazardsTrackingInterpreter","methodName":"unaryOperation","parameters":["AbstractInsnNode","SourceValue"],"returnType":"SourceValue"},113,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher","methodName":"visitReturnExpression","parameters":["KtReturnExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},100,{"pathToFun":"org.jetbrains.kotlin.codegen.InnerClassConsumer$Companion","methodName":"classForInnerClassRecord","parameters":["ClassDescriptor","Boolean"],"returnType":"ClassDescriptor"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.MutableClosure","methodName":"getCaptureVariables","parameters":[""],"returnType":"Map"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.FunctionDescriptorResolver","methodName":"getReceiverType","parameters":["KotlinType"],"returnType":"KotlinType"},95,{"pathToFun":"org.jetbrains.kotlin.codegen.SyntheticClassDescriptorForLambda","methodName":"isCallableReference","parameters":[""],"returnType":"Boolean"},109,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.KotlinResolutionCallbacksImpl","methodName":"getLastDeparentesizedExpression","parameters":["PSIKotlinCallArgument"],"returnType":"KtExpression"},92,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.instructions.jumps.ReturnValueInstruction","methodName":"accept","parameters":["InstructionVisitor"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getCompanionObjectDescriptor","parameters":[""],"returnType":"ClassDescriptorWithResolutionScopes"},112,{"pathToFun":"org.jetbrains.kotlin.descriptors.annotations.CompositeAnnotations","methodName":"isEmpty","parameters":[""],"returnType":"Any"},95,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.PseudocodeUtil","methodName":"isThisOrNoDispatchReceiver","parameters":["AccessValueInstruction","BindingContext"],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker\\$CallImpl","methodName":"getValueArgumentList","parameters":[""],"returnType":"KtValueArgumentList"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.AnnotationUseSiteTargetChecker","methodName":"checkAsTopLevelTypeReference","parameters":["BindingTrace","KtTypeReference","LanguageVersionSettings","Boolean"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CompletionModeCalculator$CalculatorForNestedCall","methodName":"processTypeWithoutParameters","parameters":["CsCompleterContext","KotlinTypeMarker","TypeVariance","MutableSet"],"returnType":"Unit"},24,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"generateSyntheticPartsAfterBody","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.lexer.KtSingleValueToken","methodName":"getValue","parameters":[""],"returnType":"String"},113,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.FunctionDescriptorImpl","methodName":"hasSynthesizedParameterNames","parameters":[""],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"computeEnclosingMethod","parameters":["CodegenContext"],"returnType":"Method"},109,{"pathToFun":"org.jetbrains.kotlin.types.checker.IntersectionTypeKt","methodName":"intersectTypes","parameters":["List"],"returnType":"Any"},8,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"getImmediateSuperclassNotAny","parameters":["KotlinType"],"returnType":"KotlinType"},111,{"pathToFun":"org.jetbrains.kotlin.types.AbstractTypeCheckerContext","methodName":"clear","parameters":[""],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"generateFunctionsFromAnyForInlineClasses","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector","methodName":"addInitialEqualityConstraint","parameters":["Context","KotlinTypeMarker","KotlinTypeMarker","ConstraintPosition"],"returnType":"Unit"},50,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.NewResolvedCallImpl","methodName":"updateDiagnostics","parameters":["Collection"],"returnType":"Unit"},92,{"pathToFun":"org.jetbrains.kotlin.psi.KtDotQualifiedExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.SyntheticScope$Default","methodName":"getSyntheticMemberFunctions","parameters":["Collection","Name","LookupLocation"],"returnType":"Collection"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.declarations.AbstractPsiBasedDeclarationProvider","methodName":"getDeclarations","parameters":["DescriptorKindFilter","(Name) -> Boolean"],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.BindingContextUtils","methodName":"getContainingFunctionSkipFunctionLiterals","parameters":["DeclarationDescriptor","boolean"],"returnType":"Pair"},100,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"isTypeAliasParameter","parameters":["ClassifierDescriptor"],"returnType":"Boolean"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"resolveMemberHeaders","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.types.AbstractTypeChecker","methodName":"equalTypes","parameters":["TypeCheckerProviderContext","KotlinTypeMarker","KotlinTypeMarker","Boolean"],"returnType":"Boolean"},14,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseFunctionLiteral","parameters":["boolean","boolean"],"returnType":"void"},96,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.TypeVariableDependencyInformationProvider","methodName":"computeRelatedToTopLevelType","parameters":[""],"returnType":"Unit"},50,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.BothSignatureWriter","methodName":"writeTypeVariable","parameters":["Name","Type"],"returnType":"void"},57,{"pathToFun":"org.jetbrains.kotlin.codegen.CallReceiver","methodName":"calcDispatchReceiver","parameters":["T","boolean","T","T"],"returnType":"T"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.ClassResolutionScopesSupport","methodName":"scopeWithGenerics","parameters":["LexicalScope"],"returnType":"LexicalScopeImpl"},112,{"pathToFun":"org.jetbrains.kotlin.util.MappedExtensionProvider","methodName":"get","parameters":[""],"returnType":"R"},41,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.LocalVariableDescriptor","methodName":"isLateInit","parameters":[""],"returnType":"boolean"},76,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintIncorporator","methodName":"otherInsideMyConstraint","parameters":["Context","TypeVariableMarker","Constraint"],"returnType":"Unit"},55,{"pathToFun":"org.jetbrains.kotlin.psi.KtLambdaExpression","methodName":"getValueParameters","parameters":[""],"returnType":"List"},95,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitTypeProjection","parameters":["KtTypeProjection","Void"],"returnType":"Void"},51,{"pathToFun":"org.jetbrains.kotlin.types.IntersectionTypeConstructor","methodName":"getBuiltIns","parameters":[""],"returnType":"KotlinBuiltIns"},6,{"pathToFun":"org.jetbrains.kotlin.types.SpecialTypesKt","methodName":"makeSimpleTypeDefinitelyNotNullOrNotNull","parameters":["SimpleType"],"returnType":"SimpleType"},12,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.BothSignatureWriter","methodName":"writeInterfaceEnd","parameters":[""],"returnType":"void"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getModality","parameters":[""],"returnType":"Modality"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.InterfaceImplBodyCodegen","methodName":"generateKotlinMetadataAnnotation","parameters":[""],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.codegen.ClassBodyCodegen","methodName":"generateBridges","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.NewResolutionOldInferenceKt","methodName":"transformToReceiverWithSmartCastInfo","parameters":["ResolutionContext","ReceiverValue"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.ExposedVisibilityChecker","methodName":"checkSupertypes","parameters":["KtClassOrObject","ClassDescriptor"],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.fakeDescriptorsForReferencesKt","methodName":"approximate","parameters":["TypeApproximator","UnwrappedType","Boolean"],"returnType":"KotlinType"},108,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.ClassicTypeSystemContextForCS","methodName":"freshTypeConstructor","parameters":["TypeVariableMarker"],"returnType":"TypeConstructorMarker"},55,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"nondeterministicJump","parameters":["Label","KtElement","PseudoValue"],"returnType":"Unit"},100,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.MutableClassDescriptor","methodName":"getUnsubstitutedMemberScope","parameters":["KotlinTypeRefiner"],"returnType":"MemberScope"},109,{"pathToFun":"org.jetbrains.kotlin.codegen.VariableAsmNameManglingUtilsKt","methodName":"getNameForDestructuredParameterOrNull","parameters":["ValueParameterDescriptor"],"returnType":"String"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalScopeStorage","methodName":"plus","parameters":["IntList?","Int"],"returnType":"Any"},109,{"pathToFun":"org.jetbrains.kotlin.types.TypeUtils","methodName":"makeNullableIfNeeded","parameters":["SimpleType","boolean"],"returnType":"SimpleType"},10,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseFunctionParameterRest","parameters":["boolean"],"returnType":"boolean"},105,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"isPrimitiveNumberType","parameters":["KotlinType"],"returnType":"Boolean"},36,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.TypeVariableDependencyInformationProvider","methodName":"isVariableRelatedToTopLevelType","parameters":["TypeConstructorMarker"],"returnType":"Any"},50,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CollectionTypeVariableUsagesInfo","methodName":"getDependingOnTypeParameter","parameters":["NewConstraintSystem","TypeConstructor"],"returnType":"Any"},54,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"lookupConstructorExpressionsInClosureIfPresent","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.DelegatingClassBuilder","methodName":"newField","parameters":["JvmDeclarationOrigin","int","String","String","String","Object"],"returnType":"FieldVisitor"},111,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseTypeRef","parameters":[""],"returnType":"void"},113,{"pathToFun":"org.jetbrains.kotlin.psi.KtQualifiedExpression","methodName":"getExpression","parameters":["KtQualifiedExpression","Boolean"],"returnType":"KtExpression"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.CallReceiver","methodName":"putSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"void"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.OverridingUtil","methodName":"filterOutOverridden","parameters":["Set"],"returnType":"Set"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.VarianceCheckerCore","methodName":"checkTypeParameters","parameters":["KtTypeParameterListOwner","BindingContext","Variance"],"returnType":"Boolean"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"getContributedVariables","parameters":["Name","LookupLocation"],"returnType":"Collection"},100,{"pathToFun":"org.jetbrains.kotlin.types.typesApproximation.CapturedTypeApproximationKt","methodName":"approximateCapturedTypesIfNecessary","parameters":["TypeProjection","Boolean"],"returnType":"TypeProjection"},112,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parsePropertyDelegateOrAssignment","parameters":[""],"returnType":"boolean"},89,{"pathToFun":"org.jetbrains.kotlin.types.expressions.FunctionsTypingVisitor","methodName":"checkTypesForReturnStatements","parameters":["KtDeclarationWithBody","BindingTrace","KotlinType"],"returnType":"Unit"},46,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"createLambda","parameters":["KtFunction"],"returnType":"InstructionWithValue"},95,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CollectionTypeVariableUsagesInfo","methodName":"getTypeParameterByVariable","parameters":["NewConstraintSystem","TypeConstructorMarker"],"returnType":"Any"},54,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher","methodName":"visitLambdaExpression","parameters":["KtLambdaExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},95,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallExpressionResolver","methodName":"elementChain","parameters":["KtQualifiedExpression","ExpressionTypingContext"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.ClosureCodegen","methodName":"fieldListToTypeArray","parameters":["List"],"returnType":"Type[]"},108,{"pathToFun":"org.jetbrains.kotlin.types.DisjointKeysUnionTypeSubstitution","methodName":"prepareTopLevelType","parameters":["KotlinType","Variance"],"returnType":"Any"},53,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"initializeLocalVariable","parameters":["KtVariableDeclaration","StackValue"],"returnType":"void"},72,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.instructions.special.LocalFunctionDeclarationInstruction","methodName":"accept","parameters":["InstructionVisitor"],"returnType":"Unit"},94,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"createLambda","parameters":["KtFunction"],"returnType":"Any"},95,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"supertypes","parameters":["TypeConstructorMarker"],"returnType":"Collection"},83,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkSupertypesForConsistency","parameters":["ClassifierDescriptor","PsiElement"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.psi.psiUtil.ReservedCheckingKt","methodName":"checkReservedYield","parameters":["KtSimpleNameExpression","DiagnosticSink"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.VarianceCheckerCore","methodName":"checkTypePosition","parameters":["KtTypeReference","BindingContext","Variance"],"returnType":"Any"},35,{"pathToFun":"org.jetbrains.kotlin.psi.KtUserType","methodName":"getTypeArguments","parameters":[""],"returnType":"List"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.data.KtClassOrObjectInfo","methodName":"getDanglingAnnotations","parameters":[""],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.types.AbstractTypeChecker","methodName":"isSubtypeForSameConstructor","parameters":["AbstractTypeCheckerContext","TypeArgumentListMarker","SimpleTypeMarker"],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtLambdaExpression","methodName":"getBodyExpression","parameters":[""],"returnType":"KtBlockExpression"},92,{"pathToFun":"org.jetbrains.kotlin.psi.KtUserType","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},113,{"pathToFun":"org.jetbrains.kotlin.psi.KtProperty","methodName":"getValueParameterList","parameters":[""],"returnType":"KtParameterList"},81,{"pathToFun":"org.jetbrains.kotlin.psi.KtFunctionNotStubbed","methodName":"getReceiverTypeReference","parameters":[""],"returnType":"KtTypeReference"},95,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.VariableControlFlowState","methodName":"definitelyInitialized","parameters":[""],"returnType":"Boolean"},110,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.PostponedArgumentsAnalyzer","methodName":"receiver","parameters":["UnwrappedType?"],"returnType":"UnwrappedType"},92,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"genParamAssertion","parameters":["InstructionAdapter","GenerationState","FrameMap","ParameterDescriptor","String","FunctionDescriptor"],"returnType":"void"},106,{"pathToFun":"org.jetbrains.kotlin.diagnostics.AbstractDiagnostic","methodName":"isValid","parameters":[""],"returnType":"boolean"},40,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"checkHasOuterClassInstance","parameters":["LexicalScope","BindingTrace","PsiElement","ClassDescriptor"],"returnType":"boolean"},52,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext","methodName":"addPossibleNewConstraint","parameters":["TypeVariableMarker","Constraint"],"returnType":"Unit"},55,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.DefaultErrorMessages","methodName":"render","parameters":["Diagnostic"],"returnType":"String"},40,{"pathToFun":"org.jetbrains.kotlin.codegen.InterfaceImplBodyCodegen$InterfaceImplClassBuilder","methodName":"getDelegate","parameters":[""],"returnType":"Any"},110,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"isData","parameters":[""],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeProjection","methodName":"getTypeReference","parameters":[""],"returnType":"KtTypeReference"},51,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.MemberScopeTowerLevel","methodName":"collectMembers","parameters":["ResolutionScope.(KotlinType"],"returnType":"Collection"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.ClosureCodegen","methodName":"done","parameters":[""],"returnType":"void"},108,{"pathToFun":"org.jetbrains.kotlin.types.DisjointKeysUnionTypeSubstitution","methodName":"approximateCapturedTypes","parameters":[""],"returnType":"Any"},53,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineCodegenForLambda$Companion","methodName":"create","parameters":["ExpressionCodegen","FunctionDescriptor","KtElement","ClassBuilder"],"returnType":"ClosureCodegen"},108,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitTypeParameter","parameters":["KtTypeParameter","Void"],"returnType":"Void"},53,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor\\$LazyClassTypeConstructor","methodName":"computeSupertypes","parameters":[""],"returnType":"Collection"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiUtil","methodName":"isRemovableVariableDeclaration","parameters":["KtDeclaration"],"returnType":"boolean"},70,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.SyntheticScope$Default","methodName":"getSyntheticConstructors","parameters":["ClassifierDescriptor","LookupLocation"],"returnType":"Collection"},83,{"pathToFun":"org.jetbrains.kotlin.types.TypeUtils","methodName":"canHaveSubtypes","parameters":["KotlinTypeChecker","KotlinType"],"returnType":"boolean"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.typeBinding.TypeBindingKt","methodName":"createTypeBinding","parameters":["KtTypeReference","BindingContext"],"returnType":"TypeBinding"},35,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.TypeVariableDependencyInformationProvider","methodName":"isVariableRelatedToAnyOutputType","parameters":["TypeConstructorMarker"],"returnType":"Any"},50,{"pathToFun":"org.jetbrains.kotlin.util.declarationUtilKt","methodName":"findImplementationFromInterface","parameters":["CallableMemberDescriptor"],"returnType":"CallableMemberDescriptor"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper$Companion","methodName":"writeVoidReturn","parameters":["JvmSignatureWriter"],"returnType":"Unit"},63,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallExpressionResolver","methodName":"resolveSimpleName","parameters":["ExpressionTypingContext","KtSimpleNameExpression","TemporaryTraceAndCache"],"returnType":"OverloadResolutionResults"},100,{"pathToFun":"org.jetbrains.kotlin.resolve.sam.SamConversionResolverImplKt","methodName":"getAbstractMembers","parameters":["ClassDescriptor"],"returnType":"List"},111,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContextKt","methodName":"convertVariance","parameters":["TypeVariance"],"returnType":"Variance"},84,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitUserType","parameters":["KtUserType","Void"],"returnType":"Void"},113,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"createUnboundLabel","parameters":["String"],"returnType":"Label"},108,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitLambdaExpression","parameters":["KtLambdaExpression"],"returnType":"void"},95,{"pathToFun":"org.jetbrains.kotlin.util.declarationUtilKt","methodName":"getNonPrivateTraitMembersForDelegation","parameters":["ClassDescriptor","Boolean"],"returnType":"Map"},53,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitExpressionWithLabel","parameters":["KtExpressionWithLabel","D"],"returnType":"R"},100,{"pathToFun":"org.jetbrains.kotlin.resolve.inline.InlineUtil","methodName":"checkNonLocalReturnUsage","parameters":["DeclarationDescriptor","DeclarationDescriptor","PsiElement","BindingContext"],"returnType":"boolean"},100,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitParameter","parameters":["KtParameter"],"returnType":"void"},105,{"pathToFun":"org.jetbrains.kotlin.psi.KtSuperTypeEntry","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},37,{"pathToFun":"org.jetbrains.kotlin.resolve.FunctionDescriptorResolver","methodName":"createConstructorDescriptor","parameters":["LexicalScope","ClassDescriptor","Boolean","KtModifierList","KtPureElement","List","BindingTrace"],"returnType":"ClassConstructorDescriptorImpl"},49,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"getTypeParameterClassifier","parameters":["TypeConstructorMarker"],"returnType":"TypeParameterMarker"},73,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper$Companion","methodName":"getVarianceForWildcard","parameters":["TypeSystemCommonBackendContext","TypeParameterMarker","TypeArgumentMarker","TypeMappingMode"],"returnType":"Variance"},84,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.context.BasicCallResolutionContext","methodName":"create","parameters":["ResolutionContext","Call","CheckArgumentTypesMode"],"returnType":"BasicCallResolutionContext"},112,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher","methodName":"visitSimpleNameExpression","parameters":["KtSimpleNameExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},111,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiUtil","methodName":"visitChildren","parameters":["KtElement","KtVisitor","D"],"returnType":"void"},106,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitClassOrObject","parameters":["KtClassOrObject","D"],"returnType":"R"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.PostponedArgumentsAnalyzer","methodName":"analyze","parameters":["Context","KotlinResolutionCallbacks","ResolvedAtom","KotlinDiagnosticsHolder"],"returnType":"Unit"},92,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.callUtil.callUtilKt","methodName":"getParameterForArgument","parameters":["ResolvedCall","ValueArgument"],"returnType":"ValueParameterDescriptor"},80,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"upperBoundCount","parameters":["TypeParameterMarker"],"returnType":"Int"},59,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"recoverOnParenthesizedWordForPlatformTypes","parameters":["int","String","boolean"],"returnType":"boolean"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"createOrGetClInitCodegen","parameters":[""],"returnType":"ExpressionCodegen"},90,{"pathToFun":"org.jetbrains.kotlin.codegen.serialization.JvmSerializerExtension","methodName":"writeVersionRequirementForJvmDefaultIfNeeded","parameters":["ClassDescriptor","ProtoBuf.Class.Builder","MutableVersionRequirementTable"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtFunctionNotStubbed","methodName":"hasDeclaredReturnType","parameters":[""],"returnType":"boolean"},95,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"isLValue","parameters":["KtSimpleNameExpression","PsiElement"],"returnType":"boolean"},99,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"getNonDeclaredFunctions","parameters":["Name","MutableSet"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.MutableClosure","methodName":"getRecordedFields","parameters":[""],"returnType":"List"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.TypeResolver","methodName":"getAllModifierLists","parameters":["KtElementImplStub"],"returnType":"Array"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.diagnostics.KotlinSuppressCache$EmptySuppressor","methodName":"isSuppressed","parameters":["String","Severity"],"returnType":"Boolean"},40,{"pathToFun":"org.jetbrains.kotlin.types.IntersectionTypeConstructor","methodName":"equals","parameters":["Any"],"returnType":"Boolean"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.CompileTimeConstantUtils","methodName":"isArrayFunctionCall","parameters":["ResolvedCall"],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorUtils","methodName":"isOverride","parameters":["CallableMemberDescriptor"],"returnType":"boolean"},10,{"pathToFun":"org.jetbrains.kotlin.diagnostics.DiagnosticFactoryWithPsiElement","methodName":"isValid","parameters":["ParametrizedDiagnostic"],"returnType":"boolean"},40,{"pathToFun":"org.jetbrains.kotlin.codegen.callableReferenceUtilKt","methodName":"generateClosureFieldsInitializationFromParameters","parameters":["InstructionAdapter","CalculatedClosure","List"],"returnType":"Pair"},109,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"genClosureFields","parameters":["CalculatedClosure","ClassBuilder","KotlinTypeMapper","LanguageVersionSettings"],"returnType":"void"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.AbstractOverloadResolutionResults","methodName":"isSuccess","parameters":[""],"returnType":"Any"},109,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.IntegerLiteralTypeConstructor$Companion","methodName":"findIntersectionType","parameters":["Collection"],"returnType":"SimpleType"},10,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.TowerLevelsKt","methodName":"getContributedFunctionsAndIntercept","parameters":["ResolutionScope","Name","LookupLocation","ReceiverValueWithSmartCastInfo","ReceiverValueWithSmartCastInfo","ImplicitScopeTower"],"returnType":"Collection"},111,{"pathToFun":"org.jetbrains.kotlin.types.expressions.FunctionsTypingVisitor","methodName":"computeUnsafeReturnType","parameters":["KtLambdaExpression","ExpressionTypingContext","SimpleFunctionDescriptorImpl","KotlinType"],"returnType":"KotlinType"},95,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"mapTypeAsDeclaration","parameters":["KotlinType"],"returnType":"Type"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.TypeResolver","methodName":"resolveType","parameters":["LexicalScope","KtTypeReference","BindingTrace","Boolean"],"returnType":"KotlinType"},113,{"pathToFun":"org.jetbrains.kotlin.types.WrappedTypeFactory","methodName":"createDeferredType","parameters":["BindingTrace","() -> KotlinType"],"returnType":"KotlinType"},53,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing\\$ModifierDetector","methodName":"consume","parameters":["IElementType"],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtParameter","methodName":"getDefaultValue","parameters":[""],"returnType":"KtExpression"},105,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"lookupLocalIndex","parameters":["DeclarationDescriptor"],"returnType":"int"},109,{"pathToFun":"org.jetbrains.kotlin.resolve.QualifiedExpressionResolver","methodName":"mapToQualifierParts","parameters":["List","Int"],"returnType":"List"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.ClassBodyCodegen","methodName":"shouldGenerateNonClassMembers","parameters":[""],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.BothSignatureWriter","methodName":"writeInterface","parameters":[""],"returnType":"void"},113,{"pathToFun":"org.jetbrains.kotlin.psi.psiUtil.psiUtilsKt","methodName":"hasActualModifier","parameters":["KtModifierList"],"returnType":"Any"},110,{"pathToFun":"org.jetbrains.kotlin.types.checker.TypeIntersector","methodName":"intersectTypesWithoutIntersectionType","parameters":["Set"],"returnType":"SimpleType"},11,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getSealedSubclasses","parameters":[""],"returnType":"Collection"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxingInterpreter","methodName":"unaryOperation","parameters":["AbstractInsnNode","BasicValue"],"returnType":"BasicValue"},113,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitProperty","parameters":["KtProperty","D"],"returnType":"R"},81,{"pathToFun":"org.jetbrains.kotlin.psi.KtFunctionNotStubbed","methodName":"getValueParameters","parameters":[""],"returnType":"List"},95,{"pathToFun":"org.jetbrains.kotlin.types.TypeSubstitutor","methodName":"create","parameters":["KotlinType"],"returnType":"TypeSubstitutor"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.IdentifierInfo$Variable","methodName":"hashCode","parameters":[""],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap","methodName":"checkMutability","parameters":[""],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitFunction","parameters":["KtFunction","InvocationKind"],"returnType":"Unit"},96,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.DiagnosticWithParameters1Renderer","methodName":"renderParameters","parameters":["DiagnosticWithParameters1"],"returnType":"Array"},25,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"resolveSuperTypeListEntries","parameters":["LexicalScope","List","TypeResolver","BindingTrace","boolean"],"returnType":"Collection"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtReturnExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},100,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.ArgumentsToParametersMapper$CallArgumentProcessor","methodName":"processExternalArgument","parameters":["KotlinCallArgument"],"returnType":"Unit"},91,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"intersectTypes","parameters":["List"],"returnType":"SimpleTypeMarker"},8,{"pathToFun":"org.jetbrains.kotlin.resolve.TypeResolver","methodName":"appendDefaultArgumentsForLocalClassifier","parameters":["Int","List"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.state.GenerationState$GenerateClassFilter","methodName":"shouldGenerateClassMembers","parameters":["KtClassOrObject"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.parsing.AbstractKotlinParsing","methodName":"consumeIf","parameters":["KtToken"],"returnType":"boolean"},94,{"pathToFun":"org.jetbrains.kotlin.codegen.InterfaceImplBodyCodegen","methodName":"generateSyntheticPartsAfterBody","parameters":[""],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowInformationProvider","methodName":"report","parameters":["Diagnostic","VariableContext"],"returnType":"Unit"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"generateFunctionsFromAnyForInlineClass","parameters":["MutableCollection","Name","List"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver$CollectErrorInformationForInheritedMembersStrategy","methodName":"doReportErrors","parameters":[""],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.ValueParameterDescriptorImpl","methodName":"getVisibility","parameters":[""],"returnType":"Any"},104,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getScopeForMemberDeclarationResolution","parameters":[""],"returnType":"LexicalScope"},112,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"createSyntheticValue","parameters":["KtElement","MagicKind","KtElement"],"returnType":"PseudoValue"},107,{"pathToFun":"org.jetbrains.kotlin.codegen.context.ConstructorContext","methodName":"setThisInitialized","parameters":["boolean"],"returnType":"void"},53,{"pathToFun":"org.jetbrains.kotlin.resolve.VarianceCheckerCore","methodName":"checkClassHeader","parameters":["KtClass"],"returnType":"Boolean"},111,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"isNullableType","parameters":["KotlinTypeMarker"],"returnType":"Boolean"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.NewCallArgumentsKt","methodName":"resolveParametersTypes","parameters":["BasicCallResolutionContext","KtFunction","TypeResolver"],"returnType":"Array"},92,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"runWithShouldMarkLineNumbers","parameters":["boolean","Supplier"],"returnType":"T"},100,{"pathToFun":"org.jetbrains.kotlin.types.AbstractTypeCheckerContext$SupertypesPolicy$LowerIfFlexible","methodName":"transformType","parameters":["AbstractTypeCheckerContext","KotlinTypeMarker"],"returnType":"Any"},78,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.PostponedArgumentsAnalyzer","methodName":"applyResultsOfAnalyzedLambdaToCandidateSystem","parameters":["Context","ResolvedLambdaAtom","ReturnArgumentsAnalysisResult","KotlinDiagnosticsHolder","(KotlinType) -> UnwrappedType"],"returnType":"Unit"},92,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"genClassOrObject","parameters":["CodegenContext","KtClassOrObject","GenerationState","MemberCodegen"],"returnType":"void"},111,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitReturnExpression","parameters":["KtReturnExpression","D"],"returnType":"R"},100,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.MaxStackFrameSizeAndLocalsCalculator","methodName":"visitTypeInsn","parameters":["int","String"],"returnType":"void"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.ClosureCodegen","methodName":"generateConstructor","parameters":[""],"returnType":"Method"},108,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseValueParameter","parameters":["boolean"],"returnType":"void"},105,{"pathToFun":"org.jetbrains.kotlin.resolve.BindingContextUtils","methodName":"variableDescriptorForDeclaration","parameters":["DeclarationDescriptor"],"returnType":"VariableDescriptor"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalWritableScope","methodName":"addVariableDescriptor","parameters":["VariableDescriptor"],"returnType":"Unit"},109,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationResolver","methodName":"getTopLevelDescriptorsByFqName","parameters":["TopLevelDescriptorProvider","FqName","LookupLocation"],"returnType":"Set"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorUtils","methodName":"isClassOrEnumClass","parameters":["DeclarationDescriptor"],"returnType":"boolean"},113,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.ValueParameterDescriptorImpl","methodName":"getCompileTimeInitializer","parameters":[""],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"forceBoxedReturnType","parameters":["FunctionDescriptor"],"returnType":"Boolean"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper$Companion","methodName":"findBaseDeclaration","parameters":["FunctionDescriptor"],"returnType":"FunctionDescriptor"},112,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractTypeParameterDescriptor\\$TypeParameterTypeConstructor","methodName":"getParameters","parameters":[""],"returnType":"List"},88,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"getNonDeclaredProperties","parameters":["Name","MutableSet"],"returnType":"Unit"},100,{"pathToFun":"org.jetbrains.kotlin.codegen.JvmCodegenUtil","methodName":"isConst","parameters":["CalculatedClosure"],"returnType":"boolean"},109,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.TowerLevelsKt","methodName":"getFakeDescriptorForObject","parameters":["ClassifierDescriptor"],"returnType":"FakeCallableDescriptorForObject"},89,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.declarations.AbstractPsiBasedDeclarationProvider","methodName":"getDestructuringDeclarationsEntries","parameters":["Name"],"returnType":"Collection"},113,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.VariableDescriptorWithInitializerImpl","methodName":"setCompileTimeInitializer","parameters":["NullableLazyValue"],"returnType":"void"},58,{"pathToFun":"org.jetbrains.kotlin.codegen.DelegationFieldsInfo","methodName":"getDelegationFieldsInfo","parameters":["List"],"returnType":"DelegationFieldsInfo"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.CallableMethod","methodName":"getAsmMethod","parameters":[""],"returnType":"Method"},113,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"declareVariable","parameters":["KtVariableDeclaration"],"returnType":"Unit"},81,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"correctContainerForLambda","parameters":["CallableDescriptor"],"returnType":"DeclarationDescriptor"},109,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"supertypes","parameters":["KotlinType"],"returnType":"Collection"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.IntegerLiteralTypeConstructor$Companion","methodName":"findCommonSuperType","parameters":["Collection"],"returnType":"SimpleType"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.CallGenerator$DefaultCallGenerator","methodName":"genCallInner","parameters":["Callable","ResolvedCall","Boolean","ExpressionCodegen"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getDescriptorsForExtraCompanionObjects","parameters":[""],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.BodyResolver","methodName":"resolveConstructorPropertyDescriptors","parameters":["KtClassOrObject"],"returnType":"void"},53,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"createUnboundLabel","parameters":["String"],"returnType":"Label"},108,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"initDefaultSourceMappingIfNeeded","parameters":[""],"returnType":"void"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.ClassBodyCodegen","methodName":"classForInnerClassRecord","parameters":[""],"returnType":"ClassDescriptor"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.KotlinConstraintSystemCompleter","methodName":"fixVariablesOrReportNotEnoughInformation","parameters":["Context","ConstraintSystemCompletionMode","List","UnwrappedType","Boolean","List","KotlinDiagnosticsHolder"],"returnType":"Boolean"},46,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper$Companion","methodName":"isNonConstProperty","parameters":["CallableMemberDescriptor"],"returnType":"Boolean"},93,{"pathToFun":"org.jetbrains.kotlin.resolve.QualifiedExpressionResolverKt","methodName":"isVisible","parameters":["DeclarationDescriptor","DeclarationDescriptor","QualifierPosition"],"returnType":"Boolean"},113,{"pathToFun":"org.jetbrains.kotlin.diagnostics.AbstractDiagnostic","methodName":"getTextRanges","parameters":[""],"returnType":"List"},40,{"pathToFun":"org.jetbrains.kotlin.codegen.context.ClosureContext","methodName":"getFunctionDescriptor","parameters":[""],"returnType":"FunctionDescriptor"},108,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext","methodName":"addNewIncorporatedConstraint","parameters":["TypeVariableMarker","KotlinTypeMarker","ConstraintContext"],"returnType":"Unit"},55,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"writeOuterClassAndEnclosingMethod","parameters":[""],"returnType":"void"},109,{"pathToFun":"org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt","methodName":"overriddenTreeUniqueAsSequence","parameters":["D","Boolean"],"returnType":"Sequence"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtClass","methodName":"getFunKeyword","parameters":[""],"returnType":"PsiElement"},108,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.data.KtClassInfo","methodName":"getTypeParameterList","parameters":[""],"returnType":"KtTypeParameterList"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.checkers.MissingDependencyClassChecker$ClassifierUsage","methodName":"check","parameters":["ClassifierDescriptor","PsiElement","ClassifierUsageCheckerContext"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.NewCommonSuperTypeCalculator","methodName":"isStubRelatedType","parameters":["TypeSystemCommonSuperTypesContext","SimpleTypeMarker"],"returnType":"Boolean"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.ReifiedTypeParameterSubstitutionChecker","methodName":"isTypeParameterOfKotlinArray","parameters":["TypeParameterDescriptor"],"returnType":"boolean"},47,{"pathToFun":"org.jetbrains.kotlin.types.typesApproximation.CapturedTypeApproximationKt","methodName":"toTypeProjection","parameters":["TypeArgument"],"returnType":"TypeProjection"},14,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper$Companion","methodName":"writeFormalTypeParameter","parameters":["TypeSystemCommonBackendContext","TypeParameterMarker","JvmSignatureWriter","(KotlinTypeMarker, TypeMappingMode) -> Type"],"returnType":"Unit"},59,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"declareParameter","parameters":["KtParameter"],"returnType":"Unit"},105,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorEquivalenceForOverrides","methodName":"areCallableDescriptorsEquivalent","parameters":["CallableDescriptor","CallableDescriptor","Boolean","Boolean","Boolean"],"returnType":"Boolean"},57,{"pathToFun":"org.jetbrains.kotlin.resolve.VariableTypeAndInitializerResolver","methodName":"setConstantForVariableIfNeeded","parameters":["VariableDescriptorWithInitializerImpl","LexicalScope","KtVariableDeclaration","DataFlowInfo","KotlinType","InferenceSession","BindingTrace"],"returnType":"Unit"},81,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"recordSamTypeOnArgumentExpression","parameters":["SamType","ValueArgument"],"returnType":"void"},87,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkConstructorInInterface","parameters":["KtClass"],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingServices","methodName":"getTypeInfo","parameters":["LexicalScope","KtExpression","KotlinType","DataFlowInfo","InferenceSession","BindingTrace","boolean"],"returnType":"KotlinTypeInfo"},77,{"pathToFun":"org.jetbrains.kotlin.resolve.VariableTypeAndInitializerResolver","methodName":"resolveInitializerType","parameters":["LexicalScope","KtExpression","DataFlowInfo","InferenceSession","BindingTrace","Boolean"],"returnType":"KotlinType"},76,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.KotlinResolutionCallbacksImpl","methodName":"analyzeAndGetLambdaReturnArguments","parameters":["LambdaKotlinCallArgument","Boolean","UnwrappedType","List","UnwrappedType","Annotations","Map"],"returnType":"ReturnArgumentsAnalysisResult"},92,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"generateInitializer","parameters":["KtDeclaration","PseudoValue"],"returnType":"Unit"},105,{"pathToFun":"org.jetbrains.kotlin.resolve.BindingContextUtils","methodName":"isBoxedLocalCapturedInClosure","parameters":["BindingContext","DeclarationDescriptor"],"returnType":"boolean"},108,{"pathToFun":"org.jetbrains.kotlin.codegen.serialization.JvmSerializerExtension","methodName":"serializeConstructor","parameters":["ConstructorDescriptor","ProtoBuf.Constructor.Builder","DescriptorSerializer"],"returnType":"Unit"},52,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"addSyntheticFunctions","parameters":["MutableCollection","LookupLocation"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.types.DisjointKeysUnionTypeSubstitution","methodName":"approximateContravariantCapturedTypes","parameters":[""],"returnType":"Any"},53,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"tryParseTypeArgumentList","parameters":["TokenSet"],"returnType":"boolean"},51,{"pathToFun":"org.jetbrains.kotlin.codegen.JvmCodegenUtil","methodName":"isArgumentWhichWillBeInlined","parameters":["BindingContext","DeclarationDescriptor"],"returnType":"boolean"},109,{"pathToFun":"org.jetbrains.kotlin.resolve.OverloadResolver","methodName":"getPossibleRedeclarationGroups","parameters":["Collection"],"returnType":"Collection"},110,{"pathToFun":"org.jetbrains.kotlin.types.IntersectionTypeConstructor","methodName":"getParameters","parameters":[""],"returnType":"List"},6,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitReturnExpression","parameters":["KtReturnExpression","Void"],"returnType":"Void"},100,{"pathToFun":"org.jetbrains.kotlin.resolve.checkers.DeprecatedClassifierUsageChecker","methodName":"check","parameters":["ClassifierDescriptor","PsiElement","ClassifierUsageCheckerContext"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.AsmTypeFactory","methodName":"boxType","parameters":["Type"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtFunctionNotStubbed","methodName":"getValueParameterList","parameters":[""],"returnType":"KtParameterList"},95,{"pathToFun":"org.jetbrains.kotlin.codegen.ConstructorCodegen","methodName":"generateClosureInitialization","parameters":["InstructionAdapter"],"returnType":"void"},53,{"pathToFun":"org.jetbrains.kotlin.codegen.state.GenerationState$GenerateClassFilter$Companion","methodName":"shouldGenerateClass","parameters":["KtClassOrObject"],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtExpressionWithLabel","methodName":"getLabelNameAsName","parameters":[""],"returnType":"Name"},100,{"pathToFun":"org.jetbrains.kotlin.diagnostics.PsiDiagnosticUtils\\$LineAndColumnRange","methodName":"getEnd","parameters":[""],"returnType":"LineAndColumn"},40,{"pathToFun":"org.jetbrains.kotlin.codegen.ConstructorCodegen","methodName":"generateDelegatorToConstructorCall","parameters":["InstructionAdapter","ExpressionCodegen","ClassConstructorDescriptor","ResolvedCall","Type"],"returnType":"void"},53,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext","methodName":"addUpperConstraint","parameters":["TypeConstructorMarker","KotlinTypeMarker"],"returnType":"Any"},55,{"pathToFun":"org.jetbrains.kotlin.types.CommonSupertypes","methodName":"maxDepth","parameters":["Collection"],"returnType":"int"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"recordSamTypeOnArgumentExpression","parameters":["ValueParameterDescriptor","ValueArgument"],"returnType":"void"},87,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"magic","parameters":["KtElement","KtElement","List","MagicKind"],"returnType":"MagicInstruction"},108,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitTypeReference","parameters":["KtTypeReference"],"returnType":"void"},113,{"pathToFun":"org.jetbrains.kotlin.types.model.TypeSystemContext","methodName":"isNothing","parameters":["KotlinTypeMarker"],"returnType":"Any"},88,{"pathToFun":"org.jetbrains.kotlin.types.CommonSupertypes","methodName":"depth","parameters":["KotlinType"],"returnType":"int"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.TypeResolver","methodName":"getScopeForTypeParameter","parameters":["TypeResolutionContext","TypeParameterDescriptor"],"returnType":"MemberScope"},53,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.TypeParameterMappings","methodName":"addParameterMappingToType","parameters":["String","KT","Type","String","Boolean"],"returnType":"Unit"},36,{"pathToFun":"org.jetbrains.kotlin.LambdaExpressionElementType","methodName":"createNode","parameters":["CharSequence"],"returnType":"ASTNode"},95,{"pathToFun":"org.jetbrains.kotlin.util.declarationUtilKt","methodName":"findInterfaceImplementation","parameters":["CallableMemberDescriptor","Boolean"],"returnType":"CallableMemberDescriptor"},63,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"checkConflictingUpperBounds","parameters":["BindingTrace","TypeParameterDescriptor","KtTypeParameter"],"returnType":"void"},53,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DataFlowAnalyzer","methodName":"checkStatementType","parameters":["KtExpression","ResolutionContext"],"returnType":"KotlinType"},81,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"getScopeForMemberDeclarationResolution","parameters":["KtDeclaration"],"returnType":"LexicalScope"},111,{"pathToFun":"org.jetbrains.kotlin.psi.KtLambdaExpression","methodName":"getFunctionLiteral","parameters":[""],"returnType":"KtFunctionLiteral"},95,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.FunctionDescriptorImpl\\$CopyConfiguration","methodName":"setTypeParameters","parameters":["List"],"returnType":"CopyConfiguration"},108,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver$Companion","methodName":"collectOverriddenDeclarations","parameters":["Collection"],"returnType":"MutableMap"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver$Companion","methodName":"shouldReportParameterNameOverrideWarning","parameters":["ValueParameterDescriptor","ValueParameterDescriptor"],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt","methodName":"getAllSuperclassesWithoutAny","parameters":["ClassDescriptor"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeArgumentList","methodName":"getTrailingComma","parameters":[""],"returnType":"PsiElement"},50,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.TypeVariableTypeConstructor","methodName":"getBuiltIns","parameters":[""],"returnType":"Any"},55,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitProperty","parameters":["KtProperty"],"returnType":"void"},81,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"getThisDescriptor","parameters":[""],"returnType":"ClassDescriptor"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker\\$CallImpl","methodName":"getValueArguments","parameters":[""],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.PostponedArgumentsAnalyzer","methodName":"analyzeLambda","parameters":["Context","KotlinResolutionCallbacks","ResolvedLambdaAtom","KotlinDiagnosticsHolder"],"returnType":"ReturnArgumentsAnalysisResult"},92,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitTypeArgumentList","parameters":["KtTypeArgumentList"],"returnType":"void"},51,{"pathToFun":"org.jetbrains.kotlin.resolve.diagnostics.BindingContextSuppressCache","methodName":"getSuppressionAnnotations","parameters":["KtAnnotated"],"returnType":"List"},41,{"pathToFun":"org.jetbrains.kotlin.types.TypeSubstitutor","methodName":"safeSubstitute","parameters":["KotlinType","Variance"],"returnType":"KotlinType"},82,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.StackTransformationUtilsKt","methodName":"top","parameters":["Frame"],"returnType":"V"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitReturnExpression","parameters":["KtReturnExpression"],"returnType":"void"},100,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorUtils","methodName":"collectAllOverriddenDescriptors","parameters":["D","Set"],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.diagnostics.DiagnosticWithParameters1","methodName":"getA","parameters":[""],"returnType":"A"},25,{"pathToFun":"org.jetbrains.kotlin.types.typesApproximation.CapturedTypeApproximationKt","methodName":"toTypeArgument","parameters":["TypeProjection","TypeParameterDescriptor"],"returnType":"Any"},14,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"commonSupertype","parameters":["Collection"],"returnType":"KotlinType"},6,{"pathToFun":"org.jetbrains.kotlin.types.DeferredType","methodName":"createRecursionIntolerant","parameters":["StorageManager","BindingTrace","Function0"],"returnType":"DeferredType"},62,{"pathToFun":"org.jetbrains.kotlin.resolve.PossiblyBareType","methodName":"type","parameters":["KotlinType"],"returnType":"PossiblyBareType"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.data.KtClassOrObjectInfo","methodName":"getScopeAnchor","parameters":[""],"returnType":"PsiElement"},112,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingVisitor","methodName":"isClassInitializer","parameters":["Pair"],"returnType":"boolean"},100,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.context.ResolutionContext","methodName":"getContextParentOfType","parameters":["KtExpression","Class"],"returnType":"T"},100,{"pathToFun":"org.jetbrains.kotlin.types.IntersectionTypeConstructor","methodName":"hashCode","parameters":[""],"returnType":"Int"},6,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseUserType","parameters":[""],"returnType":"void"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver$Companion","methodName":"checkInheritedAndDelegatedSignatures","parameters":["CallableMemberDescriptor","CheckInheritedSignaturesReportStrategy","CheckOverrideReportStrategy"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl","methodName":"containsOnlyFixedOrPostponedVariables","parameters":["KotlinTypeMarker"],"returnType":"Boolean"},67,{"pathToFun":"org.jetbrains.kotlin.psi.KtTreeVisitor","methodName":"visitKtElement","parameters":["KtElement","D"],"returnType":"Void"},107,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.NoArguments","methodName":"process","parameters":["KotlinResolutionCandidate","Int"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isEnum","parameters":["ClassDescriptor"],"returnType":"boolean"},39,{"pathToFun":"org.jetbrains.kotlin.resolve.BodyResolver","methodName":"checkSupertypeList","parameters":["ClassDescriptor","Map","KtClassOrObject"],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"computeOuterClass","parameters":["CodegenContext"],"returnType":"Type"},109,{"pathToFun":"org.jetbrains.kotlin.codegen.writeAnnotationUtilKt","methodName":"writeSyntheticClassMetadata","parameters":["ClassBuilder","GenerationState"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkOpenMembers","parameters":["ClassDescriptorWithResolutionScopes"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.fakeDescriptorsForReferencesKt","methodName":"approximate","parameters":["TypeApproximator","CallableMemberDescriptor","CallableMemberDescriptor.CopyBuilder"],"returnType":"Boolean"},108,{"pathToFun":"org.jetbrains.kotlin.idea.MainFunctionDetector$Companion","methodName":"hasAnnotationWithExactNumberOfArguments","parameters":["KtNamedFunction","Int"],"returnType":"Any"},59,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorEquivalenceForOverrides","methodName":"areClassesEquivalent","parameters":["ClassDescriptor","ClassDescriptor"],"returnType":"Boolean"},45,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.NewCallArgumentsKt","methodName":"resolveType","parameters":["BasicCallResolutionContext","KtTypeReference","TypeResolver"],"returnType":"UnwrappedType"},26,{"pathToFun":"org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt","methodName":"computeSealedSubclasses","parameters":["ClassDescriptor"],"returnType":"Collection"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.checkers.OptionalExpectationUsageChecker","methodName":"check","parameters":["ClassifierDescriptor","PsiElement","ClassifierUsageCheckerContext"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeProjection","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},51,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.ExplicitReceiverScopeTowerProcessor","methodName":"simpleProcess","parameters":["TowerData"],"returnType":"Collection"},111,{"pathToFun":"org.jetbrains.kotlin.storage.LockBasedLazyResolveStorageManager$LockProtectedContext","methodName":"getDiagnostics","parameters":[""],"returnType":"Diagnostics"},49,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CreateFreshVariablesSubstitutor","methodName":"createToFreshVariableSubstitutorAndAddInitialConstraints","parameters":["CallableDescriptor","ConstraintSystemOperation"],"returnType":"FreshVariableNewTypeSubstitutor"},63,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeParameterListOwnerNotStubbed","methodName":"getTypeParameters","parameters":[""],"returnType":"List"},95,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.ResolveSession","methodName":"getDelegationFilter","parameters":[""],"returnType":"DelegationFilter"},111,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"readVariable","parameters":["KtExpression","ResolvedCall","Map"],"returnType":"ReadValueInstruction"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getVariableDescriptorNotNull","parameters":["KtElement"],"returnType":"VariableDescriptor"},72,{"pathToFun":"org.jetbrains.kotlin.psi.KtProperty","methodName":"getAccessors","parameters":[""],"returnType":"List"},81,{"pathToFun":"org.jetbrains.kotlin.types.checker.NewCapturedTypeConstructor","methodName":"getDeclarationDescriptor","parameters":[""],"returnType":"ClassifierDescriptor"},20,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkClass","parameters":["ClassDescriptorWithResolutionScopes","KtClassOrObject"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.builtins.functionTypesKt","methodName":"getReturnTypeFromFunctionType","parameters":["KotlinType"],"returnType":"KotlinType"},110,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorForStatements","methodName":"visitProperty","parameters":["KtProperty","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},72,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorEquivalenceForOverrides","methodName":"ownersEquivalent","parameters":["DeclarationDescriptor","DeclarationDescriptor","(DeclarationDescriptor","Boolean"],"returnType":"Boolean"},46,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.KotlinCallKt","methodName":"checkReceiverInvariants","parameters":["SimpleKotlinCallArgument"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"getPredefinedTypeForClass","parameters":["ClassDescriptor"],"returnType":"Type"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintIncorporator","methodName":"directWithVariable","parameters":["Context","TypeVariableMarker","Constraint"],"returnType":"Unit"},55,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.MemberScopeTowerLevel","methodName":"getFunctions","parameters":["Name","ReceiverValueWithSmartCastInfo"],"returnType":"Collection"},111,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.VariableDescriptorImpl","methodName":"getDispatchReceiverParameter","parameters":[""],"returnType":"ReceiverParameterDescriptor"},108,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.PostponeArgumentsChecksKt","methodName":"preprocessLambdaArgument","parameters":["ConstraintSystemBuilder","LambdaKotlinCallArgument","UnwrappedType","KotlinDiagnosticsHolder","Boolean","TypeVariableForLambdaReturnType"],"returnType":"ResolvedAtom"},92,{"pathToFun":"org.jetbrains.kotlin.LambdaExpressionElementType","methodName":"parseContents","parameters":["ASTNode"],"returnType":"ASTNode"},95,{"pathToFun":"org.jetbrains.kotlin.resolve.VarianceCheckerCore$Companion","methodName":"and","parameters":["Boolean","Boolean"],"returnType":"Any"},64,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getScriptContext","parameters":[""],"returnType":"ScriptContext"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"mapTypeArgument","parameters":["KotlinType","JvmSignatureWriter"],"returnType":"Type"},36,{"pathToFun":"org.jetbrains.kotlin.resolve.ExposedVisibilityChecker","methodName":"checkParameterBounds","parameters":["KtClassOrObject","ClassDescriptor"],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.builtins.functionTypesKt","methodName":"getValueParameterTypesFromFunctionType","parameters":["KotlinType"],"returnType":"List"},108,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CreateFreshVariablesSubstitutor","methodName":"shouldBeFlexible","parameters":["TypeParameterDescriptor"],"returnType":"Boolean"},54,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"nothingType","parameters":[""],"returnType":"SimpleTypeMarker"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.ConstraintKind","methodName":"isUpper","parameters":[""],"returnType":"Boolean"},50,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowInformationProvider","methodName":"processUnusedDeclaration","parameters":["KtNamedDeclaration","VariableDescriptor","VariableUseContext","VariableUseState"],"returnType":"Unit"},109,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.TypeVariableDependencyInformationProvider","methodName":"computeRelatedToAllOutputTypes","parameters":[""],"returnType":"Unit"},50,{"pathToFun":"org.jetbrains.kotlin.contracts.EffectsExtractingVisitor","methodName":"toComputation","parameters":["ReceiverValue"],"returnType":"Computation"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.serialization.JvmSerializerExtension","methodName":"serializeClass","parameters":["ClassDescriptor","ProtoBuf.Class.Builder","MutableVersionRequirementTable","DescriptorSerializer"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtFunctionNotStubbed","methodName":"getTypeReference","parameters":[""],"returnType":"KtTypeReference"},95,{"pathToFun":"org.jetbrains.kotlin.diagnostics.AbstractDiagnostic","methodName":"getPsiElement","parameters":[""],"returnType":"E"},42,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.SyntheticScopesKt","methodName":"collectSyntheticConstructors","parameters":["SyntheticScopes","ClassifierDescriptor","LookupLocation"],"returnType":"Any"},83,{"pathToFun":"org.jetbrains.kotlin.types.DisjointKeysUnionTypeSubstitution","methodName":"get","parameters":["KotlinType"],"returnType":"Any"},53,{"pathToFun":"org.jetbrains.kotlin.codegen.DefaultParameterValueSubstitutor","methodName":"generatePrimaryConstructorOverloadsIfNeeded","parameters":["ConstructorDescriptor","ClassBuilder","MemberCodegen","OwnerKind","KtPureClassOrObject"],"returnType":"Unit"},53,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"nondeterministicJump","parameters":["Label","KtElement","PseudoValue"],"returnType":"Unit"},100,{"pathToFun":"org.jetbrains.kotlin.codegen.ClosureCodegen","methodName":"generateBridgesForSAM","parameters":["FunctionDescriptor","FunctionDescriptor","FunctionCodegen"],"returnType":"void"},110,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.VariableFixationFinder","methodName":"getTypeVariableReadiness","parameters":["Context","TypeConstructorMarker","TypeVariableDependencyInformationProvider"],"returnType":"TypeVariableFixationReadiness"},50,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitDotQualifiedExpression","parameters":["KtDotQualifiedExpression"],"returnType":"void"},111,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"readVariable","parameters":["KtExpression","ResolvedCall","Map"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.PseudocodeLabel","methodName":"resolveToInstruction","parameters":[""],"returnType":"Instruction"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.sam.SamConversionResolverImplKt","methodName":"getFunctionTypeForSamType","parameters":["SimpleType","SamConversionResolver","SamConversionOracle"],"returnType":"SimpleType"},111,{"pathToFun":"org.jetbrains.kotlin.descriptors.RelationToType","methodName":"containerRelation","parameters":[""],"returnType":"Any"},52,{"pathToFun":"org.jetbrains.kotlin.types.typesApproximation.CapturedTypeApproximationKt","methodName":"replaceTypeArguments","parameters":["KotlinType","List"],"returnType":"KotlinType"},14,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.ProgressionIteratorBasicValue$Companion","methodName":"byProgressionClassType","parameters":["Type"],"returnType":"ProgressionIteratorBasicValue"},112,{"pathToFun":"org.jetbrains.kotlin.types.expressions.FunctionsTypingVisitor","methodName":"isBuiltinFunctionalType","parameters":["KotlinType"],"returnType":"Any"},95,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getTypeConstructor","parameters":[""],"returnType":"TypeConstructor"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.MutableVariableWithConstraints","methodName":"addConstraint","parameters":["Constraint"],"returnType":"Constraint"},55,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.NewCommonSuperTypeCalculator","methodName":"commonSuperType","parameters":["TypeSystemCommonSuperTypesContext","List","Int","Boolean"],"returnType":"KotlinTypeMarker"},80,{"pathToFun":"org.jetbrains.kotlin.resolve.LazyTopDownAnalyzer","methodName":"registerTopLevelFqName","parameters":["Multimap","KtNamedDeclaration","DeclarationDescriptor"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.util.collectionUtils.scopeUtilsKt","methodName":"listOfNonEmptyScopes","parameters":["MemberScope"],"returnType":"SmartList"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ResultTypeResolver","methodName":"prepareLowerConstraints","parameters":["Context","List"],"returnType":"List"},39,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.NewCommonSuperTypeCalculator","methodName":"supertypesIfCapturedStarProjection","parameters":["TypeSystemCommonSuperTypesContext","SimpleTypeMarker"],"returnType":"Collection"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.BothSignatureWriter","methodName":"writeInterfaceBound","parameters":[""],"returnType":"void"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.NewCommonSuperTypeCalculator","methodName":"checkRecursion","parameters":["TypeSystemCommonSuperTypesContext","List","List","TypeParameterMarker"],"returnType":"Boolean"},8,{"pathToFun":"org.jetbrains.kotlin.resolve.inlineClassesUtilsKt","methodName":"isNullableUnderlyingType","parameters":["KotlinType"],"returnType":"Boolean"},113,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap","methodName":"put","parameters":["DiagnosticFactory2","String","DiagnosticParameterRenderer","DiagnosticParameterRenderer"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"getIterator","parameters":[""],"returnType":"ClassDescriptor"},53,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalScopeStorage","methodName":"getContributedVariables","parameters":["Name","LookupLocation"],"returnType":"Any"},109,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"loadUnit","parameters":["KtExpression"],"returnType":"Unit"},70,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver$Companion","methodName":"createCannotInferVisibilityReporter","parameters":["BindingTrace"],"returnType":"Function1"},112,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap","methodName":"put","parameters":["DiagnosticFactory0","String"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtClassOrObject","methodName":"isTopLevel","parameters":[""],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParser","methodName":"parseLambdaExpression","parameters":["PsiBuilder"],"returnType":"ASTNode"},95,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl","methodName":"bindingStubsForPostponedVariables","parameters":[""],"returnType":"Map"},92,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.ReceiverParameterDescriptorImpl","methodName":"getContainingDeclaration","parameters":[""],"returnType":"DeclarationDescriptor"},70,{"pathToFun":"org.jetbrains.kotlin.psi.KtNamedDeclarationStub","methodName":"getFqName","parameters":[""],"returnType":"FqName"},111,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiUtil","methodName":"getParentCallIfPresent","parameters":["KtExpression"],"returnType":"KtExpression"},96,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl","methodName":"asPostponedArgumentsAnalyzerContext","parameters":[""],"returnType":"Any"},92,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"returnCrossesTryCatchBoundary","parameters":["KtReturnExpression"],"returnType":"Boolean"},100,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper$Companion","methodName":"writeGenericArguments","parameters":["TypeSystemCommonBackendContext","JvmSignatureWriter","List","List","TypeMappingMode","(KotlinTypeMarker, JvmSignatureWriter, TypeMappingMode) -> Type"],"returnType":"Unit"},84,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.PseudocodeVariablesData","methodName":"isValWithTrivialInitializer","parameters":["KtDeclaration","VariableDescriptor"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.coroutineCodegenUtilKt","methodName":"identifiedChild","parameters":["FqName","String"],"returnType":"Any"},86,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.coroutineCodegenUtilKt","methodName":"isCoroutineSuperClass","parameters":["LanguageVersionSettings","String"],"returnType":"Boolean"},86,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitSuperTypeEntry","parameters":["KtSuperTypeEntry","D"],"returnType":"R"},37,{"pathToFun":"org.jetbrains.kotlin.resolve.ModifiersChecker\\$ModifiersCheckingProcedure","methodName":"checkParameterHasNoValOrVar","parameters":["KtValVarKeywordOwner","DiagnosticFactory1"],"returnType":"void"},104,{"pathToFun":"org.jetbrains.kotlin.psi.KtClassOrObject","methodName":"isLocal","parameters":[""],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.ModifierCheckerCore","methodName":"checkParent","parameters":["BindingTrace","ASTNode","DeclarationDescriptor","LanguageVersionSettings"],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"addSyntheticCompanionObject","parameters":["MutableCollection","LookupLocation"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.util.slicedMap.OpenAddressLinearProbingHashTable","methodName":"rehash","parameters":[""],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"replaceArgumentsWithStarProjections","parameters":["KotlinType"],"returnType":"Any"},43,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"visitParameter","parameters":["KtParameter"],"returnType":"void"},105,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseClass","parameters":["boolean","boolean"],"returnType":"IElementType"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.state.BuilderFactoryForDuplicateSignatureDiagnostics","methodName":"groupMembersDescriptorsBySignature","parameters":["ClassDescriptor"],"returnType":"MultiMap"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"visitClass","parameters":["KtClass"],"returnType":"void"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"findFirstDelegatingSuperCall","parameters":["ConstructorDescriptor"],"returnType":"ResolvedCall"},53,{"pathToFun":"org.jetbrains.kotlin.resolve.NonExpansiveInheritanceRestrictionChecker","methodName":"check","parameters":["KtClass","ClassDescriptor","DiagnosticSink"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.PseudocodeVariablesData$ReadOnlyInitVariableControlFlowInfoImpl","methodName":"getOrNull","parameters":["VariableDescriptor"],"returnType":"VariableControlFlowState"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.FrameMapBase$Mark","methodName":"dropTo","parameters":[""],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.psi.KtSuperTypeListEntry","methodName":"getTypeReference","parameters":[""],"returnType":"KtTypeReference"},37,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.JvmSignatureWriter","methodName":"writeTypeArgument","parameters":["Variance"],"returnType":"void"},84,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalScopeStorage","methodName":"variableOrClassDescriptorByName","parameters":["Name","Int"],"returnType":"DeclarationDescriptor"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"getSyntheticAccessFlagForLambdaClass","parameters":["ClassDescriptor"],"returnType":"int"},110,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.ResolveSession","methodName":"getClassDescriptor","parameters":["KtClassOrObject","LookupLocation"],"returnType":"ClassDescriptor"},111,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"canHaveUndefinedNullability","parameters":["UnwrappedType"],"returnType":"Boolean"},17,{"pathToFun":"org.jetbrains.kotlin.resolve.inline.InlineUtil","methodName":"canBeInlineArgument","parameters":["PsiElement"],"returnType":"boolean"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.diagnostics.KotlinSuppressCache","methodName":"isSuppressed","parameters":["SuppressRequest"],"returnType":"Boolean"},41,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getScopeForClassHeaderResolution","parameters":[""],"returnType":"LexicalScope"},112,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingServices","methodName":"safeGetType","parameters":["LexicalScope","KtExpression","KotlinType","DataFlowInfo","InferenceSession","BindingTrace"],"returnType":"KotlinType"},76,{"pathToFun":"org.jetbrains.kotlin.resolve.VariableTypeAndInitializerResolver","methodName":"resolveTypeNullable","parameters":["VariableDescriptorWithInitializerImpl","LexicalScope","KtVariableDeclaration","DataFlowInfo","InferenceSession","BindingTrace","Boolean"],"returnType":"KotlinType"},81,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.ClassicTypeSystemContextForCS","methodName":"defaultType","parameters":["TypeVariableMarker"],"returnType":"SimpleTypeMarker"},50,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.TypeMappingMode$Companion","methodName":"getModeForReturnTypeNoGeneric","parameters":["Boolean"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.ClosureCodegen","methodName":"generateKotlinMetadataAnnotation","parameters":[""],"returnType":"void"},108,{"pathToFun":"org.jetbrains.kotlin.builtins.functionTypesKt","methodName":"getFunctionTypeArgumentProjections","parameters":["KotlinType","List","List","KotlinType","KotlinBuiltIns"],"returnType":"List"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.TypeResolver","methodName":"resolveTypeForTypeParameter","parameters":["TypeResolutionContext","Annotations","TypeParameterDescriptor","KtSimpleNameExpression","KtTypeArgumentList"],"returnType":"KotlinType"},53,{"pathToFun":"org.jetbrains.kotlin.types.CommonSupertypes","methodName":"findCommonSupertype","parameters":["Collection","int","int"],"returnType":"KotlinType"},6,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractTypeParameterDescriptor","methodName":"getStorageManager","parameters":[""],"returnType":"StorageManager"},53,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"resolveSupertypes","parameters":["LexicalScope","ClassDescriptor","KtPureClassOrObject","BindingTrace"],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"generateErasedInlineClassIfNeeded","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.callableReferenceUtilKt","methodName":"isForBoundCallableReference","parameters":["CalculatedClosure"],"returnType":"Boolean"},109,{"pathToFun":"org.jetbrains.kotlin.types.model.TypeSystemContext","methodName":"isNullableAny","parameters":["KotlinTypeMarker"],"returnType":"Any"},54,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.AbstractLazyMemberScope","methodName":"getDeclaredProperties","parameters":["Name"],"returnType":"Collection"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenBinding","methodName":"recordClosure","parameters":["BindingTrace","ClassDescriptor","ClassDescriptor","Type"],"returnType":"MutableClosure"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker","methodName":"makeCallWithExpressions","parameters":["KtElement","Receiver","ASTNode","KtExpression","List"],"returnType":"Call"},112,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"replaceArgumentsWith","parameters":["KotlinType","(TypeParameterDescriptor) -> TypeProjection"],"returnType":"KotlinType"},43,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitTypeProjection","parameters":["KtTypeProjection","D"],"returnType":"R"},51,{"pathToFun":"org.jetbrains.kotlin.resolve.checkers.ApiVersionClassifierUsageChecker","methodName":"check","parameters":["ClassifierDescriptor","PsiElement","ClassifierUsageCheckerContext"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ResultTypeResolver","methodName":"findResultType","parameters":["Context","VariableWithConstraints","ResolveDirection"],"returnType":"KotlinTypeMarker"},50,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkLocalAnnotation","parameters":["ClassDescriptor","KtClassOrObject"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.CollectionStubMethodGenerator","methodName":"generate","parameters":["FunctionCodegen","ClassBuilder"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtFunctionNotStubbed","methodName":"getBodyExpression","parameters":[""],"returnType":"KtExpression"},95,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.ConstraintKind","methodName":"isEqual","parameters":[""],"returnType":"Boolean"},21,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallExpressionResolver","methodName":"getQualifiedExpressionTypeInfo","parameters":["KtQualifiedExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},111,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"returnValue","parameters":["KtExpression","PseudoValue","KtElement"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseTypeModifierList","parameters":[""],"returnType":"boolean"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl","methodName":"transactionRegisterVariable","parameters":["TypeVariableMarker"],"returnType":"Unit"},55,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper$Companion","methodName":"isStaticAccessor","parameters":["CallableMemberDescriptor"],"returnType":"Boolean"},113,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor","methodName":"generateImplicitReturnValue","parameters":["KtExpression","KtElement"],"returnType":"Unit"},107,{"pathToFun":"org.jetbrains.kotlin.codegen.FrameMapBase","methodName":"mark","parameters":[""],"returnType":"Mark"},113,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.LocalVariableDescriptor","methodName":"setOutType","parameters":["KotlinType"],"returnType":"void"},72,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.ResolveSession","methodName":"getTypeResolver","parameters":[""],"returnType":"TypeResolver"},7,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeParameter","methodName":"getVariance","parameters":[""],"returnType":"Variance"},53,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitSimpleNameExpression","parameters":["KtSimpleNameExpression"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext","methodName":"addConstraint","parameters":["TypeConstructorMarker","KotlinTypeMarker","ConstraintKind","Boolean"],"returnType":"Unit"},55,{"pathToFun":"org.jetbrains.kotlin.codegen.SamType","methodName":"getType","parameters":[""],"returnType":"KotlinType"},110,{"pathToFun":"org.jetbrains.kotlin.codegen.DescriptorBasedFunctionHandleForJvm","methodName":"createHandleForOverridden","parameters":["FunctionDescriptor"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.types.AbstractTypeApproximator","methodName":"defaultResult","parameters":["KotlinTypeMarker","Boolean"],"returnType":"Any"},6,{"pathToFun":"org.jetbrains.kotlin.builtins.functionTypesKt","methodName":"getFunctionDescriptor","parameters":["KotlinBuiltIns","Int","Boolean"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.descriptors.PossiblyInnerType","methodName":"segments","parameters":[""],"returnType":"List"},81,{"pathToFun":"org.jetbrains.kotlin.resolve.OverridingUtil","methodName":"filterOverrides","parameters":["Set","boolean","Function0","Function2"],"returnType":"Set"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.VariableFixationFinder","methodName":"variableHasTrivialOrNonProperConstraints","parameters":["Context","TypeConstructorMarker"],"returnType":"Boolean"},50,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"writeEnclosingMethod","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"typeConstructorProjection","parameters":["CapturedTypeMarker"],"returnType":"TypeArgumentMarker"},20,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"getFunction","parameters":["int"],"returnType":"ClassDescriptor"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.PossiblyBareType","methodName":"getActualType","parameters":[""],"returnType":"KotlinType"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.diagnostics.KotlinSuppressCache","methodName":"isSuppressedByAnnotated","parameters":["String","Severity","KtAnnotated","Int"],"returnType":"Boolean"},41,{"pathToFun":"org.jetbrains.kotlin.types.DeferredType","methodName":"getDelegate","parameters":[""],"returnType":"KotlinType"},83,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.ResolutionPartsKt","methodName":"checkUnsafeImplicitInvokeAfterSafeCall","parameters":["KotlinResolutionCandidate","SimpleKotlinCallArgument"],"returnType":"ImplicitInvokeCheckStatus"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.inline.InlineUtil","methodName":"isInlineOrContainingInline","parameters":["DeclarationDescriptor"],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.types.TypeIntersector","methodName":"intersectTypes","parameters":["Collection"],"returnType":"KotlinType"},84,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.MutableResolvedCallAtom","methodName":"registerArgumentWithSamConversion","parameters":["KotlinCallArgument","SamConversionDescription"],"returnType":"Unit"},87,{"pathToFun":"org.jetbrains.kotlin.resolve.LocalVariableResolver","methodName":"process","parameters":["KtProperty","ExpressionTypingContext","LexicalScope","ExpressionTypingFacade"],"returnType":"Pair"},72,{"pathToFun":"org.jetbrains.kotlin.codegen.state.BuilderFactoryForDuplicateSignatureDiagnostics","methodName":"isOrOverridesSamAdapter","parameters":["CallableMemberDescriptor"],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.VarianceCheckerCore","methodName":"checkTypePosition","parameters":["TypeBinding","KotlinType","Variance"],"returnType":"Boolean"},35,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.PseudocodeVariablesData","methodName":"isVariableWithTrivialInitializer","parameters":["KtVariableDeclaration","VariableDescriptor"],"returnType":"Boolean"},81,{"pathToFun":"org.jetbrains.kotlin.types.checker.NewCapturedTypeConstructor","methodName":"equals","parameters":["Any"],"returnType":"Boolean"},21,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.NoTypeArguments","methodName":"process","parameters":["KotlinResolutionCandidate","Int"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"classInternalName","parameters":["ClassDescriptor"],"returnType":"String"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.ClosureCodegen","methodName":"putInstanceOnStack","parameters":["ExpressionCodegen","StackValue"],"returnType":"StackValue"},108,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"visitQualifiedExpression","parameters":["KtQualifiedExpression","KotlinType"],"returnType":"CompileTimeConstant"},111,{"pathToFun":"org.jetbrains.kotlin.psi.KtNamedDeclarationUtil","methodName":"getParentFqName","parameters":["KtNamedDeclaration"],"returnType":"FqName"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.TypeVariableDependencyInformationProvider","methodName":"getPostponeEdges","parameters":["TypeConstructorMarker"],"returnType":"Set"},45,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"generateDataClassMethods","parameters":["MutableCollection","Name","LookupLocation","List"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtClassOrObject","methodName":"getPrimaryConstructorParameters","parameters":[""],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.BindingContextUtils","methodName":"getNotNull","parameters":["BindingContext","ReadOnlySlice","K"],"returnType":"V"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtSuperTypeList","methodName":"getEntries","parameters":[""],"returnType":"List"},39,{"pathToFun":"org.jetbrains.kotlin.psi.KtClassBody","methodName":"getDeclarations","parameters":[""],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"replaceArgumentsWith","parameters":["SimpleType","(TypeParameterDescriptor) -> TypeProjection"],"returnType":"SimpleType"},43,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.resolvedCallUtil.resolvedCallUtilKt","methodName":"hasSafeNullableReceiver","parameters":["ResolvedCall","CallResolutionContext"],"returnType":"Boolean"},86,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.DefaultErrorMessages","methodName":"getRendererForDiagnostic","parameters":["Diagnostic"],"returnType":"DiagnosticRenderer"},40,{"pathToFun":"org.jetbrains.kotlin.types.expressions.FunctionsTypingVisitor","methodName":"visitLambdaExpression","parameters":["KtLambdaExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},95,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitQualifiedExpression","parameters":["KtQualifiedExpression"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.SamType","methodName":"getOriginalAbstractMethod","parameters":[""],"returnType":"SimpleFunctionDescriptor"},110,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.receivers.ExpressionReceiver$Companion$ExpressionReceiverImpl","methodName":"replaceType","parameters":["KotlinType"],"returnType":"Any"},15,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"checkUpperBoundType","parameters":["KtTypeReference","KotlinType","BindingTrace","boolean"],"returnType":"void"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"mapTypeAsDeclaration","parameters":["CallableDescriptor"],"returnType":"Type"},53,{"pathToFun":"org.jetbrains.kotlin.resolve.QualifiedExpressionResolver","methodName":"findClassifierAndReportDeprecationIfNeeded","parameters":["LexicalScope","Name","KotlinLookupLocation","KtExpression","BindingTrace"],"returnType":"ClassifierDescriptor"},113,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"visitQualifiedExpression","parameters":["KtQualifiedExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ReceiverExpressionKotlinCallArgument$Companion","methodName":"invoke","parameters":["ReceiverValueWithSmartCastInfo","Boolean","Boolean"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.builtins.jvm.JavaToKotlinClassMap","methodName":"mapPlatformClass","parameters":["ClassDescriptor"],"returnType":"Collection"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"local","parameters":["int","Type","KotlinType"],"returnType":"Local"},83,{"pathToFun":"org.jetbrains.kotlin.resolve.BindingTraceContext","methodName":"report","parameters":["Diagnostic"],"returnType":"void"},41,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowInformationProvider","methodName":"processUnusedParameter","parameters":["VariableUseContext","KtParameter","VariableDescriptor"],"returnType":"Unit"},70,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"visitProperty","parameters":["KtProperty"],"returnType":"void"},81,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker$Companion","methodName":"isHidingParentMemberIfPresent","parameters":["CallableMemberDescriptor"],"returnType":"Boolean"},109,{"pathToFun":"org.jetbrains.kotlin.psi.KtClassOrObject","methodName":"hasPrimaryConstructor","parameters":[""],"returnType":"Boolean"},111,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.LocalVariableDescriptor","methodName":"isDelegated","parameters":[""],"returnType":"boolean"},76,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.PostponedArgumentsAnalyzer","methodName":"valueParameters","parameters":["UnwrappedType?"],"returnType":"List"},92,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker\\$CallImpl","methodName":"getCallType","parameters":[""],"returnType":"CallType"},112,{"pathToFun":"org.jetbrains.kotlin.types.CommonSupertypes","methodName":"topologicallySortSuperclassesAndRecordAllInstances","parameters":["SimpleType","Map","Set"],"returnType":"List"},6,{"pathToFun":"org.jetbrains.kotlin.types.AbstractTypeChecker","methodName":"equalTypes","parameters":["AbstractTypeCheckerContext","KotlinTypeMarker","KotlinTypeMarker"],"returnType":"Boolean"},91,{"pathToFun":"org.jetbrains.kotlin.resolve.ModifierCheckerCore","methodName":"checkModifierList","parameters":["KtModifierList","BindingTrace","DeclarationDescriptor","List","LanguageVersionSettings"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallExpressionResolver","methodName":"getVariableType","parameters":["KtSimpleNameExpression","Receiver","ASTNode","ExpressionTypingContext"],"returnType":"Pair"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkPrimaryConstructor","parameters":["KtClassOrObject","ClassDescriptor"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.synthetic.FunInterfaceConstructorsSyntheticScope","methodName":"checkIfClassifierApplicable","parameters":["ClassifierDescriptor"],"returnType":"ClassDescriptor"},83,{"pathToFun":"org.jetbrains.kotlin.codegen.ClosureCodegen","methodName":"generateBody","parameters":[""],"returnType":"void"},108,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalScopeImpl$InitializeHandler","methodName":"addClassifierDescriptor","parameters":["ClassifierDescriptor"],"returnType":"Unit"},53,{"pathToFun":"org.jetbrains.kotlin.psi.ktElementUtilsKt","methodName":"unpackFunctionLiteral","parameters":["KtExpression","Boolean"],"returnType":"KtLambdaExpression"},91,{"pathToFun":"org.jetbrains.kotlin.psi.synthetics.SyntheticClassOrObjectDescriptorKt","methodName":"findClassDescriptor","parameters":["KtPureElement","BindingContext"],"returnType":"ClassDescriptor"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenBinding","methodName":"asmTypeForAnonymousClass","parameters":["BindingContext","CallableDescriptor"],"returnType":"Type"},109,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver$Companion","methodName":"checkInheritedAndDelegatedSignatures","parameters":["ClassDescriptor","CheckInheritedSignaturesReportStrategy","CheckOverrideReportStrategy"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.BothSignatureWriter","methodName":"writeClassBoundEnd","parameters":[""],"returnType":"void"},59,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"putClosureInstanceOnStack","parameters":["ClosureCodegen","StackValue"],"returnType":"StackValue"},108,{"pathToFun":"org.jetbrains.kotlin.types.typesApproximation.CapturedTypeApproximationKt","methodName":"approximateProjection","parameters":["TypeArgument"],"returnType":"ApproximationBounds"},14,{"pathToFun":"org.jetbrains.kotlin.types.checker.TypeIntersector","methodName":"isStrictSupertype","parameters":["KotlinType","KotlinType"],"returnType":"Boolean"},10,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitSuperTypeListEntry","parameters":["KtSuperTypeListEntry","D"],"returnType":"R"},39,{"pathToFun":"org.jetbrains.kotlin.types.CommonSupertypes","methodName":"computeSupertypeProjections","parameters":["TypeConstructor","Set","int","int"],"returnType":"SimpleType"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"generateDeclaration","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.diagnostics.DiagnosticFactory","methodName":"getName","parameters":[""],"returnType":"String"},41,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker\\$CallImpl","methodName":"getTypeArguments","parameters":[""],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeParameterList","methodName":"getParameters","parameters":[""],"returnType":"List"},53,{"pathToFun":"org.jetbrains.kotlin.types.TypeUtils","methodName":"collectAllSupertypes","parameters":["KotlinType","Set"],"returnType":"void"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.AnnotationCodegen","methodName":"isBareTypeParameterWithNullableUpperBound","parameters":["KotlinType"],"returnType":"boolean"},113,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeParameter","methodName":"getExtendsBound","parameters":[""],"returnType":"KtTypeReference"},53,{"pathToFun":"org.jetbrains.kotlin.resolve.TypeResolver","methodName":"forceResolveTypeContents","parameters":["KotlinType"],"returnType":"Unit"},63,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiUtil","methodName":"getEnclosingElementForLocalDeclaration","parameters":["KtDeclaration","boolean"],"returnType":"KtElement"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.PostponedArgumentInputTypesResolver","methodName":"collectParameterTypesAndBuildNewExpectedTypes","parameters":["Context","List","KotlinConstraintSystemCompleter.ConstraintSystemCompletionMode","TypeVariableDependencyInformationProvider"],"returnType":"Boolean"},50,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.TypeVariableTypeConstructor","methodName":"getParameters","parameters":[""],"returnType":"List"},53,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector","methodName":"shouldWeSkipConstraint","parameters":["Context","TypeVariableMarker","Constraint"],"returnType":"Boolean"},55,{"pathToFun":"org.jetbrains.kotlin.diagnostics.PositioningStrategyKt","methodName":"getEndOffset","parameters":["PsiElement"],"returnType":"Int"},40,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ResultTypeResolver","methodName":"sinkIntegerLiteralTypes","parameters":["Context","List"],"returnType":"List"},39,{"pathToFun":"org.jetbrains.kotlin.types.IntersectionTypeConstructor","methodName":"getSupertypes","parameters":[""],"returnType":"Collection"},7,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitClassBody","parameters":["KtClassBody","D"],"returnType":"R"},111,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.ContextIndependentParameterRenderer","methodName":"render","parameters":["O","RenderingContext"],"returnType":"String"},12,{"pathToFun":"org.jetbrains.kotlin.types.IntersectionTypeConstructor","methodName":"isDenotable","parameters":[""],"returnType":"Boolean"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.NewCallArgumentsKt","methodName":"checkNoSpread","parameters":["BasicCallResolutionContext","ValueArgument"],"returnType":"Unit"},107,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRenderer","methodName":"withOptions","parameters":["DescriptorRendererOptions.() -> Unit"],"returnType":"DescriptorRenderer"},13,{"pathToFun":"org.jetbrains.kotlin.types.DefinitelyNotNullType$Companion","methodName":"makeDefinitelyNotNull","parameters":["UnwrappedType"],"returnType":"DefinitelyNotNullType"},17,{"pathToFun":"org.jetbrains.kotlin.codegen.CallGenerator$DefaultCallGenerator","methodName":"reorderArgumentsIfNeeded","parameters":["List","List"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.InferenceUtilsKt","methodName":"buildCurrentSubstitutor","parameters":["ConstraintStorage","TypeSystemInferenceExtensionContext","Map"],"returnType":"TypeSubstitutorMarker"},107,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.ConstraintKind","methodName":"isLower","parameters":[""],"returnType":"Boolean"},50,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.data.KtClassOrObjectInfo","methodName":"getContainingPackageFqName","parameters":[""],"returnType":"FqName"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.ExposedVisibilityChecker","methodName":"checkClassHeader","parameters":["KtClassOrObject","ClassDescriptor"],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.MutableVariableWithConstraints","methodName":"isUsefulConstraint","parameters":["Constraint","Map"],"returnType":"Boolean"},50,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.BothSignatureWriter","methodName":"writeTypeArgument","parameters":["Variance"],"returnType":"void"},84,{"pathToFun":"org.jetbrains.kotlin.types.TypeProjectionBase","methodName":"hashCode","parameters":[""],"returnType":"int"},113,{"pathToFun":"org.jetbrains.kotlin.types.expressions.FunctionsTypingVisitorKt","methodName":"createFunctionType","parameters":["SimpleFunctionDescriptor","KotlinBuiltIns","Boolean","Boolean"],"returnType":"KotlinType"},95,{"pathToFun":"org.jetbrains.kotlin.psi.KtParameter","methodName":"hasDefaultValue","parameters":[""],"returnType":"boolean"},105,{"pathToFun":"org.jetbrains.kotlin.types.AbstractNullabilityChecker","methodName":"isSubtypeOfAny","parameters":["AbstractTypeCheckerContext","KotlinTypeMarker"],"returnType":"Boolean"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"resolveValueParameterDescriptor","parameters":["LexicalScope","FunctionDescriptor","KtParameter","int","KotlinType","BindingTrace","Annotations"],"returnType":"ValueParameterDescriptorImpl"},105,{"pathToFun":"org.jetbrains.kotlin.resolve.TypeResolver","methodName":"collectArgumentsForClassifierTypeConstructor","parameters":["TypeResolutionContext","ClassifierDescriptorWithTypeParameters","List"],"returnType":"Pair"},113,{"pathToFun":"org.jetbrains.kotlin.psi.KtDeclarationImpl","methodName":"getModifierList","parameters":[""],"returnType":"KtModifierList"},95,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitTypeParameter","parameters":["KtTypeParameter","D"],"returnType":"R"},53,{"pathToFun":"org.jetbrains.kotlin.descriptors.DescriptorWithDeprecation$Companion","methodName":"createNonDeprecated","parameters":["T"],"returnType":"DescriptorWithDeprecation"},113,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.VariableUseState$Companion","methodName":"isUsed","parameters":["VariableUseState"],"returnType":"Boolean"},109,{"pathToFun":"org.jetbrains.kotlin.types.DeferredType","methodName":"create","parameters":["StorageManager","BindingTrace","Function0"],"returnType":"DeferredType"},53,{"pathToFun":"org.jetbrains.kotlin.codegen.AbstractClassBuilder","methodName":"visitOuterClass","parameters":["String","String","String"],"returnType":"void"},110,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl","methodName":"asPostponedArgumentInputTypesResolverContext","parameters":[""],"returnType":"Any"},50,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"generateFakeOverrides","parameters":["Name","Collection","MutableCollection","Class"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtClass","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"platformStaticCallIfPresent","parameters":["StackValue","CallableDescriptor"],"returnType":"StackValue"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.PopBackwardPropagationTransformerKt","methodName":"isPrimitiveTypeConversion","parameters":["AbstractInsnNode"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.ValueParameterDescriptorImpl$Companion","methodName":"getDestructuringVariablesOrNull","parameters":["ValueParameterDescriptor"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CompletionModeCalculator$CalculatorForNestedCall","methodName":"hasRequiredKind","parameters":["Constraint","FixationDirection"],"returnType":"Any"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.ClassBodyCodegen","methodName":"generateConstructors","parameters":[""],"returnType":"void"},110,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseNullableTypeSuffix","parameters":["Marker"],"returnType":"Marker"},113,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitClassOrObject","parameters":["KtClassOrObject"],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.MutableClassDescriptor","methodName":"getTypeConstructor","parameters":[""],"returnType":"TypeConstructor"},109,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateConstructorCall","parameters":["ResolvedCall","Type"],"returnType":"StackValue"},59,{"pathToFun":"org.jetbrains.kotlin.codegen.AbstractClassBuilder","methodName":"visitInnerClass","parameters":["String","String","String","int"],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.BoxingInterpreterKt","methodName":"isProgressionClass","parameters":["Type"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.types.CommonSupertypes","methodName":"commonSuperTypeForInflexible","parameters":["Collection","int","int"],"returnType":"SimpleType"},6,{"pathToFun":"org.jetbrains.kotlin.psi.KtClass","methodName":"getProperties","parameters":[""],"returnType":"List"},111,{"pathToFun":"org.jetbrains.kotlin.types.typesApproximation.CapturedTypeApproximationKt","methodName":"approximateCapturedTypes","parameters":["KotlinType"],"returnType":"ApproximationBounds"},14,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.ClassicTypeSystemContextForCS","methodName":"typeSubstitutorByTypeConstructor","parameters":["Map"],"returnType":"TypeSubstitutorMarker"},108,{"pathToFun":"org.jetbrains.kotlin.psi.KtProjectionKind","methodName":"getToken","parameters":[""],"returnType":"KtSingleValueToken"},51,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.TypeVariableDependencyInformationProvider","methodName":"isMyTypeVariable","parameters":["TypeConstructorMarker"],"returnType":"Any"},50,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"addParentsToInnerClassesIfNeeded","parameters":["Collection"],"returnType":"void"},109,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingServices","methodName":"getTypeInfo","parameters":["LexicalScope","KtExpression","KotlinType","DataFlowInfo","InferenceSession","BindingTrace","boolean","KtExpression","ContextDependency"],"returnType":"KotlinTypeInfo"},77,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor\\$LazyClassTypeConstructor","methodName":"getSupertypeLoopChecker","parameters":[""],"returnType":"SupertypeLoopChecker"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitClassBody","parameters":["KtClassBody"],"returnType":"void"},111,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"isProjectionNotNull","parameters":["CapturedTypeMarker"],"returnType":"Boolean"},19,{"pathToFun":"org.jetbrains.kotlin.codegen.InterfaceImplBodyCodegen","methodName":"classForInnerClassRecord","parameters":[""],"returnType":"ClassDescriptor"},110,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.ReifiedTypeInliner$Companion","methodName":"isOperationReifiedMarker","parameters":["AbstractInsnNode"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"generateDeclarationForLocalClassOrObjectIfNeeded","parameters":["KtClassOrObject"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"getName","parameters":["ClassDescriptor"],"returnType":"String"},111,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"containsTypeAliasParameters","parameters":["KotlinType"],"returnType":"Boolean"},113,{"pathToFun":"org.jetbrains.kotlin.descriptors.ValueParameterDescriptor","methodName":"isLateInit","parameters":[""],"returnType":"Boolean"},104,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CollectionTypeVariableUsagesInfo","methodName":"getDependentTypeParameters","parameters":["NewConstraintSystem","TypeConstructorMarker","List"],"returnType":"List"},54,{"pathToFun":"org.jetbrains.kotlin.resolve.VariableTypeAndInitializerResolver","methodName":"resolveType","parameters":["VariableDescriptorWithInitializerImpl","LexicalScope","KtVariableDeclaration","DataFlowInfo","InferenceSession","BindingTrace","Boolean"],"returnType":"KotlinType"},72,{"pathToFun":"org.jetbrains.kotlin.diagnostics.PositioningStrategy","methodName":"markDiagnostic","parameters":["ParametrizedDiagnostic"],"returnType":"List"},40,{"pathToFun":"org.jetbrains.kotlin.psi.KtProperty","methodName":"getGetter","parameters":[""],"returnType":"KtPropertyAccessor"},81,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallExpressionUnrollerKt","methodName":"unrollToLeftMostQualifiedExpression","parameters":["KtQualifiedExpression"],"returnType":"List"},111,{"pathToFun":"org.jetbrains.kotlin.BlockExpressionElementType","methodName":"createCompositeNode","parameters":[""],"returnType":"Any"},96,{"pathToFun":"org.jetbrains.kotlin.psi.KtModifierList","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},112,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isDefaultBound","parameters":["KotlinType"],"returnType":"boolean"},52,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.NewCommonSuperTypeCalculator","methodName":"findSuperTypeConstructorsAndIntersectResult","parameters":["TypeSystemCommonSuperTypesContext","List","Int","AbstractTypeCheckerContext"],"returnType":"SimpleTypeMarker"},8,{"pathToFun":"org.jetbrains.kotlin.diagnostics.PsiDiagnosticUtils\\$LineAndColumn","methodName":"getLine","parameters":[""],"returnType":"int"},40,{"pathToFun":"org.jetbrains.kotlin.psi.KtUserType","methodName":"getTypeArgumentsAsTypes","parameters":[""],"returnType":"List"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker\\$CallImpl","methodName":"isSemanticallyEquivalentToSafeCall","parameters":[""],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.types.model.TypeSystemContext","methodName":"isCapturedDynamic","parameters":["KotlinTypeMarker"],"returnType":"Boolean"},13,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"markLineNumberForDescriptor","parameters":["ClassDescriptor","InstructionAdapter"],"returnType":"void"},91,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"genClosure","parameters":["KtDeclarationWithBody","SamType"],"returnType":"StackValue"},94,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.LocalVariableDescriptor","methodName":"getGetter","parameters":[""],"returnType":"Getter"},72,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallExpressionResolver","methodName":"getSimpleNameExpressionTypeInfo","parameters":["KtSimpleNameExpression","Receiver","ASTNode","ExpressionTypingContext"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getScopeForInitializerResolution","parameters":[""],"returnType":"LexicalScope"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getOuterScope","parameters":[""],"returnType":"LexicalScope"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.LazyExplicitImportScope","methodName":"getContributedClassifier","parameters":["Name","LookupLocation"],"returnType":"ClassifierDescriptor"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"pushClosureOnStack","parameters":["ClassDescriptor","boolean","CallGenerator","StackValue"],"returnType":"void"},73,{"pathToFun":"org.jetbrains.kotlin.resolve.ModifiersChecker\\$ModifiersCheckingProcedure","methodName":"checkModifiersForLocalDeclaration","parameters":["KtDeclaration","DeclarationDescriptor"],"returnType":"void"},73,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitClassBody","parameters":["KtClassBody","Void"],"returnType":"Void"},111,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"handleJumpInsideTryFinally","parameters":["Label"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateNewCall","parameters":["KtCallExpression","ResolvedCall"],"returnType":"StackValue"},58,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"calculateInnerClassAccessFlags","parameters":["ClassDescriptor"],"returnType":"int"},109,{"pathToFun":"org.jetbrains.kotlin.codegen.DelegatingClassBuilder","methodName":"visitInnerClass","parameters":["String","String","String","int"],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseClassBody","parameters":[""],"returnType":"void"},111,{"pathToFun":"org.jetbrains.kotlin.types.AbstractClassTypeConstructor","methodName":"isFinal","parameters":[""],"returnType":"boolean"},66,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"isDenotable","parameters":["TypeConstructorMarker"],"returnType":"Boolean"},79,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeParameterListOwnerNotStubbed","methodName":"getTypeConstraintList","parameters":[""],"returnType":"KtTypeConstraintList"},95,{"pathToFun":"org.jetbrains.kotlin.types.TypeCapabilitiesKt","methodName":"getCustomTypeVariable","parameters":["KotlinType"],"returnType":"CustomTypeVariable"},96,{"pathToFun":"org.jetbrains.kotlin.types.checker.NewCapturedTypeKt","methodName":"captureFromArguments","parameters":["SimpleType","CaptureStatus"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.types.checker.TypeIntersector","methodName":"filterTypes","parameters":["Collection","(lower: SimpleType, upper: SimpleType) -> Boolean"],"returnType":"Collection"},10,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.NewCommonSuperTypeCalculator","methodName":"findErrorTypeInSupertypesIfItIsNeeded","parameters":["TypeSystemCommonSuperTypesContext","List","AbstractTypeCheckerContext"],"returnType":"SimpleTypeMarker"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"writeInnerClass","parameters":["ClassDescriptor","KotlinTypeMapper","ClassBuilder"],"returnType":"void"},109,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorUtils","methodName":"classCanHaveAbstractFakeOverride","parameters":["ClassDescriptor"],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.types.TypeSubstitutionKt","methodName":"asSimpleType","parameters":["KotlinType"],"returnType":"SimpleType"},110,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.VariableFixationFinder","methodName":"variableHasProperArgumentConstraints","parameters":["Context","TypeConstructorMarker"],"returnType":"Boolean"},50,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.instructions.jumps.NondeterministicJumpInstruction","methodName":"accept","parameters":["InstructionVisitor"],"returnType":"Unit"},100,{"pathToFun":"org.jetbrains.kotlin.resolve.inline.InlineUtil","methodName":"getInlineArgumentDescriptor","parameters":["KtFunction","BindingContext"],"returnType":"ValueParameterDescriptor"},96,{"pathToFun":"org.jetbrains.kotlin.codegen.ClassBodyCodegen","methodName":"generateErasedInlineClassIfNeeded","parameters":[""],"returnType":"void"},110,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.instructions.InstructionVisitor","methodName":"visitWriteValue","parameters":["WriteValueInstruction"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.types.AbstractTypeApproximator","methodName":"isIntersectionTypeEffectivelyNothing","parameters":["IntersectionTypeConstructor"],"returnType":"Boolean"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.sam.SamConversionResolverImplKt","methodName":"nonProjectionParametrization","parameters":["SimpleType"],"returnType":"SimpleType"},110,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"resolveSecondaryConstructors","parameters":[""],"returnType":"Collection"},112,{"pathToFun":"org.jetbrains.kotlin.types.IntersectionTypeConstructor","methodName":"createScopeForKotlinType","parameters":[""],"returnType":"MemberScope"},9,{"pathToFun":"org.jetbrains.kotlin.descriptors.annotations.CompositeAnnotations","methodName":"findAnnotation","parameters":["FqName"],"returnType":"Any"},73,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.FunctionDescriptorImpl","methodName":"hasStableParameterNames","parameters":[""],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.types.expressions.FunctionsTypingVisitor","methodName":"computeReturnTypeBasedOnReturnExpressions","parameters":["KtFunctionLiteral","ExpressionTypingContext","KotlinType"],"returnType":"KotlinType"},95,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"visitCallExpression","parameters":["KtCallExpression","KotlinType"],"returnType":"CompileTimeConstant"},112,{"pathToFun":"org.jetbrains.kotlin.types.IntersectionTypeConstructor","methodName":"getAlternativeType","parameters":[""],"returnType":"KotlinType"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"writeGenericArguments","parameters":["JvmSignatureWriter","PossiblyInnerType","TypeMappingMode"],"returnType":"Unit"},81,{"pathToFun":"org.jetbrains.kotlin.psi.KtReturnExpression","methodName":"getReturnedExpression","parameters":[""],"returnType":"KtExpression"},100,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.OptimizationBasicInterpreter","methodName":"unaryOperation","parameters":["AbstractInsnNode","BasicValue"],"returnType":"BasicValue"},113,{"pathToFun":"org.jetbrains.kotlin.types.TypeSubstitutor","methodName":"projectedTypeForConflictedTypeWithUnsafeVariance","parameters":["KotlinType","TypeProjection","TypeParameterDescriptor","TypeProjection"],"returnType":"TypeProjection"},96,{"pathToFun":"org.jetbrains.kotlin.codegen.DelegatingClassBuilder","methodName":"visitOuterClass","parameters":["String","String","String"],"returnType":"void"},110,{"pathToFun":"org.jetbrains.kotlin.psi.KtProperty","methodName":"isMember","parameters":[""],"returnType":"boolean"},81,{"pathToFun":"org.jetbrains.kotlin.types.UtilsKt","methodName":"getEffectiveVariance","parameters":["Variance","Variance"],"returnType":"Variance"},84,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"innerAccessFlagsForModalityAndKind","parameters":["ClassDescriptor"],"returnType":"int"},109,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"moveToTopOfStack","parameters":["Type","KotlinType","InstructionAdapter","int"],"returnType":"void"},111,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.VariableDescriptorImpl","methodName":"getUserData","parameters":["UserDataKey"],"returnType":"V"},108,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"getContributedDescriptors","parameters":["DescriptorKindFilter","(Name) -> Boolean"],"returnType":"Collection"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeParameterListOwnerNotStubbed","methodName":"getTypeConstraints","parameters":[""],"returnType":"List"},95,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiUtil","methodName":"isLocal","parameters":["KtDeclaration"],"returnType":"boolean"},113,{"pathToFun":"org.jetbrains.kotlin.types.model.TypeSystemContext","methodName":"getArgumentOrNull","parameters":["SimpleTypeMarker","Int"],"returnType":"TypeArgumentMarker"},8,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.TypeVariableKt","methodName":"typeForTypeVariable","parameters":["TypeConstructor"],"returnType":"SimpleType"},55,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"createMemberScope","parameters":["LazyClassContext","ClassMemberDeclarationProvider"],"returnType":"ScopesHolderForClass"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"transformAnonymousTypeIfNeeded","parameters":["DeclarationDescriptorWithVisibility","KtDeclaration","KotlinType","BindingTrace","Iterable"],"returnType":"KotlinType"},56,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ResultTypeResolver","methodName":"representativeFromEqualityConstraints","parameters":["Context","List"],"returnType":"KotlinTypeMarker"},50,{"pathToFun":"org.jetbrains.kotlin.resolve.typeBinding.TypeBindingKt","methodName":"createTypeBindingFromPsi","parameters":["BindingContext","KtTypeElement","KotlinType"],"returnType":"TypeBinding"},35,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl","methodName":"isReified","parameters":["TypeVariableMarker"],"returnType":"Boolean"},50,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"getContributedFunctions","parameters":["Name","LookupLocation"],"returnType":"Collection"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.TypeArgumentsToParametersMapper$TypeArgumentsMapping$TypeArgumentsMappingImpl","methodName":"getTypeArgument","parameters":["TypeParameterDescriptor"],"returnType":"TypeArgument"},24,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.VariableFixationFinder","methodName":"isReified","parameters":["Context","TypeConstructorMarker"],"returnType":"Boolean"},50,{"pathToFun":"org.jetbrains.kotlin.codegen.InterfaceImplBodyCodegen","methodName":"done","parameters":[""],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"generateSyntheticCompanionObject","parameters":["Name","MutableSet"],"returnType":"Unit"},101,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"inventAnonymousClassName","parameters":[""],"returnType":"String"},110,{"pathToFun":"org.jetbrains.kotlin.types.checker.NewCapturedTypeConstructor","methodName":"getSupertypes","parameters":[""],"returnType":"Any"},19,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.NewCommonSuperTypeCalculator","methodName":"uncaptureFromSubtyping","parameters":["TypeSystemCommonSuperTypesContext","TypeArgumentMarker"],"returnType":"TypeArgumentMarker"},8,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver$Companion","methodName":"isRelevant","parameters":["Set","Collection","Set"],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtModifierList","methodName":"getModifier","parameters":["KtModifierKeywordToken"],"returnType":"PsiElement"},112,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"getDeferredValue","parameters":["KtExpression"],"returnType":"Any"},83,{"pathToFun":"org.jetbrains.kotlin.resolve.FiniteBoundRestrictionChecker$GraphBuilder","methodName":"buildGraph","parameters":["TypeConstructor"],"returnType":"Unit"},52,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitParameter","parameters":["KtParameter","D"],"returnType":"R"},105,{"pathToFun":"org.jetbrains.kotlin.codegen.fakeDescriptorsForReferencesKt","methodName":"createFreeDescriptor","parameters":["D","TypeApproximator"],"returnType":"D"},108,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CollectionTypeVariableUsagesInfo","methodName":"isContainedInInvariantOrContravariantPositionsAmongTypeParameters","parameters":["TypeVariableFromCallableDescriptor","List"],"returnType":"Any"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.TypeVariableDependencyInformationProvider","methodName":"computePostponeArgumentsEdges","parameters":[""],"returnType":"Unit"},50,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.callResolverUtil.CallResolverUtilKt","methodName":"isOrOverridesSynthesized","parameters":["CallableMemberDescriptor"],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.KotlinConstraintSystemCompleter","methodName":"fixVariable","parameters":["Context","VariableWithConstraints","List"],"returnType":"Unit"},46,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitClass","parameters":["KtClass"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor\\$LazyClassTypeConstructor","methodName":"getDeclarationDescriptor","parameters":[""],"returnType":"ClassDescriptor"},112,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"generateInitializersForScriptClassOrObject","parameters":["KtDeclarationContainer"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.TypeMappingMode$Companion","methodName":"getOptimalModeForReturnType","parameters":["KotlinType","Boolean"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"addSyntheticSecondaryConstructors","parameters":["MutableCollection"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isPrimitiveClass","parameters":["ClassDescriptor"],"returnType":"boolean"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalScopeStorage","methodName":"addVariableOrClassDescriptor","parameters":["DeclarationDescriptor"],"returnType":"Unit"},109,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"recordClassForCallable","parameters":["KtElement","CallableDescriptor","Collection","String","DeclarationDescriptor"],"returnType":"ClassDescriptor"},109,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.AbstractLazyMemberScope","methodName":"getContributedVariables","parameters":["Name","LookupLocation"],"returnType":"Collection"},113,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeProjection","methodName":"getProjectionKind","parameters":[""],"returnType":"KtProjectionKind"},51,{"pathToFun":"org.jetbrains.kotlin.types.DeferredType","methodName":"isComputing","parameters":[""],"returnType":"boolean"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getNonLocalReturnInfo","parameters":["CallableMemberDescriptor","KtReturnExpression"],"returnType":"NonLocalReturnInfo"},100,{"pathToFun":"org.jetbrains.kotlin.psi.KtClassOrObject","methodName":"getPrimaryConstructor","parameters":[""],"returnType":"KtPrimaryConstructor"},112,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing\\$ModifierDetector","methodName":"isCompanionDetected","parameters":[""],"returnType":"boolean"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"getNonDeclaredClasses","parameters":["Name","MutableSet"],"returnType":"Unit"},101,{"pathToFun":"org.jetbrains.kotlin.codegen.codegenUtilKt","methodName":"isJvmStaticInObjectOrClassOrInterface","parameters":["CallableDescriptor"],"returnType":"Boolean"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl","methodName":"addEqualityConstraint","parameters":["KotlinTypeMarker","KotlinTypeMarker","ConstraintPosition"],"returnType":"Any"},36,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.NewCommonSuperTypeCalculator","methodName":"commonSuperTypeForNotNullTypes","parameters":["TypeSystemCommonSuperTypesContext","List","Int","AbstractTypeCheckerContext","AbstractTypeCheckerContext"],"returnType":"SimpleTypeMarker"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.TypeResolver","methodName":"shouldCheckBounds","parameters":["TypeResolutionContext","KotlinType"],"returnType":"Boolean"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.DescriptorKindFilter","methodName":"restrictedToKindsOrNull","parameters":["Int"],"returnType":"DescriptorKindFilter"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getCompanionObjectIfAllowed","parameters":[""],"returnType":"KtObjectDeclaration"},112,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.TypeParameterDescriptorImpl","methodName":"addDefaultUpperBound","parameters":[""],"returnType":"void"},25,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.synthetic.FunInterfaceConstructorsSyntheticScope","methodName":"getSamConstructor","parameters":["ClassifierDescriptor"],"returnType":"SamConstructorDescriptor"},83,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeParameterListOwnerNotStubbed","methodName":"getTypeParameterList","parameters":[""],"returnType":"KtTypeParameterList"},95,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver","methodName":"checkOverridesInAClass","parameters":["ClassDescriptorWithResolutionScopes","KtClassOrObject"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.AnnotationCodegen","methodName":"generateAdditionalClassAnnotations","parameters":["Set","ClassDescriptor"],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor","methodName":"createSubstitutedCopy","parameters":["DeclarationDescriptor","FunctionDescriptor","Kind","Name","Annotations","SourceElement"],"returnType":"FunctionDescriptorImpl"},18,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeProjection","methodName":"getProjectionToken","parameters":[""],"returnType":"PsiElement"},51,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.ExplicitReceiverScopeTowerProcessor","methodName":"recordLookups","parameters":["Collection","Name"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeReference","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ResultTypeResolver","methodName":"findResultTypeOrNull","parameters":["Context","VariableWithConstraints","ResolveDirection"],"returnType":"KotlinTypeMarker"},50,{"pathToFun":"org.jetbrains.kotlin.codegen.ClassBodyCodegen","methodName":"generateDelegatesToDefaultImpl","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.BothSignatureWriter","methodName":"toString","parameters":[""],"returnType":"String"},36,{"pathToFun":"org.jetbrains.kotlin.resolve.TypeResolver","methodName":"classifierDescriptorsFromInnerToOuter","parameters":["ClassifierDescriptor?"],"returnType":"List"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.RedundantCheckCastEliminationMethodTransformer","methodName":"isMultiArrayType","parameters":["Type"],"returnType":"Any"},32,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.BothSignatureWriter","methodName":"toJvmVariance","parameters":["Variance"],"returnType":"char"},84,{"pathToFun":"org.jetbrains.kotlin.codegen.state.GenerationState$GenerateClassFilter$Companion","methodName":"shouldAnnotateClass","parameters":["KtClassOrObject"],"returnType":"Boolean"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.AnnotationCodegen","methodName":"generateAnnotationIfNotPresent","parameters":["Set","Class"],"returnType":"void"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.OptimizationBasicInterpreter","methodName":"returnOperation","parameters":["AbstractInsnNode","BasicValue","BasicValue"],"returnType":"void"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.RedundantCheckCastEliminationMethodTransformer","methodName":"isTrivialSubtype","parameters":["Type","Type"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationResolver","methodName":"reportRedeclarationsWithClassifiers","parameters":["Multimap"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.data.KtClassOrObjectInfo","methodName":"getPrimaryConstructorParameters","parameters":[""],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.NewCommonSuperTypeCalculator","methodName":"collectAllSupertypes","parameters":["TypeSystemCommonSuperTypesContext","SimpleTypeMarker","AbstractTypeCheckerContext"],"returnType":"Any"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"genReceiver","parameters":["StackValue","ExpressionCodegen","CallableDescriptor","Callable","ReceiverValue","boolean"],"returnType":"StackValue"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"signature","parameters":[""],"returnType":"JvmClassSignature"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitDotQualifiedExpression","parameters":["KtDotQualifiedExpression","Void"],"returnType":"Void"},111,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseDelegationSpecifier","parameters":[""],"returnType":"void"},39,{"pathToFun":"org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt","methodName":"getSuperClassNotAny","parameters":["ClassDescriptor"],"returnType":"ClassDescriptor"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.ResolveSession","methodName":"getWrappedTypeFactory","parameters":[""],"returnType":"WrappedTypeFactory"},52,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalScopeImpl$InitializeHandler","methodName":"addVariableDescriptor","parameters":["VariableDescriptor"],"returnType":"Unit"},106,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.MutableClosure","methodName":"getCapturedOuterClassDescriptor","parameters":[""],"returnType":"ClassDescriptor"},113,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingServices","methodName":"getType","parameters":["LexicalScope","KtExpression","KotlinType","DataFlowInfo","InferenceSession","BindingTrace"],"returnType":"KotlinType"},77,{"pathToFun":"org.jetbrains.kotlin.codegen.codegenUtilKt","methodName":"recordCallLabelForLambdaArgument","parameters":["KtFunctionLiteral","BindingTrace"],"returnType":"Unit"},95,{"pathToFun":"org.jetbrains.kotlin.resolve.MissingSupertypesResolver","methodName":"doGetMissingClassifiers","parameters":["ClassifierDescriptor"],"returnType":"Set"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolutionAtomsKt","methodName":"unwrap","parameters":["ResolvedLambdaAtom"],"returnType":"ResolvedLambdaAtom"},92,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.TrivialConstraintTypeInferenceOracle","methodName":"isNotInterestingConstraint","parameters":["Constraint"],"returnType":"Boolean"},50,{"pathToFun":"org.jetbrains.kotlin.codegen.fakeDescriptorsForReferencesKt","methodName":"createFreeFakeLambdaDescriptor","parameters":["FunctionDescriptor","TypeApproximator"],"returnType":"FunctionDescriptor"},108,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.KotlinResolutionCallbacksImpl","methodName":"bindStubResolvedCallForCandidate","parameters":["ResolvedCallAtom"],"returnType":"Unit"},92,{"pathToFun":"org.jetbrains.kotlin.descriptors.annotations.AnnotationsImpl","methodName":"iterator","parameters":[""],"returnType":"Iterator"},80,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiUtil","methodName":"getPreviousWord","parameters":["PsiElement","String"],"returnType":"PsiElement"},95,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContextKt","methodName":"containsInternal","parameters":["KotlinType","(KotlinTypeMarker) -> Boolean"],"returnType":"Boolean"},99,{"pathToFun":"org.jetbrains.kotlin.resolve.diagnostics.MutableDiagnosticsWithSuppression","methodName":"report","parameters":["Diagnostic"],"returnType":"Unit"},49,{"pathToFun":"org.jetbrains.kotlin.psi.KtClass","methodName":"isInterface","parameters":[""],"returnType":"Boolean"},111,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitSuperTypeEntry","parameters":["KtSuperTypeEntry","Void"],"returnType":"Void"},37,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver$Companion","methodName":"collectAbstractMethodsWithMoreSpecificReturnType","parameters":["List","CallableMemberDescriptor"],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker","methodName":"makePropertyCall","parameters":["Receiver","ASTNode","KtSimpleNameExpression"],"returnType":"Call"},112,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"asTypeProjection","parameters":["KotlinType"],"returnType":"TypeProjection"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.inline.InlineUtil","methodName":"checkNonLocalReturnUsage","parameters":["DeclarationDescriptor","KtExpression","ResolutionContext"],"returnType":"boolean"},100,{"pathToFun":"org.jetbrains.kotlin.resolve.OverloadResolver","methodName":"checkOverloadsInClass","parameters":["Collection"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.instructions.jumps.NondeterministicJumpInstruction","methodName":"setResolvedTarget","parameters":["Label","Instruction"],"returnType":"Unit"},100,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.ResolveSession","methodName":"getDeclarationProviderFactory","parameters":[""],"returnType":"DeclarationProviderFactory"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"writeInnerClass","parameters":["ClassDescriptor"],"returnType":"void"},109,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"generateDelegates","parameters":["DelegationFieldsInfo"],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitDotQualifiedExpression","parameters":["KtDotQualifiedExpression","StackValue"],"returnType":"StackValue"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorUtils","methodName":"canHaveDeclaredConstructors","parameters":["ClassDescriptor"],"returnType":"boolean"},53,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DataFlowAnalyzer","methodName":"createCheckedTypeInfo","parameters":["KotlinType","ResolutionContext","KtExpression"],"returnType":"KotlinTypeInfo"},104,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"generateCompanionObjectBackingFieldCopies","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.CallReceiver","methodName":"calcDispatchReceiverType","parameters":["ResolvedCall","ReceiverParameterDescriptor","KotlinTypeMapper","Callable"],"returnType":"JvmKotlinType"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.callableReferenceUtilKt","methodName":"isForCallableReference","parameters":["CalculatedClosure"],"returnType":"Boolean"},109,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"generateDelegatingDescriptors","parameters":["Name","MemberExtractor","Collection"],"returnType":"Collection"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.InnerClassesScopeWrapper","methodName":"getContributedClassifier","parameters":["Name","LookupLocation"],"returnType":"ClassifierDescriptor"},88,{"pathToFun":"org.jetbrains.kotlin.resolve.sam.SamConversionResolverImplKt","methodName":"getFunctionTypeForAbstractMethod","parameters":["FunctionDescriptor","Boolean"],"returnType":"SimpleType"},110,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.AdditionalTypeChecker","methodName":"checkReceiver","parameters":["ReceiverParameterDescriptor","ReceiverValue","Boolean","CallResolutionContext"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.types.TypeSystemCommonBackendContext","methodName":"isMarkedNullable","parameters":["KotlinTypeMarker"],"returnType":"Boolean"},41,{"pathToFun":"org.jetbrains.kotlin.diagnostics.PsiDiagnosticUtils\\$LineAndColumnRange","methodName":"getStart","parameters":[""],"returnType":"LineAndColumn"},40,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.IntegerLiteralTypeConstructor$Companion","methodName":"findCommonSuperTypeOrIntersectionType","parameters":["Collection","Mode"],"returnType":"SimpleType"},12,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiUtil","methodName":"getScript","parameters":["KtDeclaration"],"returnType":"KtScript"},73,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitModifierList","parameters":["KtModifierList"],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"computeExtraDescriptors","parameters":["LookupLocation"],"returnType":"Collection"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.SamType","methodName":"createByValueParameter","parameters":["ValueParameterDescriptor"],"returnType":"SamType"},87,{"pathToFun":"org.jetbrains.kotlin.psi.KtUserType","methodName":"getTypeArgumentList","parameters":[""],"returnType":"KtTypeArgumentList"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.diagnostics.KotlinSuppressCache","methodName":"getSuppressingStrings","parameters":["KtAnnotated"],"returnType":"Set"},41,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"doGetConstructors","parameters":[""],"returnType":"Collection"},112,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseProperty","parameters":["DeclarationParsingMode"],"returnType":"IElementType"},89,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.data.KtClassInfo","methodName":"getClassKind","parameters":[""],"returnType":"ClassKind"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.checkers.MissingDependencySupertypeChecker","methodName":"checkSupertypes","parameters":["KotlinType","PsiElement","BindingTrace","MissingSupertypesResolver"],"returnType":"Any"},56,{"pathToFun":"org.jetbrains.kotlin.resolve.VarianceCheckerCore","methodName":"recordPrivateToThisIfNeeded","parameters":["CallableMemberDescriptor"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.PostponedArgumentsAnalyzer","methodName":"createSubstituteFunctorForLambdaAnalysis","parameters":["Context"],"returnType":"SubstitutorAndStubsForLambdaAnalysis"},92,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitSuperTypeList","parameters":["KtSuperTypeList"],"returnType":"void"},39,{"pathToFun":"org.jetbrains.kotlin.psi.KtExpressionWithLabel","methodName":"getTargetLabel","parameters":[""],"returnType":"KtSimpleNameExpression"},100,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"isInsideOuterClassOrItsSubclass","parameters":["DeclarationDescriptor","ClassDescriptor"],"returnType":"boolean"},52,{"pathToFun":"org.jetbrains.kotlin.codegen.FrameMapBase","methodName":"leave","parameters":["T"],"returnType":"Int"},86,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyTypeParameterDescriptor","methodName":"resolveUpperBounds","parameters":[""],"returnType":"List"},52,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.LazyDeclarationResolver","methodName":"getClassDescriptor","parameters":["KtClassOrObject","LookupLocation"],"returnType":"ClassDescriptor"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.DefaultParameterValueSubstitutor","methodName":"isEmptyConstructorNeeded","parameters":["ConstructorDescriptor","KtPureClassOrObject"],"returnType":"Boolean"},53,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext","methodName":"addNewIncorporatedConstraint","parameters":["KotlinTypeMarker","KotlinTypeMarker","Boolean","Boolean","Boolean"],"returnType":"Unit"},53,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getUnsubstitutedPrimaryConstructor","parameters":[""],"returnType":"ClassConstructorDescriptor"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"computeCompanionObjectDescriptor","parameters":["KtObjectDeclaration"],"returnType":"ClassDescriptorWithResolutionScopes"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.JvmSignatureWriter","methodName":"writeInterface","parameters":[""],"returnType":"void"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.declarations.PsiBasedClassMemberDeclarationProvider","methodName":"doCreateIndex","parameters":["AbstractPsiBasedDeclarationProvider.Index"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitClass","parameters":["KtClass","D"],"returnType":"R"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorUtils","methodName":"isStaticDeclaration","parameters":["CallableDescriptor"],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.types.checker.TypeIntersector","methodName":"intersectTypes","parameters":["List"],"returnType":"SimpleType"},11,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isNonPrimitiveArray","parameters":["ClassDescriptor"],"returnType":"boolean"},13,{"pathToFun":"org.jetbrains.kotlin.diagnostics.PositioningStrategies$DeclarationHeader","methodName":"isValid","parameters":["T"],"returnType":"Boolean"},10,{"pathToFun":"org.jetbrains.kotlin.psi.KtProperty","methodName":"isTopLevel","parameters":[""],"returnType":"boolean"},81,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"getSharedVarType","parameters":["DeclarationDescriptor"],"returnType":"Type"},108,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"write","parameters":["KtElement","KtElement","PseudoValue","AccessTarget","Map"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.types.DefinitelyNotNullType$Companion","methodName":"makesSenseToBeDefinitelyNotNull","parameters":["UnwrappedType"],"returnType":"Boolean"},17,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitTypeProjection","parameters":["KtTypeProjection"],"returnType":"void"},51,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap","methodName":"setImmutable","parameters":[""],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.descriptors.EffectiveVisibilityKt","methodName":"effectiveVisibility","parameters":["ClassDescriptor","Set","Boolean"],"returnType":"EffectiveVisibility"},112,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.VariableDescriptorImpl","methodName":"getTypeParameters","parameters":[""],"returnType":"List"},108,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.IdentifierInfoKt","methodName":"getIdForSimpleNameExpression","parameters":["KtSimpleNameExpression","BindingContext","DeclarationDescriptor","LanguageVersionSettings"],"returnType":"IdentifierInfo"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.ConstructorCodegen","methodName":"generatePrimaryConstructorImpl","parameters":["ClassConstructorDescriptor","ExpressionCodegen","DelegationFieldsInfo","KtPrimaryConstructor","Type"],"returnType":"void"},53,{"pathToFun":"org.jetbrains.kotlin.descriptors.annotations.AnnotationsImpl","methodName":"isEmpty","parameters":[""],"returnType":"Boolean"},72,{"pathToFun":"org.jetbrains.kotlin.types.TypeUtils","methodName":"hasNullableSuperType","parameters":["KotlinType"],"returnType":"boolean"},77,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.CapturingInClosureChecker","methodName":"checkCapturingInClosure","parameters":["VariableDescriptor","BindingTrace","LexicalScope"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"writeAdditionalConstructorParameters","parameters":["ClassConstructorDescriptor","JvmSignatureWriter"],"returnType":"Unit"},63,{"pathToFun":"org.jetbrains.kotlin.diagnostics.AbstractDiagnostic","methodName":"getPsiFile","parameters":[""],"returnType":"PsiFile"},40,{"pathToFun":"org.jetbrains.kotlin.resolve.LocalVariableResolver","methodName":"resolveLocalVariableDescriptor","parameters":["LexicalScope","KtVariableDeclaration","DataFlowInfo","InferenceSession","BindingTrace"],"returnType":"VariableDescriptor"},72,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"constituentTypes","parameters":["MutableSet","Collection"],"returnType":"Unit"},52,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.ResolveSession","methodName":"getKotlinTypeChecker","parameters":[""],"returnType":"NewKotlinTypeChecker"},111,{"pathToFun":"org.jetbrains.kotlin.contracts.EffectsExtractingVisitor","methodName":"createDataFlowValue","parameters":["KtExpression"],"returnType":"DataFlowValue"},109,{"pathToFun":"org.jetbrains.kotlin.types.KotlinTypeFactory","methodName":"simpleNotNullType","parameters":["Annotations","ClassDescriptor","List"],"returnType":"SimpleType"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitReturnExpression","parameters":["KtReturnExpression","StackValue"],"returnType":"StackValue"},100,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.StackTransformationUtilsKt","methodName":"peek","parameters":["Frame","Int"],"returnType":"V"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.TypeResolver","methodName":"resolvePossiblyBareType","parameters":["TypeResolutionContext","KtTypeReference"],"returnType":"PossiblyBareType"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.NewCommonSuperTypeCalculator","methodName":"allCommonSuperTypeConstructors","parameters":["TypeSystemCommonSuperTypesContext","List","AbstractTypeCheckerContext"],"returnType":"List"},8,{"pathToFun":"org.jetbrains.kotlin.contracts.model.structure.ESKotlinType","methodName":"hashCode","parameters":[""],"returnType":"Int"},35,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.utils.ScopeUtilsKt","methodName":"findFirstClassifierWithDeprecationStatus","parameters":["HierarchicalScope","Name","LookupLocation"],"returnType":"DescriptorWithDeprecation"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"generateSyntheticPartsBeforeBody","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.diagnostics.AbstractDiagnostic","methodName":"getFactory","parameters":[""],"returnType":"DiagnosticFactoryWithPsiElement"},41,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getDeclaredTypeParameters","parameters":[""],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtFunctionLiteral","methodName":"getBodyExpression","parameters":[""],"returnType":"KtBlockExpression"},95,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper$Companion","methodName":"findAnyDeclaration","parameters":["FunctionDescriptor"],"returnType":"FunctionDescriptor"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"isCompanionObject","parameters":[""],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitSuperTypeListEntry","parameters":["KtSuperTypeListEntry","Void"],"returnType":"Void"},39,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitTypeParameterList","parameters":["KtTypeParameterList","D"],"returnType":"R"},53,{"pathToFun":"org.jetbrains.kotlin.diagnostics.DiagnosticFactory1","methodName":"on","parameters":["E","A"],"returnType":"ParametrizedDiagnostic"},33,{"pathToFun":"org.jetbrains.kotlin.types.CommonSupertypes","methodName":"markAll","parameters":["TypeConstructor","Set"],"returnType":"void"},6,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"isLValueOrUnsafeReceiver","parameters":["KtSimpleNameExpression"],"returnType":"boolean"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitProperty","parameters":["KtProperty","StackValue"],"returnType":"StackValue"},72,{"pathToFun":"org.jetbrains.kotlin.psi.KtModifierList","methodName":"getAnnotationEntries","parameters":[""],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtModifierList","methodName":"hasModifier","parameters":["KtModifierKeywordToken"],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.CapturingInClosureChecker","methodName":"isCapturedVariable","parameters":["DeclarationDescriptor","DeclarationDescriptor"],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.types.TypeSubstitutor","methodName":"filterOutUnsafeVariance","parameters":["Annotations"],"returnType":"Annotations"},36,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitProperty","parameters":["KtProperty","Void"],"returnType":"Void"},81,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver$Companion","methodName":"resolveUnknownVisibilities","parameters":["Collection","BindingTrace"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeParameterList","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},53,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorUtils","methodName":"getDefaultConstructorVisibility","parameters":["ClassDescriptor"],"returnType":"Visibility"},53,{"pathToFun":"org.jetbrains.kotlin.psi.VisitorWrappersKt","methodName":"typeReferenceRecursiveVisitor","parameters":["(KtTypeReference) -> Unit"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyTypeParameterDescriptor","methodName":"resolveBoundType","parameters":["KtTypeReference"],"returnType":"KotlinType"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorUtils","methodName":"classCanHaveAbstractDeclaration","parameters":["ClassDescriptor"],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.SuperClassInfo$Companion","methodName":"getSuperClassInfo","parameters":["ClassDescriptor","KotlinTypeMapper"],"returnType":"SuperClassInfo"},112,{"pathToFun":"org.jetbrains.kotlin.types.expressions.FunctionsTypingVisitor","methodName":"computeReturnType","parameters":["KtLambdaExpression","ExpressionTypingContext","SimpleFunctionDescriptorImpl","Boolean"],"returnType":"KotlinType"},95,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CompletionModeCalculator$CalculatorForNestedCall","methodName":"computeCompletionMode","parameters":[""],"returnType":"ConstraintSystemCompletionMode"},24,{"pathToFun":"org.jetbrains.kotlin.resolve.OverridingUtil","methodName":"collectOverriddenDeclarations","parameters":["CallableMemberDescriptor","Set"],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.SamType","methodName":"getClassDescriptor","parameters":[""],"returnType":"ClassDescriptor"},110,{"pathToFun":"org.jetbrains.kotlin.types.model.MarkerExtensionsKt","methodName":"safeSubstitute","parameters":["TypeSubstitutorMarker","TypeSystemInferenceExtensionContext","KotlinTypeMarker"],"returnType":"Any"},93,{"pathToFun":"org.jetbrains.kotlin.parsing.PrecedingCommentsBinder","methodName":"getEdgePosition","parameters":["List","Boolean","WhitespacesAndCommentsBinder.TokenTextGetter"],"returnType":"Int"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl","methodName":"registerVariable","parameters":["TypeVariableMarker"],"returnType":"Unit"},55,{"pathToFun":"org.jetbrains.kotlin.resolve.TypeResolver","methodName":"resolveTypeForClassifier","parameters":["TypeResolutionContext","ClassifierDescriptor","QualifiedExpressionResolver.TypeQualifierResolutionResult","KtElement","Annotations"],"returnType":"PossiblyBareType"},113,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseTypeArgumentList","parameters":[""],"returnType":"Marker"},113,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseClassOrObject","parameters":["boolean","NameParsingMode","boolean","boolean","boolean"],"returnType":"IElementType"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.BoxingInterpreter","methodName":"isExactValue","parameters":["BasicValue"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingServices","methodName":"updateLambdaContextInfoForAnonymousFunction","parameters":["LambdaInfo","KotlinTypeInfo","ExpressionTypingContext"],"returnType":"void"},46,{"pathToFun":"org.jetbrains.kotlin.resolve.LocalVariableResolver","methodName":"resolveLocalVariableDescriptorWithType","parameters":["LexicalScope","KtVariableDeclaration","KotlinType","BindingTrace"],"returnType":"LocalVariableDescriptor"},72,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"evaluateCall","parameters":["KtExpression","KtExpression","KotlinType"],"returnType":"CompileTimeConstant"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CollectionTypeVariableUsagesInfo","methodName":"isContainedInInvariantOrContravariantPositionsAmongUpperBound","parameters":["NewConstraintSystem","TypeConstructorMarker","List"],"returnType":"Boolean"},54,{"pathToFun":"org.jetbrains.kotlin.resolve.BindingContextUtils","methodName":"getNotNull","parameters":["BindingContext","ReadOnlySlice","K","String"],"returnType":"V"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallExpressionResolver","methodName":"getSimpleNameExpressionTypeInfo","parameters":["KtSimpleNameExpression","Receiver","ASTNode","ExpressionTypingContext","DataFlowInfo"],"returnType":"KotlinTypeInfo"},112,{"pathToFun":"org.jetbrains.kotlin.storage.LockBasedLazyResolveStorageManager$LockProtectedTrace","methodName":"get","parameters":["ReadOnlySlice","K"],"returnType":"V"},69,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.instructions.eval.WriteValueInstruction","methodName":"accept","parameters":["InstructionVisitor"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"mapType","parameters":["ClassifierDescriptor"],"returnType":"Type"},69,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.MutableVariableWithConstraints","methodName":"simplifyConstraints","parameters":["SmartList"],"returnType":"SmartList"},50,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"applyIntrinsic","parameters":["DeclarationDescriptor","Class","ResolvedCall","StackValue"],"returnType":"StackValue"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiUtil","methodName":"prevLeafIgnoringWhitespaceAndComments","parameters":["PsiElement"],"returnType":"PsiElement"},95,{"pathToFun":"org.jetbrains.kotlin.types.TypeUtils","methodName":"makeNullableIfNeeded","parameters":["KotlinType","boolean"],"returnType":"KotlinType"},113,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.ClassDescriptorBase","methodName":"isExternal","parameters":[""],"returnType":"boolean"},113,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.FunctionDescriptorImpl\\$CopyConfiguration","methodName":"setValueParameters","parameters":["List"],"returnType":"CopyConfiguration"},63,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.NewCommonSuperTypeCalculator","methodName":"uniquify","parameters":["TypeSystemCommonSuperTypesContext","List","AbstractTypeCheckerContext"],"returnType":"List"},12,{"pathToFun":"org.jetbrains.kotlin.types.TypeSubstitutor","methodName":"combine","parameters":["Variance","TypeProjection"],"returnType":"Variance"},14,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.AnnotationsWhitelistDescriptorRendererKt","methodName":"withAnnotationsWhitelist","parameters":["DescriptorRenderer","DescriptorRenderer.() -> DiagnosticParameterRenderer"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitLambdaExpression","parameters":["KtLambdaExpression","Void"],"returnType":"Void"},95,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitSuperTypeList","parameters":["KtSuperTypeList","Void"],"returnType":"Void"},39,{"pathToFun":"org.jetbrains.kotlin.resolve.BindingContextUtils","methodName":"isCapturedInClosure","parameters":["BindingContext","DeclarationDescriptor"],"returnType":"boolean"},108,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"mapType","parameters":["CallableDescriptor"],"returnType":"Type"},108,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.data.KtClassOrObjectInfo","methodName":"getCorrespondingClassOrObject","parameters":[""],"returnType":"KtClassOrObject"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.NonExpansiveInheritanceRestrictionChecker$GraphBuilder","methodName":"build","parameters":[""],"returnType":"Graph"},52,{"pathToFun":"org.jetbrains.kotlin.codegen.callableReferenceUtilKt","methodName":"isSyntheticClassForCallableReference","parameters":["ClassDescriptor"],"returnType":"Boolean"},109,{"pathToFun":"org.jetbrains.kotlin.codegen.InterfaceImplBodyCodegen$InterfaceImplClassBuilder","methodName":"stopCounting","parameters":[""],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseTypeRefContents","parameters":["TokenSet"],"returnType":"Marker"},113,{"pathToFun":"org.jetbrains.kotlin.diagnostics.PositioningStrategies","methodName":"mark","parameters":["KtNamedDeclaration"],"returnType":"List"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.ClosureGenerationStrategy","methodName":"doGenerateBody","parameters":["ExpressionCodegen","JvmMethodSignature"],"returnType":"Unit"},96,{"pathToFun":"org.jetbrains.kotlin.types.SubstitutionUtils","methodName":"buildDeepSubstitutionMultimap","parameters":["KotlinType"],"returnType":"Multimap"},112,{"pathToFun":"org.jetbrains.kotlin.descriptors.annotations.CompositeAnnotations","methodName":"iterator","parameters":[""],"returnType":"Any"},76,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"recordLocalVariablePropertyMetadata","parameters":["LocalVariableDescriptor"],"returnType":"void"},72,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitTypeParameterList","parameters":["KtTypeParameterList"],"returnType":"void"},53,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"recordClosure","parameters":["ClassDescriptor","String"],"returnType":"MutableClosure"},113,{"pathToFun":"org.jetbrains.kotlin.resolve.TypeResolver","methodName":"buildFinalArgumentList","parameters":["List","List","List"],"returnType":"List"},113,{"pathToFun":"org.jetbrains.kotlin.builtins.functionTypesKt","methodName":"getReceiverTypeFromFunctionType","parameters":["KotlinType"],"returnType":"KotlinType"},108,{"pathToFun":"org.jetbrains.kotlin.codegen.CollectionStubMethodGenerator","methodName":"findRelevantSuperCollectionClasses","parameters":[""],"returnType":"Collection"},53,{"pathToFun":"org.jetbrains.kotlin.resolve.BindingContextUtils","methodName":"getDelegationConstructorCall","parameters":["BindingContext","ConstructorDescriptor"],"returnType":"ResolvedCall"},53,{"pathToFun":"org.jetbrains.kotlin.resolve.TypeResolver","methodName":"resolveTypeProjections","parameters":["TypeResolutionContext","TypeConstructor","List"],"returnType":"List"},113,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.instructions.InstructionVisitor","methodName":"visitVariableDeclarationInstruction","parameters":["VariableDeclarationInstruction"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.psi.KtElementImplStub","methodName":"acceptChildren","parameters":["KtVisitor","D"],"returnType":"void"},101,{"pathToFun":"org.jetbrains.kotlin.psi.KtClassOrObject","methodName":"isAnnotation","parameters":[""],"returnType":"Boolean"},49,{"pathToFun":"org.jetbrains.kotlin.types.checker.TypeIntersector$ResultNullability$START","methodName":"combine","parameters":["UnwrappedType"],"returnType":"Any"},11,{"pathToFun":"org.jetbrains.kotlin.codegen.context.ClosureContext","methodName":"getClassForCallable","parameters":["KotlinTypeMapper","FunctionDescriptor","FunctionDescriptor"],"returnType":"ClassDescriptor"},109,{"pathToFun":"org.jetbrains.kotlin.codegen.serialization.JvmSerializerExtension","methodName":"serializeTypeParameter","parameters":["TypeParameterDescriptor","ProtoBuf.TypeParameter.Builder"],"returnType":"Unit"},53,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"addSyntheticNestedClasses","parameters":["MutableCollection","LookupLocation"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker\\$CallImpl","methodName":"getExplicitReceiver","parameters":[""],"returnType":"Receiver"},112,{"pathToFun":"org.jetbrains.kotlin.psi.KtExpressionWithLabel","methodName":"getLabelName","parameters":[""],"returnType":"String"},100,{"pathToFun":"org.jetbrains.kotlin.codegen.JvmRuntimeTypes","methodName":"getSupertypesForClosure","parameters":["FunctionDescriptor"],"returnType":"Collection"},96,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.TowerLevelsKt","methodName":"getInnerConstructors","parameters":["KotlinType?","Name","LookupLocation"],"returnType":"Collection"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.OverridingUtil","methodName":"overrides","parameters":["D","D","boolean","boolean"],"returnType":"boolean"},50,{"pathToFun":"org.jetbrains.kotlin.types.expressions.typeInfoFactory.TypeInfoFactoryKt","methodName":"createTypeInfo","parameters":["KotlinType","ResolutionContext"],"returnType":"KotlinTypeInfo"},111,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext","methodName":"addNewIncorporatedConstraintFromDeclaredUpperBound","parameters":["Runnable"],"returnType":"Unit"},9,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.VariableControlFlowState$Companion","methodName":"create","parameters":["Boolean","Boolean"],"returnType":"VariableControlFlowState"},112,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"newValue","parameters":["KtElement"],"returnType":"PseudoValue"},101,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyTypeParameterDescriptor","methodName":"getUpperBoundsFromWhereClause","parameters":[""],"returnType":"Collection"},52,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingUtils","methodName":"checkVariableShadowing","parameters":["LexicalScope","BindingTrace","VariableDescriptor"],"returnType":"void"},109,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseTypeParameter","parameters":[""],"returnType":"void"},53,{"pathToFun":"org.jetbrains.kotlin.diagnostics.PositioningStrategyKt","methodName":"getStartOffset","parameters":["PsiElement"],"returnType":"Int"},40,{"pathToFun":"org.jetbrains.kotlin.psi.KtClassBody","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"initializeObjects","parameters":[""],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.ConstructorCodegen","methodName":"generatePrimaryConstructor","parameters":["DelegationFieldsInfo","Type"],"returnType":"void"},112,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ReturnableBlockTransformer","methodName":"visitReturn","parameters":["IrReturn"],"returnType":"IrExpression"},113,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"shouldRenderParameterNames","parameters":["Boolean"],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitContainerExpression","parameters":["IrContainerExpression"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.ir.declarations.IrClassKt","methodName":"addMember","parameters":["IrClass","IrDeclaration"],"returnType":"Unit"},53,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitSetField","parameters":["IrSetField","Nothing"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedClassConstructorDescriptor","methodName":"getConstructedClass","parameters":[""],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.backend.common.CheckIrElementVisitor","methodName":"visitGetField","parameters":["IrGetField"],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer","methodName":"createTransformedConstructorDeclaration","parameters":["LocalClassConstructorContext"],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitInstanceInitializerCall","parameters":["IrInstanceInitializerCall","D"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrReturnImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},113,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.MethodSignatureMapper","methodName":"isBoxMethodForInlineClass","parameters":["IrFunction"],"returnType":"Boolean"},113,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitSimpleNameExpression","parameters":["KtSimpleNameExpression","Nothing"],"returnType":"IrExpression"},112,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopyTypeRemapper","methodName":"remapType","parameters":["IrType"],"returnType":"IrType"},113,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"generateExpressionForReferencedDescriptor","parameters":["DeclarationDescriptor","KtExpression","ResolvedCall"],"returnType":"IrExpression"},112,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},112,{"pathToFun":"org.jetbrains.kotlin.backend.common.serialization.IrModuleDeserializerWithBuiltIns","methodName":"resolveFunctionalInterface","parameters":["IdSignature","BinarySymbolData.SymbolKind"],"returnType":"IrSymbol"},111,{"pathToFun":"org.jetbrains.kotlin.backend.common.ir.IrUtilsKt","methodName":"copyTypeParametersFrom","parameters":["IrTypeParametersContainer","IrTypeParametersContainer","IrDeclarationOrigin","Map"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrTypeOperatorCallImpl","methodName":"acceptChildren","parameters":["IrElementVisitor","D"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.ir.declarations.impl.IrTypeParameterImpl","methodName":"transform","parameters":["IrElementTransformer","D"],"returnType":"IrTypeParameter"},53,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedClassConstructorDescriptor","methodName":"getValueParameters","parameters":[""],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.DescriptorBasedClassCodegen","methodName":"bindFieldMetadata","parameters":["IrField","Type","String"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"getVariance","parameters":["TypeArgumentMarker"],"returnType":"TypeVariance"},77,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitValueAccess","parameters":["IrValueAccessExpression","D"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitReturnExpression","parameters":["KtReturnExpression","Nothing"],"returnType":"IrStatement"},100,{"pathToFun":"org.jetbrains.kotlin.ir.builders.IrBlockBuilder","methodName":"addStatement","parameters":["IrStatement"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt","methodName":"getSuperClassOrAny","parameters":["ClassDescriptor"],"returnType":"ClassDescriptor"},52,{"pathToFun":"org.jetbrains.kotlin.renderer.RenderingUtilsKt","methodName":"renderFqName","parameters":["List"],"returnType":"String"},112,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderModality","parameters":["Modality","StringBuilder","Modality"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"overridesSomething","parameters":["CallableMemberDescriptor"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"visitGetValue","parameters":["IrGetValue","BlockInfo"],"returnType":"PromisedValue"},112,{"pathToFun":"org.jetbrains.kotlin.backend.common.serialization.mangle.descriptor.DescriptorExportCheckerVisitor","methodName":"visitValueParameterDescriptor","parameters":["ValueParameterDescriptor","SpecialDeclarationType"],"returnType":"Boolean"},105,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitSingletonReference","parameters":["IrGetSingletonValue"],"returnType":"Any"},21,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.InventNamesForLocalClasses$NameInventor","methodName":"visitFunctionReference","parameters":["IrFunctionReference","Data"],"returnType":"Unit"},109,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitSetField","parameters":["IrSetField","D"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer$FunctionBodiesRewriter","methodName":"mapValueParameters","parameters":["T","IrFunction","(IrValueParameter) -> IrExpression"],"returnType":"T"},110,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"pop","parameters":["MethodVisitor","Type"],"returnType":"void"},45,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"recordExpectedLambdaReturnTypeIfAppropriate","parameters":["IrFunctionExpression","KotlinType","KotlinType"],"returnType":"Unit"},98,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrTerminalDeclarationReferenceBase","methodName":"transformChildren","parameters":["IrElementTransformer","D"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.backend.common.ir.IrUtilsKt","methodName":"copyParameterDeclarationsFrom","parameters":["IrFunction","IrFunction"],"returnType":"Unit"},105,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitFunctionReference","parameters":["IrFunctionReference","Nothing"],"returnType":"Any"},109,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FieldAccessTransformer","methodName":"visitGetField","parameters":["IrGetField"],"returnType":"IrExpression"},111,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmLocalClassPopupLowering","methodName":"shouldPopUp","parameters":["IrClass","ScopeWithIr"],"returnType":"Boolean"},110,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper","methodName":"getReferenced","parameters":["Map","T"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable$ScopedSymbolTable","methodName":"set","parameters":["D","S"],"returnType":"Unit"},26,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrBlockImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},113,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrFunctionReferenceImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},109,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedClassDescriptor","methodName":"getOriginal","parameters":[""],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitBlock","parameters":["IrBlock","Nothing"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.declarationStartOffsetKt","methodName":"getStartOffsetOfClassDeclarationOrNull","parameters":["KtPureClassOrObject"],"returnType":"Int"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"visitClass","parameters":["IrClass","BlockInfo"],"returnType":"PromisedValue"},109,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"shouldRenderAsPrettyFunctionType","parameters":["KotlinType"],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"implicitModalityWithoutExtensions","parameters":["MemberDescriptor"],"returnType":"Modality"},112,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.FunctionGenerator","methodName":"generateReceiverParameterDeclaration","parameters":["ReceiverParameterDescriptor","KtPureElement","IrElement"],"returnType":"IrValueParameter"},112,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irBlock","parameters":["IrBuilderWithScope","Int","Int","IrStatementOrigin","IrType","IrBlockBuilder.() -> Unit"],"returnType":"IrContainerExpression"},109,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.SubstitutingScope","methodName":"getContributedDescriptors","parameters":["DescriptorKindFilter","(Name) -> Boolean"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.ir.declarations.impl.IrTypeParameterImpl","methodName":"acceptChildren","parameters":["IrElementVisitor","D"],"returnType":"Unit"},53,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ArgumentsGenerationUtilsKt","methodName":"getTypeArguments","parameters":["ResolvedCall"],"returnType":"Map"},109,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitTypeParameter","parameters":["IrTypeParameter"],"returnType":"Any"},53,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitConstructorCall","parameters":["IrConstructorCall","D"],"returnType":"IrElement"},113,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ClosureAnnotator","methodName":"collectPotentiallyCapturedTypeParameters","parameters":["ClosureBuilder"],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrFunctionFactory$FunctionDescriptorFactory$RealDescriptorFactory","methodName":"valueParameterDescriptor","parameters":["FunctionDescriptor","Int"],"returnType":"ValueParameterDescriptor"},74,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.InventNamesForLocalClasses$NameInventor","methodName":"inventName","parameters":["Name","Data"],"returnType":"String"},110,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrReturnImpl","methodName":"transformChildren","parameters":["IrElementTransformer","D"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitCallableReference","parameters":["IrCallableReference"],"returnType":"Any"},109,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ClosureAnnotator$ClosureCollectorVisitor","methodName":"processMemberAccess","parameters":["IrDeclaration","ClosureBuilder"],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.JvmSignatureClashDetector","methodName":"getOverriddenFunctions","parameters":["IrSimpleFunction"],"returnType":"Set"},113,{"pathToFun":"org.jetbrains.kotlin.backend.common.CheckIrElementVisitor","methodName":"visitTypeOperator","parameters":["IrTypeOperatorCall"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl","methodName":"copy","parameters":[""],"returnType":"IrGetValue"},105,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitGetField","parameters":["IrGetField","D"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.ir.declarations.impl.IrFieldImpl","methodName":"transformChildren","parameters":["IrElementTransformer","D"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.ir.declarations.impl.IrFieldImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},111,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedClassConstructorDescriptor","methodName":"getContainingDeclaration","parameters":[""],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitContainerExpression","parameters":["IrContainerExpression","D"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.backend.common.CheckIrElementVisitor","methodName":"visitReturn","parameters":["IrReturn"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.DefaultParameterInjector","methodName":"visitConstructorCall","parameters":["IrConstructorCall"],"returnType":"IrExpression"},113,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitGetValue","parameters":["IrGetValue"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.UninitializedStoresProcessor$UninitializedNewValueMarkerInterpreter","methodName":"analyzePop","parameters":["AbstractInsnNode","Frame"],"returnType":"Unit"},61,{"pathToFun":"org.jetbrains.kotlin.backend.common.ir.IrUtilsKt","methodName":"isMethodOfAny","parameters":["IrSimpleFunction"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.types.AbstractTypeApproximator","methodName":"isTrivialSuper","parameters":["KotlinTypeMarker"],"returnType":"Any"},13,{"pathToFun":"org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl","methodName":"acceptChildren","parameters":["IrElementVisitor","D"],"returnType":"Unit"},86,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrFunctionFactory","methodName":"functionClassDescriptor","parameters":["Int"],"returnType":"FunctionClassDescriptor"},111,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitTypeParameter","parameters":["IrTypeParameter","Nothing"],"returnType":"IrStatement"},53,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"visitBlock","parameters":["IrBlock","BlockInfo"],"returnType":"PromisedValue"},113,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrFunctionFactory","methodName":"functionN","parameters":["Int","SymbolTable.((IrClassSymbol) -> IrClass) -> IrClass"],"returnType":"IrClass"},111,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrTypeOperatorCallImpl","methodName":"transformChildren","parameters":["IrElementTransformer","D"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrFunctionFactory$FunctionDescriptorFactory$RealDescriptorFactory","methodName":"memberDescriptor","parameters":["String","(IrSimpleFunctionSymbol) -> IrSimpleFunction"],"returnType":"IrSimpleFunctionSymbol"},111,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedClassConstructorDescriptor","methodName":"getOriginal","parameters":[""],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"toIrType","parameters":["KotlinType"],"returnType":"Any"},86,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrTerminalDeclarationReferenceBase","methodName":"acceptChildren","parameters":["IrElementVisitor","D"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractTypeParameterDescriptor\\$TypeParameterTypeConstructor","methodName":"isDenotable","parameters":[""],"returnType":"boolean"},65,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitField","parameters":["IrField"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"visitClass","parameters":["IrClass"],"returnType":"IrStatement"},112,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.BodyGenerator","methodName":"generateSuperConstructorCall","parameters":["IrBlockBodyImpl","KtPureClassOrObject"],"returnType":"Unit"},53,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ClosureAnnotator$ClosureBuilder","methodName":"buildClosure","parameters":[""],"returnType":"Closure"},110,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderName","parameters":["Name","Boolean"],"returnType":"String"},112,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrDelegatingConstructorCallImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},113,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.EnumWhenLowering","methodName":"visitBlock","parameters":["IrBlock"],"returnType":"IrExpression"},105,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.BridgeLowering","methodName":"copyWithTypeErasure","parameters":["IrValueParameter","IrSimpleFunction","Boolean"],"returnType":"IrValueParameter"},57,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"generateNonNullAssertion","parameters":["IrValueParameter"],"returnType":"Unit"},106,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ArgumentsGenerationUtilsKt","methodName":"generateReceiver","parameters":["StatementGenerator","KtElement","ReceiverValue"],"returnType":"IntermediateValue"},111,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitGetField","parameters":["IrGetField","Nothing"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper","methodName":"visitBlock","parameters":["IrBlock"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderType","parameters":["KotlinType"],"returnType":"String"},112,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable","methodName":"declareValueParameter","parameters":["Int","Int","IrDeclarationOrigin","ParameterDescriptor","IrType","IrType","(IrValueParameterSymbol) -> IrValueParameter"],"returnType":"IrValueParameter"},112,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable$FlatSymbolTable","methodName":"get","parameters":["IdSignature"],"returnType":"S"},111,{"pathToFun":"org.jetbrains.kotlin.ir.declarations.impl.IrFieldImpl","methodName":"acceptChildren","parameters":["IrElementVisitor","D"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitExpressionBody","parameters":["IrExpressionBody"],"returnType":"Any"},107,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitExpressionBody","parameters":["IrExpressionBody","D"],"returnType":"Any"},107,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"getVariance","parameters":["TypeParameterMarker"],"returnType":"Any"},77,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderFunction","parameters":["FunctionDescriptor","StringBuilder"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.IrTypeMapper","methodName":"mapClass","parameters":["ClassifierDescriptor"],"returnType":"Type"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FunctionReferenceLowering","methodName":"visitTypeOperator","parameters":["IrTypeOperatorCall"],"returnType":"IrExpression"},111,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer","methodName":"rewriteFunctionBody","parameters":["IrElement","LocalContext"],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ClassGenerator","methodName":"generateDeclarationsForPrimaryConstructorParameters","parameters":["IrClass","IrConstructor","KtPureClassOrObject"],"returnType":"Unit"},53,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitVariableAccess","parameters":["IrValueAccessExpression"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.BridgeLowering","methodName":"copyParametersWithErasure","parameters":["IrSimpleFunction","IrClass","IrSimpleFunction","Boolean"],"returnType":"Unit"},79,{"pathToFun":"org.jetbrains.kotlin.ir.util.IrUtilsKt","methodName":"getTypeSubstitutionMap","parameters":["IrMemberAccessExpression","IrFunction"],"returnType":"Map"},108,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"cast","parameters":["IrExpression","IrType"],"returnType":"IrExpression"},112,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer","methodName":"createTransformedValueParameters","parameters":["List","LocalContext","IrFunction","IrFunction"],"returnType":"Any"},110,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitVariable","parameters":["IrVariable","Nothing"],"returnType":"Any"},86,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitSetField","parameters":["IrSetField"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.builtins.functions.FunctionInvokeDescriptor$Factory","methodName":"createValueParameter","parameters":["FunctionInvokeDescriptor","Int","TypeParameterDescriptor"],"returnType":"ValueParameterDescriptor"},75,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase","methodName":"transformChildren","parameters":["IrElementTransformer","D"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitDeclarationReference","parameters":["IrDeclarationReference"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitReturn","parameters":["IrReturn"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"visitReturn","parameters":["IrReturn","BlockInfo"],"returnType":"PromisedValue"},113,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrFunctionFactory$Companion","methodName":"functionClassName","parameters":["Boolean","Boolean","Int"],"returnType":"String"},111,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitProperty","parameters":["KtProperty","Nothing"],"returnType":"IrStatement"},72,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderTypeConstructorAndArguments","parameters":["StringBuilder","KotlinType","TypeConstructor"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitDelegatingConstructorCall","parameters":["IrDelegatingConstructorCall"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer$FunctionBodiesRewriter","methodName":"visitConstructorCall","parameters":["IrConstructorCall"],"returnType":"IrExpression"},110,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrTypeOperatorCallImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},111,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitGetObjectValue","parameters":["IrGetObjectValue"],"returnType":"Any"},21,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.InventNamesForLocalClasses$NameInventor","methodName":"visitConstructor","parameters":["IrConstructor","Data"],"returnType":"Unit"},53,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderModalityForCallable","parameters":["CallableMemberDescriptor","StringBuilder"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitGetField","parameters":["IrGetField"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ClassGenerator","methodName":"generateMembersDeclaredInSupertypeList","parameters":["IrClass","KtClassOrObject"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.ir.types.impl.IrStarProjectionImpl","methodName":"hashCode","parameters":[""],"returnType":"Int"},37,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"isNullableType","parameters":["KotlinTypeMarker"],"returnType":"Boolean"},113,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitField","parameters":["IrField","Nothing"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.JvmSignatureClashDetector","methodName":"mapRawSignature","parameters":["IrFunction"],"returnType":"RawSignature"},113,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.IrFrameMap","methodName":"typeOf","parameters":["IrSymbol"],"returnType":"Type"},112,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer$FunctionBodiesRewriter","methodName":"visitDeclaration","parameters":["IrDeclaration"],"returnType":"IrStatement"},110,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.FunctionGenerator","methodName":"generateLambdaFunctionDeclaration","parameters":["KtFunctionLiteral"],"returnType":"IrSimpleFunction"},95,{"pathToFun":"org.jetbrains.kotlin.psi2ir.intermediate.OnceExpressionValueKt","methodName":"generateDelegatedValue","parameters":["IrType","() -> IntermediateValue"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitExpressionBody","parameters":["IrExpressionBody","Nothing"],"returnType":"Any"},107,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitDelegatingConstructorCall","parameters":["IrDelegatingConstructorCall","D"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.BridgeLowering","methodName":"irCastIfNeeded","parameters":["IrBuilderWithScope","IrExpression","IrType"],"returnType":"IrExpression"},79,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitDotQualifiedExpression","parameters":["KtDotQualifiedExpression","Nothing"],"returnType":"IrStatement"},111,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer","methodName":"transformDeclarations","parameters":[""],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.LocalVariableDescriptor","methodName":"accept","parameters":["DeclarationDescriptorVisitor","D"],"returnType":"R"},76,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitVariable","parameters":["IrVariable"],"returnType":"Any"},86,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrFunctionFactory$FunctionDescriptorFactory$RealDescriptorFactory","methodName":"typeParameterDescriptor","parameters":["Int","(IrTypeParameterSymbol) -> IrTypeParameter"],"returnType":"IrTypeParameterSymbol"},111,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitField","parameters":["IrField"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.FunctionGenerator","methodName":"declareConstructor","parameters":["KtPureElement","KtPureElement","ClassConstructorDescriptor","BodyGenerator.() -> IrBody"],"returnType":"IrConstructor"},53,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitConstructor","parameters":["IrConstructor","Nothing"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.types.TypeApproximatorConfiguration","methodName":"capturedType","parameters":["TypeSystemInferenceExtensionContext","CapturedTypeMarker"],"returnType":"Boolean"},14,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FunctionReferenceLowering$FunctionReferenceBuilder","methodName":"build","parameters":[""],"returnType":"IrExpression"},108,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"getReturnExpressionTarget","parameters":["KtReturnExpression"],"returnType":"CallableDescriptor"},100,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitReturn","parameters":["IrReturn","Nothing"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer","methodName":"collectClosureForLocalDeclarations","parameters":[""],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderNormalizedType","parameters":["StringBuilder","KotlinType"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ClosureAnnotator$ClosureCollectorVisitor","methodName":"visitVariable","parameters":["IrVariable","ClosureBuilder"],"returnType":"Unit"},73,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.MethodSignatureMapper","methodName":"forceBoxedReturnType","parameters":["IrFunction"],"returnType":"Boolean"},113,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.LocalFunctionGenerator","methodName":"generateLambda","parameters":["KtLambdaExpression"],"returnType":"IrStatement"},95,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ArrayConstructorTransformer","methodName":"visitConstructorCall","parameters":["IrConstructorCall"],"returnType":"IrExpression"},59,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitDelegatingConstructorCall","parameters":["IrDelegatingConstructorCall","Nothing"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LowerUtilsKt","methodName":"callsSuper","parameters":["IrConstructor","IrBuiltIns"],"returnType":"Boolean"},110,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.IrBuildingTransformer","methodName":"visitField","parameters":["IrField"],"returnType":"IrStatement"},111,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderTypeConstructor","parameters":["TypeConstructor"],"returnType":"String"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.SingletonReferencesLowering","methodName":"visitGetObjectValue","parameters":["IrGetObjectValue"],"returnType":"IrExpression"},21,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRenderer$ValueParametersHandler$DEFAULT","methodName":"appendAfterValueParameter","parameters":["ValueParameterDescriptor","Int","Int","StringBuilder"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer$FunctionBodiesRewriter","methodName":"visitDeclarationReference","parameters":["IrDeclarationReference"],"returnType":"IrExpression"},40,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitReturn","parameters":["IrReturn","D"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderNormalizedTypeAsIs","parameters":["StringBuilder","KotlinType"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.BodyGenerator","methodName":"generateReturnExpression","parameters":["Int","Int","IrExpression"],"returnType":"IrReturnImpl"},95,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.StaticLambdaLowering","methodName":"visitConstructorCall","parameters":["IrConstructorCall"],"returnType":"IrExpression"},113,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitContainerExpression","parameters":["IrContainerExpression","D"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderAdditionalModifiers","parameters":["FunctionDescriptor","StringBuilder"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.StaticLambdaLowering","methodName":"visitMemberAccess","parameters":["IrMemberAccessExpression"],"returnType":"Unit"},86,{"pathToFun":"org.jetbrains.kotlin.backend.common.CheckIrElementVisitor","methodName":"visitDelegatingConstructorCall","parameters":["IrDelegatingConstructorCall"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.types.TypeUtils","methodName":"isDontCarePlaceholder","parameters":["KotlinType"],"returnType":"boolean"},112,{"pathToFun":"org.jetbrains.kotlin.backend.common.IrElementVisitorVoidWithContext","methodName":"visitField","parameters":["IrField"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitField","parameters":["IrField","D"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitField","parameters":["IrField","D"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.DeclarationGenerator","methodName":"generateClassOrObjectDeclaration","parameters":["KtPureClassOrObject"],"returnType":"IrClass"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"visitContainerExpression","parameters":["IrContainerExpression","BlockInfo"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderTypeParameters","parameters":["List","StringBuilder","Boolean"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"createStarProjection","parameters":["TypeParameterMarker"],"returnType":"TypeArgumentMarker"},4,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.PromisedValueKt","methodName":"materialized","parameters":["PromisedValue"],"returnType":"MaterialValue"},113,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.StaticLambdaLowering","methodName":"visitElement","parameters":["IrElement"],"returnType":"Unit"},86,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitGetField","parameters":["IrGetField","Nothing"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitFunctionExpression","parameters":["IrFunctionExpression","Nothing"],"returnType":"Any"},98,{"pathToFun":"org.jetbrains.kotlin.renderer.RenderingUtilsKt","methodName":"shouldBeEscaped","parameters":["Name"],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ClassGenerator","methodName":"generateMembersDeclaredInClassBody","parameters":["IrClass","KtPureClassOrObject"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.ir.declarations.impl.IrTypeParameterImpl","methodName":"transformChildren","parameters":["IrElementTransformer","D"],"returnType":"Unit"},53,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.SpecialBridgeMethods","methodName":"getSpecialMethodInfo","parameters":["IrSimpleFunction"],"returnType":"SpecialMethodWithDefaultInfo"},113,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ClosureAnnotator","methodName":"includeInParent","parameters":["ClosureBuilder"],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrConstructorCallImpl$Companion","methodName":"fromSymbolOwner","parameters":["Int","Int","IrType","IrConstructorSymbol","Int","IrStatementOrigin"],"returnType":"IrConstructorCallImpl"},110,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ArgumentsGenerationUtilsKt","methodName":"generateReceiver","parameters":["StatementGenerator","Int","Int","ReceiverValue"],"returnType":"IntermediateValue"},111,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"getSuperTypes","parameters":["TypeParameterMarker"],"returnType":"Any"},53,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.IrTypeMapper","methodName":"writeGenericArguments","parameters":["JvmSignatureWriter","List","List","TypeMappingMode"],"returnType":"Any"},82,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrFunctionExpressionImpl","methodName":"transformChildren","parameters":["IrElementTransformer","D"],"returnType":"Unit"},98,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitConstructor","parameters":["IrConstructor","D"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable","methodName":"referenceValue","parameters":["ValueDescriptor"],"returnType":"IrValueSymbol"},110,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"isNothingConstructor","parameters":["TypeConstructorMarker"],"returnType":"Boolean"},81,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ClosureAnnotator$ClosureBuilder","methodName":"seeVariable","parameters":["IrValueSymbol"],"returnType":"Unit"},98,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitTypeOperator","parameters":["IrTypeOperatorCall","Nothing"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.DeclarationGenerator","methodName":"generateFakeOverrideDeclaration","parameters":["CallableMemberDescriptor","KtPureElement"],"returnType":"IrDeclaration"},112,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitBlock","parameters":["IrBlock"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitGetField","parameters":["IrGetField","D"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrGetFieldImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},111,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.SpecialBridgeMethods","methodName":"isBuiltInWithDifferentJvmName","parameters":["IrSimpleFunction"],"returnType":"Boolean"},113,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.JvmLowerKt","methodName":"forConstructor","parameters":["IrConstructor","Boolean"],"returnType":"Visibility"},110,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitVariable","parameters":["IrVariable","D"],"returnType":"Any"},86,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer$FunctionBodiesRewriter","methodName":"visitFunction","parameters":["IrFunction"],"returnType":"IrStatement"},110,{"pathToFun":"org.jetbrains.kotlin.backend.common.CheckIrElementVisitor","methodName":"visitGetObjectValue","parameters":["IrGetObjectValue"],"returnType":"Unit"},21,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.irCodegenUtilsKt","methodName":"isOptionalAnnotationClass","parameters":["IrClass"],"returnType":"Boolean"},111,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.JvmGeneratorExtensions","methodName":"getParentClassStaticScope","parameters":["ClassDescriptor"],"returnType":"MemberScope"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.descriptors.JvmDeclarationFactory","methodName":"getDefaultImplsClass","parameters":["IrClass"],"returnType":"IrClass"},110,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.PossiblyInnerIrType","methodName":"segments","parameters":[""],"returnType":"List"},82,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitFunctionReference","parameters":["IrFunctionReference","Nothing"],"returnType":"IrElement"},109,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer$FunctionBodiesRewriter","methodName":"visitGetValue","parameters":["IrGetValue"],"returnType":"IrExpression"},98,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable$ScopedSymbolTable$Scope","methodName":"get","parameters":["D"],"returnType":"S"},111,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrSetFieldImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},111,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedFieldDescriptor","methodName":"isExternal","parameters":[""],"returnType":"Any"},110,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitGetObjectValue","parameters":["IrGetObjectValue"],"returnType":"Any"},21,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"typeConstructor","parameters":["CapturedTypeMarker"],"returnType":"CapturedTypeConstructorMarker"},14,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.DeclarationGenerator","methodName":"generateClassMemberDeclaration","parameters":["KtDeclaration","IrClass"],"returnType":"IrDeclaration"},111,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer","methodName":"rewriteDeclarations","parameters":[""],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpressionKt","methodName":"putArgument","parameters":["IrMemberAccessExpression","IrFunction","IrValueParameter","IrExpression"],"returnType":"Any"},89,{"pathToFun":"org.jetbrains.kotlin.ir.builders.IrElementBuilderKt","methodName":"setSourceRange","parameters":["IrElementBuilder","IrElement"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrFunctionFactory","methodName":"createFunctionClass","parameters":["IrClassSymbol","Boolean","Boolean","Int","IrClassSymbol","IrPackageFragment","FunctionDescriptorFactory"],"returnType":"IrClass"},111,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.declarationStartOffsetKt","methodName":"getStartOffsetOfConstructorDeclarationKeywordOrNull","parameters":["KtPureElement"],"returnType":"Int"},53,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrSetFieldImpl","methodName":"acceptChildren","parameters":["IrElementVisitor","D"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.StackPeepholeOptimizationsTransformer","methodName":"isEliminatedByPop","parameters":["AbstractInsnNode"],"returnType":"Any"},61,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitFunctionExpression","parameters":["IrFunctionExpression"],"returnType":"Any"},98,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRenderer$ValueParametersHandler$DEFAULT","methodName":"appendBeforeValueParameters","parameters":["Int","StringBuilder"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitBlock","parameters":["IrBlock","D"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitConstructorCall","parameters":["IrConstructorCall","Nothing"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FunctionReferenceLowering$FunctionReferenceBuilder","methodName":"createLambdaInvokeMethod","parameters":["IrSimpleFunction"],"returnType":"Unit"},93,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitConstructorCall","parameters":["IrConstructorCall","D"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.types.StarProjectionImpl","methodName":"getProjectionKind","parameters":[""],"returnType":"Any"},37,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.IfNullExpressionsFusionLowering$Transformer","methodName":"fuseIfNull","parameters":["IrBlock"],"returnType":"IrExpression"},113,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ArgumentsGenerationUtilsKt","methodName":"implicitCastTo","parameters":["IrExpression","IrType"],"returnType":"IrExpression"},110,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.descriptors.JvmDeclarationFactory","methodName":"getFieldForObjectInstance","parameters":["IrClass"],"returnType":"IrField"},90,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable","methodName":"declareClassFromLinker","parameters":["ClassDescriptor","IdSignature","(IrClassSymbol) -> IrClass"],"returnType":"IrClass"},111,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen","methodName":"generateAnnotationDefaultValueIfNeeded","parameters":["MethodVisitor"],"returnType":"Unit"},109,{"pathToFun":"org.jetbrains.kotlin.renderer.RenderingUtilsKt","methodName":"render","parameters":["Name"],"returnType":"String"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrUtilsKt","methodName":"isJvmAbstract","parameters":["IrSimpleFunction","JvmDefaultMode"],"returnType":"Boolean"},113,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrFunctionFactory$FunctionDescriptorFactory$RealDescriptorFactory","methodName":"classReceiverParameterDescriptor","parameters":[""],"returnType":"ReceiverParameterDescriptor"},111,{"pathToFun":"org.jetbrains.kotlin.renderer.ClassifierNamePolicy$FULLY_QUALIFIED","methodName":"renderClassifier","parameters":["ClassifierDescriptor","DescriptorRenderer"],"returnType":"String"},112,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitVariable","parameters":["IrVariable","Nothing"],"returnType":"Any"},86,{"pathToFun":"org.jetbrains.kotlin.backend.common.serialization.mangle.descriptor.DescriptorExportCheckerVisitor","methodName":"visitVariableDescriptor","parameters":["VariableDescriptor","SpecialDeclarationType"],"returnType":"Any"},76,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer$FunctionBodiesRewriter","methodName":"fillArguments2","parameters":["T","IrMemberAccessExpression","IrFunction"],"returnType":"T"},110,{"pathToFun":"org.jetbrains.kotlin.ir.util.IrUtilsKt","methodName":"getArgumentsWithIr","parameters":["IrMemberAccessExpression"],"returnType":"List"},109,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"visitSetField","parameters":["IrSetField","BlockInfo"],"returnType":"PromisedValue"},111,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.InitializersLoweringBase","methodName":"handleField","parameters":["IrClass","IrField"],"returnType":"IrStatement"},111,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrConstructorCallImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},113,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitFunctionReference","parameters":["IrFunctionReference"],"returnType":"Any"},109,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.JvmLowerKt","methodName":"forClass","parameters":["IrClass","Boolean"],"returnType":"Visibility"},110,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols","methodName":"remapType","parameters":["IrType"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderInitializer","parameters":["VariableDescriptor","StringBuilder"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitGetObjectValue","parameters":["IrGetObjectValue","Nothing"],"returnType":"Any"},21,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderValueParameter","parameters":["ValueParameterDescriptor","Boolean","StringBuilder","Boolean"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedClassDescriptor","methodName":"getDefaultType","parameters":[""],"returnType":"SimpleType"},108,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedClassConstructorDescriptor","methodName":"getTypeParameters","parameters":[""],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"isTypeParameter","parameters":["KotlinType"],"returnType":"Boolean"},99,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrInstanceInitializerCallImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},113,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"getUpperBound","parameters":["TypeParameterMarker","Int"],"returnType":"Any"},53,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitFieldAccess","parameters":["IrFieldAccessExpression","D"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.ir.types.irTypePredicatesKt","methodName":"isMarkedNullable","parameters":["IrType"],"returnType":"Any"},51,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitConstructorCall","parameters":["IrConstructorCall"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrFunctionFactory","methodName":"createValueParameter","parameters":["IrFunction","ParameterDescriptor"],"returnType":"IrValueParameter"},111,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRenderer$ValueParametersHandler$DEFAULT","methodName":"appendBeforeValueParameter","parameters":["ValueParameterDescriptor","Int","Int","StringBuilder"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderWhereSuffix","parameters":["List","StringBuilder"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.CallGenerator","methodName":"generateValueReference","parameters":["Int","Int","DeclarationDescriptor","ResolvedCall","IrStatementOrigin"],"returnType":"IrExpression"},112,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitCallableReference","parameters":["IrCallableReference"],"returnType":"Any"},109,{"pathToFun":"org.jetbrains.kotlin.ir.util.ExpectDeclarationRemover","methodName":"tryCopyDefaultArguments","parameters":["IrValueParameter"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"visitReturn","parameters":["IrReturn"],"returnType":"IrExpression"},113,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer","methodName":"createFieldsForCapturedValues","parameters":["LocalClassContext"],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitFunctionExpression","parameters":["IrFunctionExpression","Nothing"],"returnType":"IrElement"},98,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedClassDescriptor","methodName":"isExternal","parameters":[""],"returnType":"Any"},110,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLoweringKt","methodName":"isLocalNotInner","parameters":["IrClass"],"returnType":"Boolean"},110,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.IrTypeMappingKt","methodName":"mapType","parameters":["IrTypeMapper","IrField"],"returnType":"Type"},111,{"pathToFun":"org.jetbrains.kotlin.ir.types.irTypePredicatesKt","methodName":"isPrimitiveType","parameters":["IrType"],"returnType":"Boolean"},113,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.JvmSignatureClashDetector","methodName":"collectOverridesTree","parameters":["IrSimpleFunction","MutableSet"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.types.AbstractTypeApproximator","methodName":"isTrivialSub","parameters":["KotlinTypeMarker"],"returnType":"Any"},14,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"render","parameters":["DeclarationDescriptor"],"returnType":"String"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.IrTypeMappingKt","methodName":"buildPossiblyInnerType","parameters":["IrSimpleType"],"returnType":"PossiblyInnerIrType"},82,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrFunctionFactory","methodName":"createThisReceiver","parameters":["IrClass","FunctionDescriptorFactory"],"returnType":"IrValueParameter"},111,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.IfNullExpressionsFusionLowering","methodName":"matchIfNullExpr","parameters":["IrExpression"],"returnType":"IfNullExpr"},113,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable$ScopedSymbolTable$Scope","methodName":"set","parameters":["D","S"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.CallGenerator","methodName":"generateGetVariable","parameters":["Int","Int","VariableDescriptor","Map","IrStatementOrigin"],"returnType":"Any"},108,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedClassDescriptor","methodName":"getUnsubstitutedMemberScope","parameters":[""],"returnType":"Any"},108,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderSimpleType","parameters":["StringBuilder","SimpleType"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.DeclarationGenerator","methodName":"generateGlobalTypeParametersDeclarations","parameters":["IrTypeParametersContainer","List"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrFunctionFactory","methodName":"toIrType","parameters":["KotlinType"],"returnType":"IrType"},111,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.JvmSignatureClashDetector","methodName":"trackField","parameters":["IrField","RawSignature"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderTypeArguments","parameters":["List"],"returnType":"String"},112,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderSuspendModifier","parameters":["FunctionDescriptor","StringBuilder"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitTypeParameter","parameters":["IrTypeParameter"],"returnType":"Any"},53,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ClassGenerator","methodName":"getEffectiveModality","parameters":["KtPureClassOrObject","ClassDescriptor"],"returnType":"Modality"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmArgumentNullabilityAssertionsLowering","methodName":"visitGetField","parameters":["IrGetField","AssertionScope"],"returnType":"IrExpression"},111,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer$FunctionBodiesRewriter","methodName":"visitReturn","parameters":["IrReturn"],"returnType":"IrExpression"},110,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrFunctionFactory","methodName":"createMembers","parameters":["IrClass","Boolean","Boolean","Int","String","FunctionDescriptorFactory"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable$SymbolTableBase","methodName":"declare","parameters":["IdSignature","D","() -> S","(S) -> B"],"returnType":"B"},111,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable$ScopedSymbolTable","methodName":"declareLocal","parameters":["D","() -> S","(S) -> B"],"returnType":"B"},113,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitCallableReference","parameters":["IrCallableReference","D"],"returnType":"Any"},109,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.irCodegenUtilsKt","methodName":"calculateInnerClassAccessFlags","parameters":["IrClass","JvmBackendContext"],"returnType":"Int"},112,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitReturn","parameters":["IrReturn"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ReturnableBlockTransformer","methodName":"visitContainerExpression","parameters":["IrContainerExpression"],"returnType":"IrExpression"},112,{"pathToFun":"org.jetbrains.kotlin.ir.util.IrFakeOverrideUtilsKt","methodName":"resolveFakeOverride","parameters":["IrField"],"returnType":"IrField"},111,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable","methodName":"declareScopedTypeParameter","parameters":["Int","Int","IrDeclarationOrigin","TypeParameterDescriptor","(IrTypeParameterSymbol) -> IrTypeParameter"],"returnType":"IrTypeParameter"},26,{"pathToFun":"org.jetbrains.kotlin.ir.util.ScopedTypeParametersResolver","methodName":"resolveScopedTypeParameter","parameters":["TypeParameterDescriptor"],"returnType":"IrTypeParameterSymbol"},53,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen","methodName":"generateField","parameters":["IrField"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.builtins.functions.FunctionInvokeDescriptor$Factory","methodName":"create","parameters":["FunctionClassDescriptor","Boolean"],"returnType":"FunctionInvokeDescriptor"},111,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitGetValue","parameters":["IrGetValue"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRenderer$ValueParametersHandler$DEFAULT","methodName":"appendAfterValueParameters","parameters":["Int","StringBuilder"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitFunctionExpression","parameters":["IrFunctionExpression","D"],"returnType":"Any"},98,{"pathToFun":"org.jetbrains.kotlin.types.TypeUtils","methodName":"makeStarProjection","parameters":["TypeParameterDescriptor"],"returnType":"TypeProjection"},10,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderKeyword","parameters":["String"],"returnType":"String"},112,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ClosureAnnotator$ClosureCollectorVisitor","methodName":"visitFunction","parameters":["IrFunction","ClosureBuilder"],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitTypeOperator","parameters":["IrTypeOperatorCall","D"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ClosureAnnotator$ClosureBuilder","methodName":"include","parameters":["ClosureBuilder"],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"getEffectiveDispatchReceiverType","parameters":["CallableDescriptor"],"returnType":"KotlinType"},112,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ClosureAnnotator$ClosureCollectorVisitor","methodName":"visitFunctionAccess","parameters":["IrFunctionAccessExpression","ClosureBuilder"],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"getName","parameters":["TypeParameterMarker"],"returnType":"Name"},53,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.BodyGenerator","methodName":"generatePrimaryConstructorBody","parameters":["KtPureClassOrObject"],"returnType":"IrBody"},53,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitDeclarationReference","parameters":["IrDeclarationReference","D"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitExpressionBody","parameters":["IrExpressionBody"],"returnType":"Any"},107,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irGet","parameters":["IrBuilderWithScope","IrType","IrValueSymbol"],"returnType":"Any"},94,{"pathToFun":"org.jetbrains.kotlin.ir.builders.IrBlockBuilder","methodName":"block","parameters":["IrBlockBuilder.() -> Unit"],"returnType":"IrContainerExpression"},112,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitFunctionReference","parameters":["IrFunctionReference"],"returnType":"Any"},109,{"pathToFun":"org.jetbrains.kotlin.backend.common.IrElementVisitorVoidWithContext","methodName":"visitFieldNew","parameters":["IrField"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderName","parameters":["DeclarationDescriptor","StringBuilder","Boolean"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"replaceArguments","parameters":["SimpleTypeMarker","List"],"returnType":"SimpleTypeMarker"},14,{"pathToFun":"org.jetbrains.kotlin.backend.common.ir.IrInlineUtilsKt","methodName":"move","parameters":["IrBody","IrFunction","IrDeclarationParent","IrReturnTargetSymbol","Map"],"returnType":"IrBody"},96,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitDelegatingConstructorCall","parameters":["IrDelegatingConstructorCall"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.MethodSignatureMapper","methodName":"mapFieldSignature","parameters":["IrField"],"returnType":"String"},111,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbolsKt","methodName":"deepCopyWithSymbols","parameters":["T","IrDeclarationParent","(SymbolRemapper, TypeRemapper) -> DeepCopyIrTreeWithSymbols"],"returnType":"T"},113,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.IfNullExpressionsFusionLowering$Transformer","methodName":"visitBlock","parameters":["IrBlock"],"returnType":"IrExpression"},113,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.IrTypeMappingKt","methodName":"mapTypeAsDeclaration","parameters":["IrTypeMapper","IrType"],"returnType":"Type"},113,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"getTypeParameterClassifier","parameters":["TypeConstructorMarker"],"returnType":"TypeParameterMarker"},71,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable$ScopedSymbolTable$Scope","methodName":"getByDescriptor","parameters":["D"],"returnType":"S"},111,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrUtilsKt","methodName":"createJvmIrBuilder","parameters":["JvmBackendContext","IrSymbol","Int","Int"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.backend.common.serialization.IrModuleDeserializerKt","methodName":"kind","parameters":["IrSymbol"],"returnType":"BinarySymbolData.SymbolKind"},111,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderValueParameters","parameters":["Collection","Boolean","StringBuilder"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderPossiblyInnerType","parameters":["StringBuilder","PossiblyInnerType"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ArgumentsGenerationUtilsKt","methodName":"castArgumentToFunctionalInterfaceForSamType","parameters":["StatementGenerator","IrExpression","KotlinType"],"returnType":"IrExpression"},110,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ClassGenerator","methodName":"generatePrimaryConstructor","parameters":["IrClass","KtPureClassOrObject"],"returnType":"IrConstructor"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.PromisedValueKt","methodName":"materializedAt","parameters":["PromisedValue","Type","IrType"],"returnType":"MaterialValue"},113,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedClassConstructorDescriptor","methodName":"getName","parameters":[""],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FieldRenamer","methodName":"visitField","parameters":["IrField"],"returnType":"IrStatement"},111,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderDefaultType","parameters":["StringBuilder","KotlinType"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmInlineClassLowering","methodName":"visitGetValue","parameters":["IrGetValue"],"returnType":"IrExpression"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.ConstLoweringKt","methodName":"constantValue","parameters":["IrField","JvmBackendContext"],"returnType":"IrConst"},111,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitSetField","parameters":["IrSetField","Nothing"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.IrTypeMappingKt","methodName":"buildPossiblyInnerType","parameters":["IrSimpleType","IrClass","Int"],"returnType":"PossiblyInnerIrType"},82,{"pathToFun":"org.jetbrains.kotlin.types.checker.NewCapturedTypeConstructor","methodName":"isDenotable","parameters":[""],"returnType":"Any"},16,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitGetField","parameters":["IrGetField"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"visitVariable","parameters":["IrVariable","BlockInfo"],"returnType":"PromisedValue"},86,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable$ScopedSymbolTable$Scope","methodName":"getLocal","parameters":["D"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmInlineClassLowering","methodName":"visitContainerExpression","parameters":["IrContainerExpression"],"returnType":"IrExpression"},105,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitField","parameters":["IrField","Nothing"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.JvmSignatureClashDetector","methodName":"trackFakeOverrideMethod","parameters":["IrFunction"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedClassDescriptor","methodName":"getKind","parameters":[""],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitValueAccess","parameters":["IrValueAccessExpression","D"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen","methodName":"getAnnotationDefaultValueExpression","parameters":[""],"returnType":"IrExpression"},109,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitInstanceInitializerCall","parameters":["IrInstanceInitializerCall","D"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.backend.common.IrElementTransformerVoidWithContext","methodName":"visitField","parameters":["IrField"],"returnType":"IrStatement"},111,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.BridgeLowering","methodName":"delegatingCall","parameters":["IrBuilderWithScope","IrSimpleFunction","IrSimpleFunction","IrClassSymbol"],"returnType":"Any"},79,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.IrTypeMapper","methodName":"writeGenericArguments","parameters":["JvmSignatureWriter","PossiblyInnerIrType","TypeMappingMode"],"returnType":"Unit"},82,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderVariable","parameters":["VariableDescriptor","Boolean","StringBuilder","Boolean","Boolean"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ProvisionalFunctionExpressionLowering","methodName":"visitFunctionExpression","parameters":["IrFunctionExpression"],"returnType":"IrExpression"},98,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitConstructorCall","parameters":["IrConstructorCall"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irDelegatingConstructorCall","parameters":["IrBuilderWithScope","IrConstructor"],"returnType":"IrDelegatingConstructorCall"},111,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.SyntheticAccessorLowering","methodName":"visitSetField","parameters":["IrSetField"],"returnType":"IrExpression"},111,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitFieldAccess","parameters":["IrFieldAccessExpression"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.SingletonReferencesLowering","methodName":"thisOfClass","parameters":["IrClass","Boolean"],"returnType":"IrValueParameter"},21,{"pathToFun":"org.jetbrains.kotlin.backend.common.ir.IrUtilsKt","methodName":"copyReceiverParametersFrom","parameters":["IrFunction","IrFunction"],"returnType":"Unit"},105,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitVariable","parameters":["IrVariable"],"returnType":"Any"},86,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"getType","parameters":["TypeArgumentMarker"],"returnType":"Any"},77,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer$FunctionBodiesRewriter","methodName":"visitConstructor","parameters":["IrConstructor"],"returnType":"IrStatement"},110,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitInstanceInitializerCall","parameters":["IrInstanceInitializerCall","Nothing"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpressionKt","methodName":"putArgument","parameters":["IrFunctionAccessExpression","IrValueParameter","IrExpression"],"returnType":"Any"},83,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitTypeOperator","parameters":["IrTypeOperatorCall"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable","methodName":"declareVariable","parameters":["Int","Int","IrDeclarationOrigin","VariableDescriptor","IrType","(IrVariableSymbol) -> IrVariable"],"returnType":"IrVariable"},76,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.samConversionsKt","methodName":"getSubstitutedFunctionTypeForSamType","parameters":["KotlinType"],"returnType":"KotlinType"},110,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper","methodName":"getReferencedClassifier","parameters":["IrClassifierSymbol"],"returnType":"IrClassifierSymbol"},113,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen","methodName":"shouldNotGenerateConstructorParameterAnnotations","parameters":["IrClass"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.JvmGeneratorExtensions$JvmSamConversion","methodName":"getSamTypeForValueParameter","parameters":["ValueParameterDescriptor"],"returnType":"KotlinType"},87,{"pathToFun":"org.jetbrains.kotlin.ir.types.irTypePredicatesKt","methodName":"isStringClassType","parameters":["IrType"],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrGetFieldImpl","methodName":"acceptChildren","parameters":["IrElementVisitor","D"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.InheritedDefaultMethodsOnClassesLoweringKt","methodName":"isDefaultImplsBridge","parameters":["IrSimpleFunction"],"returnType":"Any"},109,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrExpressionBodyImpl","methodName":"acceptChildren","parameters":["IrElementVisitor","D"],"returnType":"Unit"},107,{"pathToFun":"org.jetbrains.kotlin.backend.common.IrElementTransformerVoidWithContext","methodName":"visitFieldNew","parameters":["IrField"],"returnType":"IrStatement"},111,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderClassifierName","parameters":["ClassifierDescriptor"],"returnType":"String"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.inlineclasses.InlineClassAbi","methodName":"unboxType","parameters":["IrType"],"returnType":"IrType"},109,{"pathToFun":"org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl","methodName":"transformChildren","parameters":["IrElementTransformer","D"],"returnType":"Unit"},86,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitSetField","parameters":["IrSetField","D"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irCall","parameters":["IrBuilderWithScope","IrFunction","IrStatementOrigin","IrClassSymbol"],"returnType":"IrCall"},85,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ClassGenerator$Companion","methodName":"sortedByRenderer","parameters":["List"],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrGetObjectValueImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},21,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.FunctionGenerator","methodName":"generateFakeOverrideFunction","parameters":["FunctionDescriptor","KtPureElement"],"returnType":"IrSimpleFunction"},112,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderOverride","parameters":["CallableMemberDescriptor","StringBuilder"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"getFunctionReturnTypeOrNull","parameters":["KotlinType"],"returnType":"KotlinType"},98,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitSingletonReference","parameters":["IrGetSingletonValue"],"returnType":"Any"},21,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ArrayConstructorTransformer","methodName":"arrayInlineToSizeConstructor","parameters":["IrConstructor"],"returnType":"IrFunctionSymbol"},59,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.JvmBackendContext","methodName":"referenceClass","parameters":["ClassDescriptor"],"returnType":"IrClassSymbol"},112,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitBlock","parameters":["IrBlock"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.BridgeLowering","methodName":"createBridges","parameters":["IrClass","IrSimpleFunction"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.AnonymousObjectSuperConstructorLowering","methodName":"visitBlock","parameters":["IrBlock"],"returnType":"IrExpression"},105,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitInstanceInitializerCall","parameters":["IrInstanceInitializerCall"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},86,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrExpressionBodyImpl","methodName":"transformChildren","parameters":["IrElementTransformer","D"],"returnType":"Unit"},107,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer$FunctionBodiesRewriter","methodName":"visitCall","parameters":["IrCall"],"returnType":"IrExpression"},108,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"asTypeArgument","parameters":["KotlinTypeMarker"],"returnType":"TypeArgumentMarker"},6,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitTypeParameter","parameters":["IrTypeParameter","D"],"returnType":"Any"},53,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitLambdaExpression","parameters":["KtLambdaExpression","Nothing"],"returnType":"IrStatement"},95,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderMemberModifiers","parameters":["MemberDescriptor","StringBuilder"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.MethodSignatureMapper","methodName":"mapReturnType","parameters":["IrDeclaration","IrType","JvmSignatureWriter"],"returnType":"Type"},113,{"pathToFun":"org.jetbrains.kotlin.backend.common.ir.IrUtilsKt","methodName":"copyTypeParameters","parameters":["IrTypeParametersContainer","List","IrDeclarationOrigin","Map"],"returnType":"List"},112,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"isStarProjection","parameters":["TypeArgumentMarker"],"returnType":"Any"},82,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FieldNameCollector","methodName":"visitField","parameters":["IrField"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"visitVariable","parameters":["IrVariable"],"returnType":"IrVariable"},78,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FieldAccessTransformer","methodName":"visitSetField","parameters":["IrSetField"],"returnType":"IrExpression"},111,{"pathToFun":"org.jetbrains.kotlin.backend.common.ir.IrUtilsKt","methodName":"addFakeOverridesViaIncorrectHeuristic","parameters":["IrClass","List"],"returnType":"Unit"},104,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrExpressionBodyImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},107,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"visitFieldAccess","parameters":["IrFieldAccessExpression","BlockInfo"],"returnType":"PromisedValue"},111,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitBlock","parameters":["IrBlock","D"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitConstructor","parameters":["IrConstructor"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitBlock","parameters":["IrBlock","Nothing"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"isInterfaceOrAnnotationClass","parameters":["KotlinTypeMarker"],"returnType":"Boolean"},53,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols","methodName":"mapStatementOrigin","parameters":["IrStatementOrigin"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable","methodName":"declareVariable","parameters":["Int","Int","IrDeclarationOrigin","VariableDescriptor","IrType","IrExpression"],"returnType":"IrVariable"},72,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase","methodName":"acceptChildren","parameters":["IrElementVisitor","D"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ClosureAnnotator$ClosureCollectorVisitor","methodName":"visitValueAccess","parameters":["IrValueAccessExpression","ClosureBuilder"],"returnType":"Unit"},98,{"pathToFun":"org.jetbrains.kotlin.psi2ir.intermediate.RematerializableValue","methodName":"load","parameters":[""],"returnType":"IrExpression"},105,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ClosureAnnotator","methodName":"getClosure","parameters":["IrDeclaration"],"returnType":"Closure"},110,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ClosureAnnotator$ClosureBuilder","methodName":"isExternal","parameters":["IrValueDeclaration"],"returnType":"Boolean"},98,{"pathToFun":"org.jetbrains.kotlin.ir.util.TypeTranslator","methodName":"resolveTypeParameter","parameters":["TypeParameterDescriptor"],"returnType":"IrTypeParameterSymbol"},65,{"pathToFun":"org.jetbrains.kotlin.backend.common.CheckIrElementVisitor","methodName":"visitDeclarationReference","parameters":["IrDeclarationReference"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.backend.common.ir.IrInlineUtilsKt","methodName":"moveBodyTo","parameters":["IrFunction","IrFunction","Map"],"returnType":"IrBody"},96,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.IrSyntheticDeclarationGenerator","methodName":"ensureMemberScope","parameters":["IrClass"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FunctionReferenceLowering$FunctionReferenceBuilder","methodName":"createConstructor","parameters":[""],"returnType":"IrConstructor"},108,{"pathToFun":"org.jetbrains.kotlin.ir.types.impl.IrTypeProjectionImpl","methodName":"hashCode","parameters":[""],"returnType":"Int"},17,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedSimpleFunctionDescriptor","methodName":"getExtensionReceiverParameter","parameters":[""],"returnType":"Any"},100,{"pathToFun":"org.jetbrains.kotlin.backend.common.CheckIrElementVisitor","methodName":"visitGetValue","parameters":["IrGetValue"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.DeclarationGenerator","methodName":"generateFakeOverrideFunction","parameters":["FunctionDescriptor","KtPureElement"],"returnType":"IrSimpleFunction"},112,{"pathToFun":"org.jetbrains.kotlin.backend.common.serialization.IrModuleDeserializerWithBuiltIns","methodName":"computeFunctionDescriptor","parameters":["Name"],"returnType":"FunctionClassDescriptor"},111,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.irCodegenUtilsKt","methodName":"innerAccessFlagsForModalityAndKind","parameters":["IrClass"],"returnType":"Int"},94,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"visitTypeOperator","parameters":["IrTypeOperatorCall"],"returnType":"IrExpression"},110,{"pathToFun":"org.jetbrains.kotlin.builtins.functions.FunctionClassDescriptor$FunctionTypeConstructor","methodName":"computeSupertypes","parameters":[""],"returnType":"Collection"},111,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"visitExpressionBody","parameters":["IrExpressionBody","BlockInfo"],"returnType":"Any"},90,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrUtilsKt","methodName":"eraseTypeParameters","parameters":["IrTypeArgument"],"returnType":"IrTypeArgument"},81,{"pathToFun":"org.jetbrains.kotlin.builtins.functions.FunctionClassDescriptor","methodName":"getDeclaredTypeParameters","parameters":[""],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderFqName","parameters":["FqNameUnsafe"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ClosureAnnotator$ClosureCollectorVisitor","methodName":"visitElement","parameters":["IrElement","ClosureBuilder"],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitGetValue","parameters":["IrGetValue","Nothing"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.backend.common.ir.IrUtilsKt","methodName":"copyValueParametersFrom","parameters":["IrFunction","IrFunction"],"returnType":"Unit"},105,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitTypeOperator","parameters":["IrTypeOperatorCall"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.types.StarProjectionImpl","methodName":"isStarProjection","parameters":[""],"returnType":"Any"},36,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitGetObjectValue","parameters":["IrGetObjectValue","D"],"returnType":"Any"},21,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.ValueParameterDescriptorImpl","methodName":"accept","parameters":["DeclarationDescriptorVisitor","D"],"returnType":"R"},105,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrGetFieldImpl","methodName":"transformChildren","parameters":["IrElementTransformer","D"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ClassGenerator","methodName":"generateClass","parameters":["KtPureClassOrObject","Visibility"],"returnType":"IrClass"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.inlineclasses.InlineClassAbiKt","methodName":"unboxInlineClass","parameters":["IrType"],"returnType":"Any"},109,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.RangeLoopTransformer","methodName":"visitBlock","parameters":["IrBlock"],"returnType":"IrExpression"},105,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitFieldAccess","parameters":["IrFieldAccessExpression","D"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.ir.declarations.IrAttributeContainerKt","methodName":"copyAttributes","parameters":["D","IrAttributeContainer"],"returnType":"D"},113,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irGet","parameters":["IrBuilderWithScope","IrValueDeclaration"],"returnType":"Any"},94,{"pathToFun":"org.jetbrains.kotlin.ir.builders.IrBlockBuilder","methodName":"doBuild","parameters":[""],"returnType":"IrContainerExpression"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.JvmNameProvider","methodName":"nameForValueParameter","parameters":["ValueParameterDescriptor"],"returnType":"Name"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.SyntheticAccessorLowering","methodName":"visitGetField","parameters":["IrGetField"],"returnType":"IrExpression"},111,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.BodyGenerator","methodName":"generateLambdaBody","parameters":["KtFunctionLiteral"],"returnType":"IrBody"},95,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitGetValue","parameters":["IrGetValue","D"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitGetObjectValue","parameters":["IrGetObjectValue","Nothing"],"returnType":"Any"},21,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitDeclarationReference","parameters":["IrDeclarationReference"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxingInterpreter","methodName":"processPopInstruction","parameters":["AbstractInsnNode","BasicValue"],"returnType":"Unit"},61,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.InterfaceLowering","methodName":"handleInterface","parameters":["IrClass"],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols","methodName":"visitBlock","parameters":["IrBlock"],"returnType":"IrBlock"},113,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitFunctionExpression","parameters":["IrFunctionExpression"],"returnType":"Any"},98,{"pathToFun":"org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt","methodName":"declaresOrInheritsDefaultValue","parameters":["ValueParameterDescriptor"],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitVariable","parameters":["IrVariable","D"],"returnType":"Any"},86,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.JvmBackendContext","methodName":"putLocalClassType","parameters":["IrAttributeContainer","Type"],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl$RenderDeclarationDescriptorVisitor","methodName":"visitFunctionDescriptor","parameters":["FunctionDescriptor","StringBuilder"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt","methodName":"isEffectivelyExternal","parameters":["DeclarationDescriptor"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"generateFinallyBlocksIfNeeded","parameters":["Type","Label","BlockInfo"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ClosureAnnotator","methodName":"getClassClosure","parameters":["IrClass"],"returnType":"Any"},110,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ClosureAnnotator$ClosureBuilder","methodName":"declareVariable","parameters":["IrValueDeclaration"],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"escape","parameters":["String"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.IrFrameMap","methodName":"leave","parameters":["IrSymbol"],"returnType":"Int"},86,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitExpressionBody","parameters":["IrExpressionBody","D"],"returnType":"Any"},107,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrFunctionFactory","methodName":"createTypeParameters","parameters":["IrTypeParametersContainer","Int","FunctionDescriptorFactory"],"returnType":"IrTypeParameter"},111,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderAnnotations","parameters":["StringBuilder","Annotated","AnnotationUseSiteTarget"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer","methodName":"rewriteClassMembers","parameters":["IrClass","LocalClassContext"],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrReturnImpl","methodName":"acceptChildren","parameters":["IrElementVisitor","D"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.CallGenerator","methodName":"generateConstructorCall","parameters":["ClassConstructorDescriptor","Int","Int","IrStatementOrigin","CallBuilder"],"returnType":"IrExpression"},58,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ClosureAnnotator$ClosureCollectorVisitor","methodName":"visitExpression","parameters":["IrExpression","ClosureBuilder"],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmInlineClassLowering","methodName":"visitFunctionReference","parameters":["IrFunctionReference"],"returnType":"IrExpression"},109,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitFieldAccess","parameters":["IrFieldAccessExpression"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"upperBoundCount","parameters":["TypeParameterMarker"],"returnType":"Any"},53,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedClassDescriptor","methodName":"getTypeConstructor","parameters":[""],"returnType":"TypeConstructor"},108,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer$FunctionBodiesRewriter","methodName":"visitClass","parameters":["IrClass"],"returnType":"Any"},110,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.FunctionGenerator","methodName":"generatePrimaryConstructor","parameters":["ClassConstructorDescriptor","KtPureClassOrObject"],"returnType":"IrConstructor"},53,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitFunctionReference","parameters":["IrFunctionReference","D"],"returnType":"Any"},109,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitConstructorCall","parameters":["IrConstructorCall","Nothing"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitGetValue","parameters":["IrGetValue","D"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrFunctionExpressionImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},98,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.BodyGenerator","methodName":"generateAnySuperConstructorCall","parameters":["IrBlockBodyImpl","KtPureElement"],"returnType":"Unit"},52,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.DefaultParameterInjector","methodName":"visitDelegatingConstructorCall","parameters":["IrDelegatingConstructorCall"],"returnType":"IrExpression"},113,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.irCodegenUtilsKt","methodName":"writeInnerClass","parameters":["IrClass","IrTypeMapper","JvmBackendContext","ClassBuilder"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer","methodName":"createNewCall","parameters":["IrConstructorCall","IrConstructor"],"returnType":"Any"},110,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.StaticDefaultFunctionLowering","methodName":"visitReturn","parameters":["IrReturn"],"returnType":"IrExpression"},113,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderModifier","parameters":["StringBuilder","Boolean","String"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitGetValue","parameters":["IrGetValue","Nothing"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.optimizations.FoldConstantLowering","methodName":"tryFoldingBinaryOps","parameters":["IrCall"],"returnType":"IrExpression"},75,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.InlineCallableReferenceToLambdaPhase","methodName":"visitFunctionReference","parameters":["IrFunctionReference"],"returnType":"IrExpression"},109,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitContainerExpression","parameters":["IrContainerExpression"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.IrTypeMappingKt","methodName":"mapType","parameters":["IrTypeMapper","IrVariable"],"returnType":"Type"},86,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitExpressionBody","parameters":["IrExpressionBody","Nothing"],"returnType":"Any"},107,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.JvmSignatureClashDetector","methodName":"collectOverridesOf","parameters":["IrSimpleFunction","MutableSet"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderMemberKind","parameters":["CallableMemberDescriptor","StringBuilder"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.VarargLowering","methodName":"visitConstructorCall","parameters":["IrConstructorCall"],"returnType":"IrExpression"},58,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.IrSyntheticDeclarationGenerator","methodName":"visitClass","parameters":["IrClass"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitDelegatingConstructorCall","parameters":["IrDelegatingConstructorCall","D"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitSingletonReference","parameters":["IrGetSingletonValue","D"],"returnType":"Any"},21,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitTypeOperator","parameters":["IrTypeOperatorCall","Nothing"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ClassGenerator","methodName":"generateFakeOverrideMemberDeclarations","parameters":["IrClass","KtPureClassOrObject"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.FunctionGenerator","methodName":"declareParameter","parameters":["ParameterDescriptor","KtPureElement","IrElement"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.IrExpressionBody","methodName":"transform","parameters":["IrElementTransformer","D"],"returnType":"IrExpressionBody"},107,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"lowerType","parameters":["CapturedTypeMarker"],"returnType":"KotlinTypeMarker"},20,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitTypeParameter","parameters":["IrTypeParameter","Nothing"],"returnType":"Any"},53,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.MethodSignatureMapper","methodName":"mapAsmMethod","parameters":["IrFunction"],"returnType":"Method"},113,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrFunctionExpressionImpl","methodName":"acceptChildren","parameters":["IrElementVisitor","D"],"returnType":"Unit"},98,{"pathToFun":"org.jetbrains.kotlin.backend.common.CheckIrElementVisitor","methodName":"visitSetField","parameters":["IrSetField"],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irCall","parameters":["IrBuilderWithScope","IrConstructorSymbol"],"returnType":"IrConstructorCall"},110,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitTypeParameter","parameters":["IrTypeParameter","D"],"returnType":"Any"},53,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmInlineClassLowering","methodName":"visitReturn","parameters":["IrReturn"],"returnType":"IrExpression"},113,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrSetFieldImpl","methodName":"transformChildren","parameters":["IrElementTransformer","D"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedFieldDescriptor","methodName":"getContainingDeclaration","parameters":[""],"returnType":"Any"},110,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitConstructor","parameters":["IrConstructor"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.builtins.functions.FunctionClassScope","methodName":"computeDeclaredFunctions","parameters":[""],"returnType":"List"},111,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FunctionReferenceLowering$FunctionReferenceBuilder","methodName":"createInvokeMethod","parameters":["IrValueDeclaration"],"returnType":"IrSimpleFunction"},108,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitReturn","parameters":["IrReturn","Nothing"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.BridgeLowering","methodName":"addBridge","parameters":["IrClass","Bridge","IrSimpleFunction"],"returnType":"IrSimpleFunction"},79,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitInstanceInitializerCall","parameters":["IrInstanceInitializerCall"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.types.AbstractTypeChecker","methodName":"isSubtypeOf","parameters":["TypeCheckerProviderContext","KotlinTypeMarker","KotlinTypeMarker","Boolean"],"returnType":"Boolean"},30,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmArgumentNullabilityAssertionsLowering","methodName":"visitSetField","parameters":["IrSetField","AssertionScope"],"returnType":"IrExpression"},111,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitSetField","parameters":["IrSetField"],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderVisibility","parameters":["Visibility","StringBuilder"],"returnType":"Boolean"},112,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer","methodName":"recordTransformedValueParameters","parameters":["IrFunction","LocalContextWithClosureAsParameters"],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderReceiverAfterName","parameters":["CallableDescriptor","StringBuilder"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedClassDescriptor","methodName":"getDeclaredTypeParameters","parameters":[""],"returnType":"Any"},111,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitDeclarationReference","parameters":["IrDeclarationReference","D"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderFqName","parameters":["List"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ClosureAnnotator$ClosureCollectorVisitor","methodName":"visitClass","parameters":["IrClass","ClosureBuilder"],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.renderer.RenderingFormat$PLAIN","methodName":"escape","parameters":["String"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.ir.declarations.impl.IrTypeParameterImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},53,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"scopeOwnerAsCallable","parameters":[""],"returnType":"Any"},100,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.JvmLowerKt","methodName":"scopedVisibility","parameters":["Boolean"],"returnType":"Visibility"},110,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ClosureAnnotator$ClosureBuilder","methodName":"seeType","parameters":["IrType"],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irExprBody","parameters":["IrBuilderWithScope","IrExpression"],"returnType":"Any"},104,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.IrSyntheticDeclarationGenerator","methodName":"collectDescriptors","parameters":["ClassDescriptor"],"returnType":"MutableList"},112,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.IrCallGenerator","methodName":"genValueAndPut","parameters":["IrValueParameter","IrExpression","Type","ExpressionCodegen","BlockInfo"],"returnType":"Unit"},113,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irCall","parameters":["IrBuilderWithScope","IrConstructorSymbol","IrType"],"returnType":"IrConstructorCall"},111,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer","methodName":"insertLoweredDeclarationForLocalFunctions","parameters":[""],"returnType":"Unit"},110,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.optimizations.FoldConstantLowering","methodName":"tryFoldingBuiltinBinaryOps","parameters":["IrCall"],"returnType":"IrExpression"},87,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalClassPopupLowering","methodName":"shouldPopUp","parameters":["IrClass","ScopeWithIr"],"returnType":"Boolean"},110,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderReceiver","parameters":["CallableDescriptor","StringBuilder"],"returnType":"Unit"},112,{"pathToFun":"org.jetbrains.kotlin.backend.common.CheckIrElementVisitor","methodName":"visitInstanceInitializerCall","parameters":["IrInstanceInitializerCall"],"returnType":"Unit"},53,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.SpecialBridgeMethods","methodName":"toDescription","parameters":["IrSimpleFunction"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.types.AbstractTypeApproximator","methodName":"approximateCapturedType","parameters":["CapturedTypeMarker","TypeApproximatorConfiguration","Boolean","Int"],"returnType":"KotlinTypeMarker"},14,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"getArgument","parameters":["KotlinTypeMarker","Int"],"returnType":"TypeArgumentMarker"},82,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitDelegatingConstructorCall","parameters":["IrDelegatingConstructorCall","Nothing"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrMemberAccessExpressionBase","methodName":"putTypeArgument","parameters":["Int","IrType"],"returnType":"Unit"},68,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.PolymorphicSignatureLowering","methodName":"visitTypeOperator","parameters":["IrTypeOperatorCall"],"returnType":"IrExpression"},110,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer$FunctionBodiesRewriter","methodName":"visitDelegatingConstructorCall","parameters":["IrDelegatingConstructorCall"],"returnType":"IrExpression"},110,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.LazyTypeConstructor","methodName":"getParameters","parameters":[""],"returnType":"Any"},108,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitInstanceInitializerCall","parameters":["IrInstanceInitializerCall","Nothing"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.SyntheticAccessorLowering","methodName":"visitConstructor","parameters":["IrConstructor"],"returnType":"IrStatement"},113,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.StackPeepholeOptimizationsTransformer","methodName":"isPurePushOfSize1","parameters":["AbstractInsnNode"],"returnType":"Boolean"},64,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.DefaultArgumentStubGeneratorKt","methodName":"findBaseFunctionWithDefaultArguments","parameters":["IrFunction","Boolean","Boolean"],"returnType":"IrFunction"},113,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitConstructor","parameters":["IrConstructor","Nothing"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrFunctionFactory","methodName":"addFakeOverrides","parameters":["IrClass"],"returnType":"Unit"},111,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitReturn","parameters":["IrReturn","D"],"returnType":"Any"},113,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitValueAccess","parameters":["IrValueAccessExpression"],"returnType":"Any"},112,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.PseudocodeVariableDataCollector","methodName":"filterOutVariablesOutOfScope","parameters":["Instruction","Instruction","I"],"returnType":"I"},33,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.InitState","methodName":"merge","parameters":["InitState"],"returnType":"InitState"},25,{"pathToFun":"org.jetbrains.kotlin.psi.KtSimpleNameExpressionImpl","methodName":"getReferencedNameElementType","parameters":[""],"returnType":"Any"},96,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocodeTraverser.PseudocodeTraverserKt","methodName":"getStartInstruction","parameters":["Pseudocode","TraversalOrder"],"returnType":"Instruction"},33,{"pathToFun":"org.jetbrains.kotlin.types.expressions.PreliminaryDeclarationVisitor$Companion","methodName":"getVisitorByVariable","parameters":["VariableDescriptor","BindingContext"],"returnType":"PreliminaryDeclarationVisitor"},24,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.PopBackwardPropagationTransformer$Transformer$HazardsTrackingInterpreter","methodName":"binaryOperation","parameters":["AbstractInsnNode","SourceValue","SourceValue"],"returnType":"SourceValue"},87,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker\\$ExpressionValueArgument","methodName":"getArgumentExpression","parameters":[""],"returnType":"KtExpression"},101,{"pathToFun":"org.jetbrains.kotlin.codegen.FieldInfo","methodName":"getOwnerType","parameters":[""],"returnType":"Type"},21,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"refType","parameters":["Type"],"returnType":"Type"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.ReferenceTrackingInterpreter","methodName":"copyOperation","parameters":["AbstractInsnNode","BasicValue"],"returnType":"BasicValue"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.IdentifierInfoKt","methodName":"qualified","parameters":["IdentifierInfo","KotlinType","IdentifierInfo","Boolean"],"returnType":"Any"},89,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.ReferenceTrackingInterpreter","methodName":"binaryOperation","parameters":["AbstractInsnNode","BasicValue","BasicValue"],"returnType":"BasicValue"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.CallGenerator$DefaultCallGenerator","methodName":"putCapturedValueOnStack","parameters":["StackValue","Type","Int"],"returnType":"Unit"},26,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.CapturedVarsOptimizationMethodTransformer$Transformer","methodName":"trackPops","parameters":[""],"returnType":"Unit"},16,{"pathToFun":"org.jetbrains.kotlin.psi.KtBinaryExpression","methodName":"getLeft","parameters":[""],"returnType":"KtExpression"},87,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowInformationProvider","methodName":"isCapturedWrite","parameters":["VariableDescriptor","WriteValueInstruction"],"returnType":"Boolean"},35,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"receiverWithRefWrapper","parameters":["Type","Type","String","StackValue","DeclarationDescriptor"],"returnType":"Field"},16,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitBinaryExpression","parameters":["KtBinaryExpression"],"returnType":"void"},87,{"pathToFun":"org.jetbrains.kotlin.codegen.context.EnclosedValueDescriptor","methodName":"getType","parameters":[""],"returnType":"Type"},21,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.ReferenceTrackingInterpreter","methodName":"checkRefValuesUsages","parameters":["AbstractInsnNode","List"],"returnType":"Unit"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalWritableScope$Snapshot","methodName":"getContributedVariables","parameters":["Name","LookupLocation"],"returnType":"Any"},62,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"getCapturedFieldName","parameters":["String"],"returnType":"String"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.CapturingInClosureChecker","methodName":"getCalleeDescriptorAndParameter","parameters":["BindingContext","KtFunction"],"returnType":"Pair"},21,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowValueKindUtilsKt","methodName":"isAccessedBeforeAllClosureWriters","parameters":["DeclarationDescriptor","Set","BindingContext","KtElement"],"returnType":"Boolean"},19,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowInfo","methodName":"put","parameters":["K","D"],"returnType":"S"},33,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitBinaryExpression","parameters":["KtBinaryExpression","Void"],"returnType":"Void"},87,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowInformationProvider$Companion","methodName":"getElementParentDeclaration","parameters":["KtElement"],"returnType":"Any"},26,{"pathToFun":"org.jetbrains.kotlin.codegen.context.LocalLookup\\$LocalLookupCase","methodName":"outerValue","parameters":["EnclosedValueDescriptor","ExpressionCodegen"],"returnType":"StackValue"},21,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocodeTraverser.PseudocodeTraverserKt","methodName":"getPreviousIncludingSubGraphInstructions","parameters":["Instruction","TraversalOrder","Instruction","Collection"],"returnType":"Collection"},33,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocodeTraverser.PseudocodeTraverserKt","methodName":"updateEdgeDataForInstruction","parameters":["Instruction","Edges","Edges","MutableMap","MutableMap"],"returnType":"Unit"},33,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitBinaryExpression","parameters":["KtBinaryExpression"],"returnType":"Unit"},87,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingUtils","methodName":"getTypeInfoOrNullType","parameters":["KtExpression","ExpressionTypingContext","ExpressionTypingInternals"],"returnType":"KotlinTypeInfo"},77,{"pathToFun":"org.jetbrains.kotlin.types.expressions.AssignedVariablesSearcher","methodName":"writers","parameters":["VariableDescriptor"],"returnType":"MutableSet"},24,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowInfo","methodName":"retainAll","parameters":["(K) -> Boolean"],"returnType":"S"},24,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseOperationReference","parameters":[""],"returnType":"void"},96,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxingInterpreter","methodName":"binaryOperation","parameters":["AbstractInsnNode","BasicValue","BasicValue"],"returnType":"BasicValue"},87,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocodeTraverser.PseudocodeTraverserKt","methodName":"getPreviousInstructions","parameters":["Instruction","TraversalOrder"],"returnType":"Collection"},33,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing\\$Precedence","methodName":"parseRightHandSide","parameters":["IElementType","KotlinExpressionParsing"],"returnType":"IElementType"},91,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.CapturingInClosureChecker","methodName":"isExactlyOnceParameter","parameters":["DeclarationDescriptor","VariableDescriptor"],"returnType":"Boolean"},14,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowInfo","methodName":"hashCode","parameters":[""],"returnType":"Any"},33,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"visitBinaryExpression","parameters":["KtBinaryExpression"],"returnType":"void"},87,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.VariableUseState","methodName":"merge","parameters":["VariableUseState"],"returnType":"VariableUseState"},22,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocodeTraverser.PseudocodeTraverserKt","methodName":"getLastInstruction","parameters":["Pseudocode","TraversalOrder"],"returnType":"Instruction"},17,{"pathToFun":"org.jetbrains.kotlin.codegen.FieldInfo","methodName":"getFieldKotlinType","parameters":[""],"returnType":"KotlinType"},33,{"pathToFun":"org.jetbrains.kotlin.codegen.FieldInfo","methodName":"getOwnerInternalName","parameters":[""],"returnType":"String"},27,{"pathToFun":"org.jetbrains.kotlin.psi.psiUtil.ktPsiUtilKt","methodName":"isContractDescriptionCallPsiCheck","parameters":["KtQualifiedExpression"],"returnType":"Boolean"},36,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"lookupInContext","parameters":["DeclarationDescriptor","StackValue","GenerationState","boolean"],"returnType":"StackValue"},24,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"rollbackOrDropAt","parameters":["Marker","IElementType"],"returnType":"boolean"},57,{"pathToFun":"org.jetbrains.kotlin.types.expressions.AssignedVariablesSearcher","methodName":"visitLambdaExpression","parameters":["KtLambdaExpression"],"returnType":"Unit"},18,{"pathToFun":"org.jetbrains.kotlin.parsing.AllCommentsBinder","methodName":"getEdgePosition","parameters":["List","Boolean","WhitespacesAndCommentsBinder.TokenTextGetter"],"returnType":"Int"},86,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$Field","methodName":"putSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"void"},54,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.PseudocodeVariablesData$ReadOnlyUseControlFlowInfoImpl","methodName":"replaceDelegate","parameters":["VariableUsageReadOnlyControlInfo"],"returnType":"VariableUsageReadOnlyControlInfo"},33,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.VariableInitControlFlowInfo","methodName":"copy","parameters":["ImmutableMap"],"returnType":"Any"},33,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorForStatements","methodName":"visitBinaryExpression","parameters":["KtBinaryExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},52,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiUtil","methodName":"deparenthesizeOnce","parameters":["KtExpression"],"returnType":"KtExpression"},57,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"checkLValue","parameters":["BindingTrace","ExpressionTypingContext","KtExpression","KtExpression","KtOperationExpression","boolean"],"returnType":"boolean"},35,{"pathToFun":"org.jetbrains.kotlin.codegen.context.LocalLookup\\$LocalLookupCase","methodName":"isCase","parameters":["DeclarationDescriptor"],"returnType":"boolean"},24,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.CapturedVarsOptimizationMethodTransformer$Transformer$Interpreter","methodName":"newOperation","parameters":["AbstractInsnNode"],"returnType":"BasicValue"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowValueKindUtilsKt","methodName":"isAccessedInsideClosure","parameters":["DeclarationDescriptor","BindingContext","KtElement"],"returnType":"Boolean"},19,{"pathToFun":"org.jetbrains.kotlin.codegen.FieldInfo","methodName":"createForHiddenField","parameters":["Type","Type","KotlinType","String"],"returnType":"FieldInfo"},27,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"lookupOuterValue","parameters":["EnclosedValueDescriptor","boolean"],"returnType":"StackValue"},21,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.VariableControlFlowState","methodName":"mayBeInitialized","parameters":[""],"returnType":"Boolean"},36,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.callUtil.callUtilKt","methodName":"getValueArgumentForExpression","parameters":["Call","KtExpression"],"returnType":"ValueArgument"},19,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"shared","parameters":["int","Type","VariableDescriptor","KotlinType"],"returnType":"StackValue"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.FieldInfo","methodName":"getFieldName","parameters":[""],"returnType":"String"},33,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"sharedTypeForType","parameters":["Type"],"returnType":"Type"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker","methodName":"makeExternalValueArgument","parameters":["KtExpression"],"returnType":"ValueArgument"},81,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.MutableClosure","methodName":"recordField","parameters":["String","Type"],"returnType":"void"},21,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorForStatements","methodName":"visitAssignment","parameters":["KtBinaryExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},30,{"pathToFun":"org.jetbrains.kotlin.codegen.context.EnclosedValueDescriptor","methodName":"getDescriptor","parameters":[""],"returnType":"DeclarationDescriptor"},21,{"pathToFun":"org.jetbrains.kotlin.types.expressions.AssignedVariablesSearcher","methodName":"visitBinaryExpression","parameters":["KtBinaryExpression"],"returnType":"Unit"},23,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"genAssignInstanceFieldFromParam","parameters":["FieldInfo","int","InstructionAdapter"],"returnType":"int"},21,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.CapturingInClosureChecker","methodName":"isExactlyOnceContract","parameters":["BindingContext","KtFunction"],"returnType":"Boolean"},19,{"pathToFun":"org.jetbrains.kotlin.codegen.callableReferenceUtilKt","methodName":"isBoundReferenceReceiverField","parameters":["CalculatedClosure","FieldInfo"],"returnType":"Boolean"},27,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$Shared","methodName":"storeSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"void"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalWritableScope$Snapshot","methodName":"getContributedClassifierIncludeDeprecated","parameters":["Name","LookupLocation"],"returnType":"DescriptorWithDeprecation"},60,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.UsageVariableControlFlowInfo","methodName":"copy","parameters":["ImmutableMap"],"returnType":"Any"},24,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.PseudocodeVariablesData","methodName":"addVariableInitStateFromCurrentInstructionIfAny","parameters":["Instruction","VariableInitControlFlowInfo","BlockScopeVariableInfo"],"returnType":"VariableInitControlFlowInfo"},33,{"pathToFun":"org.jetbrains.kotlin.util.slicedMap.Slices","methodName":"processRewrite","parameters":["WritableSlice","K","V","V"],"returnType":"boolean"},108,{"pathToFun":"org.jetbrains.kotlin.psi.KtBinaryExpression","methodName":"getOperationToken","parameters":[""],"returnType":"IElementType"},87,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"isLocal","parameters":["DeclarationDescriptor"],"returnType":"boolean"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.ReferenceTrackingInterpreter","methodName":"naryOperation","parameters":["AbstractInsnNode","List"],"returnType":"BasicValue"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitBinaryExpression","parameters":["KtBinaryExpression","StackValue"],"returnType":"StackValue"},87,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"getResolvedCallAccessTarget","parameters":["KtElement"],"returnType":"AccessTarget"},35,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$StackValueWithSimpleReceiver","methodName":"isNonStaticAccess","parameters":["boolean"],"returnType":"boolean"},84,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.PseudocodeVariableDataCollector","methodName":"collectData","parameters":["TraversalOrder","I","(Instruction, Collection"],"returnType":"Map"},33,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.CapturedVarsOptimizationMethodTransformer$Transformer$Interpreter","methodName":"processRefValueUsage","parameters":["TrackedReferenceValue","AbstractInsnNode","Int"],"returnType":"Unit"},16,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorForStatements","methodName":"refineTypeFromPropertySetterIfPossible","parameters":["BindingContext","KtElement","KotlinType"],"returnType":"KotlinType"},34,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowInfo","methodName":"equals","parameters":["Any"],"returnType":"Any"},33,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseFunctionLiteralParameterList","parameters":[""],"returnType":"void"},65,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.MutableClassDescriptor","methodName":"getKind","parameters":[""],"returnType":"ClassKind"},51,{"pathToFun":"org.jetbrains.kotlin.resolve.BindingContextUtils","methodName":"extractVariableFromResolvedCall","parameters":["BindingContext","KtElement"],"returnType":"VariableDescriptor"},34,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.CapturedVarsOptimizationMethodTransformer$CapturedVarDescriptor","methodName":"canRewrite","parameters":[""],"returnType":"Boolean"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"findCapturedValue","parameters":["DeclarationDescriptor"],"returnType":"StackValue"},22,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.PseudocodeVariablesData$Companion","methodName":"mergeIncomingEdgesDataForInitializers","parameters":["Instruction","Collection","BlockScopeVariableInfo"],"returnType":"VariableInitControlFlowInfo"},33,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.CapturingInClosureChecker","methodName":"getCaptureKind","parameters":["BindingContext","DeclarationDescriptor","DeclarationDescriptor","VariableDescriptor"],"returnType":"CaptureKind"},21,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.VariableControlFlowState$Companion","methodName":"create","parameters":["Boolean","VariableControlFlowState"],"returnType":"VariableControlFlowState"},33,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.CapturedVarsOptimizationMethodTransformer$Transformer","methodName":"analyze","parameters":[""],"returnType":"Unit"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.MutableClosure","methodName":"captureVariable","parameters":["EnclosedValueDescriptor"],"returnType":"void"},21,{"pathToFun":"org.jetbrains.kotlin.psi.KtBinaryExpression","methodName":"getOperationReference","parameters":[""],"returnType":"KtOperationReferenceExpression"},87,{"pathToFun":"org.jetbrains.kotlin.codegen.context.EnclosedValueDescriptor","methodName":"getKotlinType","parameters":[""],"returnType":"KotlinType"},18,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowInfo","methodName":"put","parameters":["K","D","D"],"returnType":"S"},33,{"pathToFun":"org.jetbrains.kotlin.psi.psiUtil.ktPsiUtilKt","methodName":"getQualifiedElementSelector","parameters":["KtElement"],"returnType":"KtElement"},42,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$FieldForSharedVar","methodName":"changeReceiver","parameters":["StackValue"],"returnType":"StackValueWithSimpleReceiver"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"field","parameters":["Field","StackValue"],"returnType":"Field"},23,{"pathToFun":"org.jetbrains.kotlin.psi.KtOperationReferenceExpression","methodName":"getReferencedNameElement","parameters":[""],"returnType":"Any"},96,{"pathToFun":"org.jetbrains.kotlin.psi.KtBinaryExpression","methodName":"getRight","parameters":[""],"returnType":"KtExpression"},87,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.IdentifierInfo$Variable","methodName":"equals","parameters":["Any"],"returnType":"Any"},79,{"pathToFun":"org.jetbrains.kotlin.codegen.context.LocalLookup\\$LocalLookupCase","methodName":"innerValue","parameters":["DeclarationDescriptor","LocalLookup","GenerationState","MutableClosure","Type"],"returnType":"StackValueWithSimpleReceiver"},23,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocodeTraverser.PseudocodeTraverserKt","methodName":"isStartInstruction","parameters":["Instruction","TraversalOrder"],"returnType":"Boolean"},33,{"pathToFun":"org.jetbrains.kotlin.codegen.context.EnclosedValueDescriptor","methodName":"getFieldName","parameters":[""],"returnType":"String"},21,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"changeReceiverForFieldAndSharedVar","parameters":["StackValueWithSimpleReceiver","StackValue"],"returnType":"StackValue"},24,{"pathToFun":"org.jetbrains.kotlin.psi.KtElementImpl","methodName":"acceptChildren","parameters":["KtVisitor","D"],"returnType":"void"},94,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.CapturedVarsOptimizationMethodTransformer$Transformer","methodName":"getIndex","parameters":["AbstractInsnNode"],"returnType":"Any"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateAssignmentExpression","parameters":["KtBinaryExpression"],"returnType":"StackValue"},30,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"field","parameters":["Type","KotlinType","Type","String","boolean","StackValue","DeclarationDescriptor"],"returnType":"Field"},54,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$StackValueWithSimpleReceiver","methodName":"putReceiver","parameters":["InstructionAdapter","boolean"],"returnType":"void"},84,{"pathToFun":"org.jetbrains.kotlin.types.expressions.PreliminaryDeclarationVisitor","methodName":"writers","parameters":["VariableDescriptor"],"returnType":"MutableSet"},24,{"pathToFun":"org.jetbrains.kotlin.psi.KtSimpleNameExpressionImpl","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},96,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$StackValueWithSimpleReceiver","methodName":"store","parameters":["StackValue","InstructionAdapter","boolean"],"returnType":"void"},35,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.PseudocodeVariablesData$Companion","methodName":"getDefaultValueForInitializers","parameters":["VariableDescriptor","Instruction","BlockScopeVariableInfo"],"returnType":"VariableControlFlowState"},78,{"pathToFun":"org.jetbrains.kotlin.codegen.context.MethodContext","methodName":"lookupInContext","parameters":["DeclarationDescriptor","StackValue","GenerationState","boolean"],"returnType":"StackValue"},23,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$FieldForSharedVar","methodName":"storeSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"void"},15,{"pathToFun":"org.jetbrains.kotlin.resolve.BindingContextUtils","methodName":"extractVariableDescriptorFromReference","parameters":["BindingContext","KtElement"],"returnType":"VariableDescriptor"},35,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowInformationProvider$Companion","methodName":"getDeclarationDescriptorIncludingConstructors","parameters":["BindingContext","KtDeclaration"],"returnType":"DeclarationDescriptor"},26,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocodeTraverser.PseudocodeTraverserKt","methodName":"collectDataFromSubgraph","parameters":["Pseudocode","TraversalOrder","MutableMap","(Instruction, Collection","(Instruction, Instruction, I) -> I","Collection","MutableMap","Boolean"],"returnType":"Unit"},33,{"pathToFun":"org.jetbrains.kotlin.cfg.variable.PseudocodeVariablesData$ReadOnlyInitVariableControlFlowInfoImpl","methodName":"replaceDelegate","parameters":["VariableInitReadOnlyControlFlowInfo"],"returnType":"VariableInitReadOnlyControlFlowInfo"},33,{"pathToFun":"org.jetbrains.kotlin.psi.KtBinaryExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},87,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowInfo","methodName":"getOrNull","parameters":["K"],"returnType":"D"},33,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.ReferenceTrackingInterpreter","methodName":"unaryOperation","parameters":["AbstractInsnNode","BasicValue"],"returnType":"BasicValue"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.OptimizationBasicInterpreter","methodName":"binaryOperation","parameters":["AbstractInsnNode","BasicValue","BasicValue"],"returnType":"BasicValue"},87,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowValueKindUtilsKt","methodName":"hasNoWritersInClosures","parameters":["DeclarationDescriptor","Set","BindingContext"],"returnType":"Boolean"},11,{"pathToFun":"org.jetbrains.kotlin.codegen.FieldInfo","methodName":"getFieldType","parameters":[""],"returnType":"Type"},33,{"pathToFun":"org.jetbrains.kotlin.types.expressions.AssignedVariablesSearcher","methodName":"visitDeclaration","parameters":["KtDeclaration"],"returnType":"Unit"},24,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"fieldForSharedVar","parameters":["Type","Type","String","Field","VariableDescriptor"],"returnType":"FieldForSharedVar"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$Shared","methodName":"putSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"void"},15,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitBinaryExpression","parameters":["KtBinaryExpression","D"],"returnType":"R"},87,{"pathToFun":"org.jetbrains.kotlin.parsing.AbstractKotlinParsing","methodName":"error","parameters":["String"],"returnType":"void"},60,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"genAssignInstanceFieldFromParam","parameters":["FieldInfo","int","InstructionAdapter","int","boolean"],"returnType":"int"},21,{"pathToFun":"org.jetbrains.kotlin.psi.KtFunctionNotStubbed","methodName":"isLocal","parameters":[""],"returnType":"boolean"},18,{"pathToFun":"org.jetbrains.kotlin.psi.psiUtil.psiUtilsKt","methodName":"before","parameters":["PsiElement","PsiElement"],"returnType":"Any"},11,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowInformationProvider","methodName":"checkValReassignment","parameters":["VariableInitContext","KtExpression","WriteValueInstruction","MutableCollection"],"returnType":"Boolean"},35,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocodeTraverser.PseudocodeTraverserKt","methodName":"collectData","parameters":["Pseudocode","TraversalOrder","(Instruction, Collection","(Instruction, Instruction, I) -> I","I"],"returnType":"Map"},33,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"fieldForSharedVar","parameters":["FieldForSharedVar","StackValue"],"returnType":"FieldForSharedVar"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.CapturedVarsOptimizationMethodTransformer$Transformer","methodName":"assignLocalVars","parameters":[""],"returnType":"Unit"},16,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedTypeParameterDescriptor","methodName":"getDefaultType","parameters":[""],"returnType":"Any"},33,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitComposite","parameters":["IrComposite"],"returnType":"Any"},35,{"pathToFun":"org.jetbrains.kotlin.ir.util.IrUtilsKt","methodName":"hasDefaultValue","parameters":["IrValueParameter"],"returnType":"Boolean"},45,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedClassDescriptor","methodName":"getMemberScope","parameters":["TypeSubstitution"],"returnType":"Any"},30,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.descriptors.JvmSharedVariablesManager","methodName":"setSharedValue","parameters":["IrVariableSymbol","IrSetVariable"],"returnType":"IrExpression"},16,{"pathToFun":"org.jetbrains.kotlin.ir.types.irTypePredicatesKt","methodName":"isByte","parameters":["IrType"],"returnType":"Boolean"},46,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGeneratorExtension","methodName":"genExpr","parameters":["KtExpression"],"returnType":"Any"},86,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.AssignmentGenerator","methodName":"generateAssignmentReceiver","parameters":["KtExpression","IrStatementOrigin","Boolean"],"returnType":"AssignmentReceiver"},35,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.JvmLowerKt","methodName":"forCapturedField","parameters":["IrValueSymbol"],"returnType":"Visibility"},26,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrSetVariableImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},23,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitSetVariable","parameters":["IrSetVariable","Nothing"],"returnType":"Any"},23,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrSetVariableImpl","methodName":"transformChildren","parameters":["IrElementTransformer","D"],"returnType":"Unit"},23,{"pathToFun":"org.jetbrains.kotlin.psi2ir.intermediate.VariableLValue","methodName":"assign","parameters":["(LValue) -> IrExpression"],"returnType":"IrExpression"},23,{"pathToFun":"org.jetbrains.kotlin.ir.types.irTypePredicatesKt","methodName":"isLong","parameters":["IrType"],"returnType":"Boolean"},22,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitSetVariable","parameters":["IrSetVariable"],"returnType":"Any"},23,{"pathToFun":"org.jetbrains.kotlin.ir.types.irTypePredicatesKt","methodName":"isFloat","parameters":["IrType"],"returnType":"Boolean"},24,{"pathToFun":"org.jetbrains.kotlin.psi2ir.intermediate.AssignmentReceiver","methodName":"assign","parameters":["IrExpression"],"returnType":"IrExpression"},19,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitComposite","parameters":["IrComposite","Nothing"],"returnType":"Any"},35,{"pathToFun":"org.jetbrains.kotlin.psi2ir.intermediate.VariableLValue","methodName":"store","parameters":["IrExpression"],"returnType":"IrExpression"},23,{"pathToFun":"org.jetbrains.kotlin.ir.types.irTypePredicatesKt","methodName":"isDouble","parameters":["IrType"],"returnType":"Boolean"},24,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer","methodName":"suggestNameForCapturedValue","parameters":["IrValueDeclaration","MutableSet"],"returnType":"Name"},28,{"pathToFun":"org.jetbrains.kotlin.ir.types.irTypePredicatesKt","methodName":"isChar","parameters":["IrType"],"returnType":"Boolean"},43,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrCompositeImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},35,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitComposite","parameters":["IrComposite","D"],"returnType":"Any"},35,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"visitSetVariable","parameters":["IrSetVariable"],"returnType":"IrExpression"},23,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitSetVariable","parameters":["IrSetVariable","D"],"returnType":"Any"},23,{"pathToFun":"org.jetbrains.kotlin.backend.common.CheckIrElementVisitor","methodName":"visitSetVariable","parameters":["IrSetVariable"],"returnType":"Unit"},23,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.AbstractVariableRemapper","methodName":"visitGetValue","parameters":["IrGetValue"],"returnType":"IrExpression"},68,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorConventionsKt","methodName":"getInfixOperator","parameters":["IElementType"],"returnType":"IrStatementOrigin"},86,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedClassDescriptor","methodName":"isInline","parameters":[""],"returnType":"Any"},18,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitSetVariable","parameters":["IrSetVariable","Nothing"],"returnType":"Any"},23,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrSetVariableImpl","methodName":"acceptChildren","parameters":["IrElementVisitor","D"],"returnType":"Unit"},23,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.optimizations.FoldConstantLowering","methodName":"tryFoldingUnaryOps","parameters":["IrCall"],"returnType":"IrExpression"},101,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedTypeParameterDescriptor","methodName":"getTypeConstructor","parameters":[""],"returnType":"Any"},33,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.AssignmentGenerator","methodName":"createVariableValue","parameters":["KtExpression","ValueDescriptor","IrStatementOrigin"],"returnType":"Any"},23,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.descriptors.JvmSharedVariablesManager","methodName":"getSharedValue","parameters":["IrVariableSymbol","IrGetValue"],"returnType":"IrExpression"},16,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.descriptors.JvmSharedVariablesManager","methodName":"declareSharedVariable","parameters":["IrVariable"],"returnType":"IrVariable"},16,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.LazyTypeConstructor","methodName":"getDeclarationDescriptor","parameters":[""],"returnType":"Any"},42,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitBinaryExpression","parameters":["KtBinaryExpression","Nothing"],"returnType":"IrStatement"},87,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitSetVariable","parameters":["IrSetVariable"],"returnType":"Any"},23,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalContextWithClosureAsParameters","methodName":"irGet","parameters":["Int","Int","IrValueDeclaration"],"returnType":"IrExpression"},29,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitComposite","parameters":["IrComposite"],"returnType":"Any"},35,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer","methodName":"createFieldForCapturedValue","parameters":["Int","Int","Name","Visibility","IrClass","IrType","Boolean"],"returnType":"IrField"},26,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorExpressionGenerator","methodName":"generateBinaryExpression","parameters":["KtBinaryExpression"],"returnType":"IrExpression"},87,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering","methodName":"remapTypeArgument","parameters":["LocalContext","IrTypeArgument"],"returnType":"Any"},16,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.VariableRemapper","methodName":"remapVariable","parameters":["IrValueDeclaration"],"returnType":"IrValueDeclaration"},68,{"pathToFun":"org.jetbrains.kotlin.ir.types.irTypePredicatesKt","methodName":"isShort","parameters":["IrType"],"returnType":"Boolean"},46,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrConstructorCallImpl$Companion","methodName":"fromSymbolOwner","parameters":["IrType","IrConstructorSymbol","IrStatementOrigin"],"returnType":"Any"},16,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.SharedVariablesLowering$SharedVariablesTransformer","methodName":"rewriteSharedVariables","parameters":[""],"returnType":"Unit"},16,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl$Companion","methodName":"constNull","parameters":["Int","Int","IrType"],"returnType":"IrConstImpl"},46,{"pathToFun":"org.jetbrains.kotlin.ir.util.IrUtilsKt","methodName":"isSubclassOf","parameters":["IrClass","IrClass"],"returnType":"Boolean"},73,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.descriptors.JvmSharedVariablesManager","methodName":"defineSharedValue","parameters":["IrVariable","IrVariable"],"returnType":"IrStatement"},16,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.AssignmentGenerator","methodName":"generateAssignment","parameters":["KtBinaryExpression"],"returnType":"IrExpression"},30,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.descriptors.JvmSharedVariablesManager","methodName":"getProvider","parameters":["IrType"],"returnType":"RefProvider"},16,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl$Companion","methodName":"defaultValueForType","parameters":["Int","Int","IrType"],"returnType":"Any"},24,{"pathToFun":"org.jetbrains.kotlin.ir.types.irTypesKt","methodName":"typeWith","parameters":["IrClass","List"],"returnType":"Any"},16,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering","methodName":"remapType","parameters":["LocalContext","IrType"],"returnType":"IrType"},31,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedTypeParameterDescriptor","methodName":"isCapturedFromOuterDeclaration","parameters":[""],"returnType":"Any"},30,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitComposite","parameters":["IrComposite","Nothing"],"returnType":"Any"},35,{"pathToFun":"org.jetbrains.kotlin.ir.types.irTypePredicatesKt","methodName":"isBoolean","parameters":["IrType"],"returnType":"Boolean"},26,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalClassMemberContext","methodName":"irGet","parameters":["Int","Int","IrValueDeclaration"],"returnType":"IrExpression"},82,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmInlineClassLowering","methodName":"visitSetVariable","parameters":["IrSetVariable"],"returnType":"IrExpression"},23,{"pathToFun":"org.jetbrains.kotlin.ir.types.irTypePredicatesKt","methodName":"isInt","parameters":["IrType"],"returnType":"Boolean"},81,{"pathToFun":"org.jetbrains.kotlin.resolve.bindingContextUtil.BindingContextUtilsKt","methodName":"isUsedAsResultOfLambda","parameters":["KtExpression","BindingContext"],"returnType":"Boolean"},83,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitComposite","parameters":["IrComposite","D"],"returnType":"Any"},35,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"genVarargs","parameters":["VarargValueArgument","KotlinType"],"returnType":"StackValue"},10,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.NewOverloadingConflictResolver$Companion","methodName":"createFlatSignature","parameters":["KotlinResolutionCandidate"],"returnType":"FlatSignature"},26,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"checkReferenceIsToAllowedMember","parameters":["CallableDescriptor","BindingTrace","KtCallableReferenceExpression"],"returnType":"Unit"},21,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl","methodName":"getSourceToUseForCopy","parameters":["boolean","PropertyDescriptor"],"returnType":"SourceElement"},29,{"pathToFun":"org.jetbrains.kotlin.codegen.callableReferenceUtilKt","methodName":"generateCallableReferenceDeclarationContainerClass","parameters":["InstructionAdapter","CallableDescriptor","GenerationState"],"returnType":"Boolean"},21,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.LazyImportResolverForKtImportDirective","methodName":"checkResolvedImportDirective","parameters":["KtImportInfo"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"isAccessorRequired","parameters":["int","CallableMemberDescriptor","CodegenContext","boolean","boolean"],"returnType":"boolean"},37,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.context.CallCandidateResolutionContext","methodName":"createForCallBeingAnalyzed","parameters":["MutableResolvedCall","BasicCallResolutionContext","TracingStrategy"],"returnType":"CallCandidateResolutionContext"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.CoroutineInferenceUtilKt","methodName":"isResultWithCoroutineInference","parameters":["OverloadResolutionResultsImpl"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowInfoImpl$Companion","methodName":"newTypeInfoBuilder","parameters":[""],"returnType":"SetMultimap"},66,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeCheckerContext","methodName":"substitutionSupertypePolicy","parameters":["SimpleTypeMarker"],"returnType":"SupertypesPolicy.DoCustomTransform"},40,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"isVisibleAsFunction","parameters":["JavaMethodDescriptor"],"returnType":"Boolean"},64,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"visitCallableReferenceExpression","parameters":["KtCallableReferenceExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.RedundantNullCheckMethodTransformer$TransformerPass","methodName":"transformTrivialChecks","parameters":["Map"],"returnType":"Unit"},64,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl\\$CopyConfiguration","methodName":"setCopyOverrides","parameters":["boolean"],"returnType":"CopyConfiguration"},22,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiFactory","methodName":"createDeclaration","parameters":["String"],"returnType":"TDeclaration"},28,{"pathToFun":"org.jetbrains.kotlin.load.java.propertiesConventionUtilKt","methodName":"propertyNameFromAccessorMethodName","parameters":["Name","String","Boolean","String"],"returnType":"Name"},36,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.LocalVariablesManager","methodName":"updateMaxLocals","parameters":["Int"],"returnType":"Unit"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.StackTransformationUtilsKt","methodName":"saveStack","parameters":["MethodNode","AbstractInsnNode","SavedStackDescriptor"],"returnType":"Unit"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InliningContext","methodName":"subInline","parameters":["NameGenerator","Map","LambdaInfo","Boolean"],"returnType":"InliningContext"},6,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"visitConstantExpression","parameters":["KtConstantExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},58,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.MutableClassDescriptor","methodName":"isInline","parameters":[""],"returnType":"boolean"},36,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitInlinedFunction","parameters":["KtFunction","InvocationKind"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"getKnownTypeParametersSubstitutor","parameters":[""],"returnType":"TypeSubstitutor"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"withinUninitializedClass","parameters":["KtElement","Runnable"],"returnType":"void"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.callableReferenceUtilKt","methodName":"isTopLevelCallableReference","parameters":["CallableDescriptor"],"returnType":"Boolean"},21,{"pathToFun":"org.jetbrains.kotlin.contracts.interpretation.CallsEffectInterpreter","methodName":"tryInterpret","parameters":["EffectDeclaration"],"returnType":"ESEffect"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.inlineCodegenUtilsKt","methodName":"isFakeLocalVariableForInline","parameters":["String"],"returnType":"Boolean"},10,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tasks.ResolutionCandidate","methodName":"getDispatchReceiver","parameters":[""],"returnType":"ReceiverValue"},80,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.typeSignatureMappingKt","methodName":"computeInternalName","parameters":["ClassDescriptor","TypeMappingConfiguration"],"returnType":"String"},85,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.SimpleConstraintSystemImpl","methodName":"registerTypeVariables","parameters":["Collection"],"returnType":"TypeSubstitutorMarker"},26,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.PostponedArgumentInputTypesResolver","methodName":"getAllDeeplyRelatedTypeVariables","parameters":["KotlinType","TypeVariableDependencyInformationProvider"],"returnType":"List"},22,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaScope","methodName":"computeMethodReturnType","parameters":["JavaMethod","LazyJavaResolverContext"],"returnType":"KotlinType"},64,{"pathToFun":"org.jetbrains.kotlin.codegen.ArgumentGeneratorKt","methodName":"getFunctionWithDefaultArguments","parameters":["FunctionDescriptor"],"returnType":"FunctionDescriptor"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.ConstructorCodegen","methodName":"generateDelegationConstructorCall","parameters":["InstructionAdapter","ExpressionCodegen","ClassConstructorDescriptor","ResolvedCall"],"returnType":"void"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.DefaultCallArgs","methodName":"mark","parameters":["Int"],"returnType":"Unit"},9,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"canBeConsideredProperType","parameters":["KtExpression"],"returnType":"Boolean"},8,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker","methodName":"makeCall","parameters":["KtElement","Receiver","ASTNode","KtExpression","List"],"returnType":"Call"},28,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.TowerResolver$Task","methodName":"mayFitForName","parameters":["ReceiverValueWithSmartCastInfo","Name"],"returnType":"Boolean"},27,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.SyntheticScope$Default","methodName":"getSyntheticExtensionProperties","parameters":["Collection","Name","LookupLocation"],"returnType":"Collection"},31,{"pathToFun":"org.jetbrains.kotlin.resolve.QualifiedExpressionResolveUtilKt","methodName":"resolveQualifierAsStandaloneExpression","parameters":["Qualifier","ExpressionTypingContext"],"returnType":"DeclarationDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.receivers.ExtensionReceiver","methodName":"getDeclarationDescriptor","parameters":[""],"returnType":"CallableDescriptor"},11,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkAnnotationClassMembers","parameters":["KtClassOrObject"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtImportDirective","methodName":"getImportContent","parameters":[""],"returnType":"ImportContent"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.AnnotationCodegen","methodName":"generateTargetAnnotation","parameters":["ClassDescriptor","Set"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.CapturingInClosureChecker","methodName":"isLhsOfAssignment","parameters":["KtExpression"],"returnType":"Boolean"},27,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionCodegen","methodName":"newFakeTempIndex","parameters":["MethodVisitor","FrameMap"],"returnType":"int"},10,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"getCallableReferenceType","parameters":["KtCallableReferenceExpression","DoubleColonLHS","OverloadResolutionResults","ExpressionTypingContext"],"returnType":"KotlinType"},2,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl\\$CopyConfiguration","methodName":"setModality","parameters":["Modality"],"returnType":"CopyConfiguration"},22,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.typeEnhancementKt","methodName":"getEnhancedNullability","parameters":["KotlinType","JavaTypeQualifiers","TypeComponentPosition"],"returnType":"EnhancementResult"},61,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.NullabilityInterpreter","methodName":"naryOperation","parameters":["AbstractInsnNode","List"],"returnType":"BasicValue"},64,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"shouldTryResolveLHSAsReservedExpression","parameters":["KtDoubleColonExpression"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.SubpackagesImportingScope","methodName":"getContributedClassifier","parameters":["Name","LookupLocation"],"returnType":"ClassifierDescriptor"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitPostfixExpression","parameters":["KtPostfixExpression","StackValue"],"returnType":"StackValue"},15,{"pathToFun":"org.jetbrains.kotlin.psi.KtCallableReferenceExpression","methodName":"getCallableReference","parameters":[""],"returnType":"KtSimpleNameExpression"},21,{"pathToFun":"org.jetbrains.kotlin.psi.KtConstructorCalleeExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorUtils","methodName":"getAllOverriddenDeclarations","parameters":["D"],"returnType":"Set"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker","methodName":"makeCall","parameters":["KtElement","Receiver","ASTNode","KtExpression","List","CallType"],"returnType":"Call"},28,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.ArgumentsToParametersMapper$CallArgumentProcessor","methodName":"completeVarargPositionArguments","parameters":[""],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.load.java.components.SignaturePropagator\\$PropagatedSignature","methodName":"getErrors","parameters":[""],"returnType":"List"},64,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.contextKt","methodName":"child","parameters":["LazyJavaResolverContext","TypeParameterResolver"],"returnType":"Any"},58,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaScope","methodName":"resolveValueParameters","parameters":["LazyJavaResolverContext","FunctionDescriptor","List"],"returnType":"ResolvedValueParameters"},64,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.MemberSignature$Companion","methodName":"fromMethodSignatureAndParameterIndex","parameters":["MemberSignature","Int"],"returnType":"MemberSignature"},15,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.IdentifierInfoKt","methodName":"getIdForImplicitReceiver","parameters":["ReceiverValue","KtExpression"],"returnType":"Any"},36,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CandidateResolver","methodName":"checkVisibilityWithDispatchReceiver","parameters":["CallCandidateResolutionContext","ReceiverValue","KotlinType"],"returnType":"ResolutionStatus"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.NewResolutionOldInference","methodName":"convertToOverloadResults","parameters":["Collection","TracingStrategy","BasicCallResolutionContext"],"returnType":"OverloadResolutionResultsImpl"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.VariableAsmNameManglingUtilsKt","methodName":"mangleNameIfNeeded","parameters":["String"],"returnType":"String"},14,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.Nullability","methodName":"refine","parameters":["Nullability"],"returnType":"Nullability"},66,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"resolveExpressionOnLHS","parameters":["KtExpression","ExpressionTypingContext"],"returnType":"DoubleColonLHS.Expression"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"isShadowedByParentContext","parameters":[""],"returnType":"boolean"},92,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.context.BasicCallResolutionContext","methodName":"create","parameters":["BindingTrace","LexicalScope","Call","KotlinType","DataFlowInfo","ContextDependency","CheckArgumentTypesMode","boolean","LanguageVersionSettings","DataFlowValueFactory","InferenceSession"],"returnType":"BasicCallResolutionContext"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InlineAdapter","methodName":"setLambdaInlining","parameters":["boolean"],"returnType":"void"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"putUnitInstance","parameters":["InstructionAdapter"],"returnType":"void"},27,{"pathToFun":"org.jetbrains.kotlin.contracts.model.MutableContextInfo","methodName":"and","parameters":["MutableContextInfo"],"returnType":"MutableContextInfo"},18,{"pathToFun":"org.jetbrains.kotlin.psi.KtElementImpl","methodName":"getContainingKtFile","parameters":[""],"returnType":"KtFile"},31,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.typeEnhancementKt","methodName":"enhanceMutability","parameters":["ClassifierDescriptor","JavaTypeQualifiers","TypeComponentPosition"],"returnType":"EnhancementResult"},61,{"pathToFun":"org.jetbrains.kotlin.psi.KtSuperTypeCallEntry","methodName":"getValueArguments","parameters":[""],"returnType":"List"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackAnalyzer","methodName":"getFrame","parameters":["AbstractInsnNode"],"returnType":"Any"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.CompileTimeConstantChecker","methodName":"noExpectedTypeOrError","parameters":["KotlinType"],"returnType":"boolean"},29,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackMethodTransformer","methodName":"transformBreakContinueGotos","parameters":["MethodNode","FixStackContext","MutableList","FixStackAnalyzer"],"returnType":"Unit"},10,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorKt","methodName":"isStandaloneOnlyConstant","parameters":["ConstantValue"],"returnType":"Boolean"},75,{"pathToFun":"org.jetbrains.kotlin.builtins.functions.FunctionInvokeDescriptor","methodName":"doSubstitute","parameters":["CopyConfiguration"],"returnType":"FunctionDescriptor"},38,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InlineResult","methodName":"addNotChangedClass","parameters":["String"],"returnType":"Unit"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.RemapVisitor","methodName":"visitLocalVariable","parameters":["String","String","String","Label","Label","int"],"returnType":"void"},10,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.NewCommonSuperTypeCalculator","methodName":"commonSuperType","parameters":["List"],"returnType":"UnwrappedType"},68,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.TypeRemapper","methodName":"hasNoAdditionalMapping","parameters":["String"],"returnType":"Boolean"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.ArgumentTypeResolver","methodName":"isCallableReferenceArgument","parameters":["KtExpression","StatementFilter"],"returnType":"boolean"},25,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"getDispatchReceiver","parameters":[""],"returnType":"ReceiverValue"},33,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.ResolvedAtomCompleter","methodName":"checkMissingReceiverSupertypes","parameters":["ResolvedCall","MissingSupertypesResolver","BindingTrace"],"returnType":"Unit"},7,{"pathToFun":"org.jetbrains.kotlin.psi.KtPostfixExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},15,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateCallableReferenceReceiver","parameters":["ResolvedCall"],"returnType":"StackValue"},21,{"pathToFun":"org.jetbrains.kotlin.types.ErrorUtils\\$ErrorScope","methodName":"getContributedVariables","parameters":["Name","LookupLocation"],"returnType":"Set"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.ConstraintStorageKt","methodName":"checkConstraint","parameters":["TypeCheckerProviderContext","KotlinTypeMarker","ConstraintKind","KotlinTypeMarker"],"returnType":"Boolean"},8,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadResolutionResultsImpl","methodName":"changeStatusToSuccess","parameters":[""],"returnType":"OverloadResolutionResultsImpl"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.sinceKotlinUtilKt","methodName":"getSinceKotlinVersionByOverridden","parameters":["CallableMemberDescriptor"],"returnType":"SinceKotlinValue"},61,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallResolver","methodName":"doResolveCall","parameters":["BasicCallResolutionContext","ResolutionTask","TracingStrategy"],"returnType":"OverloadResolutionResultsImpl"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getPrimitiveOrStringCompileTimeConstant","parameters":["KtExpression"],"returnType":"ConstantValue"},82,{"pathToFun":"org.jetbrains.kotlin.contracts.model.AbstractFunctor","methodName":"invokeWithArguments","parameters":["List","ESTypeSubstitution","Reducer"],"returnType":"List"},61,{"pathToFun":"org.jetbrains.kotlin.builtins.ReflectionTypes","methodName":"getKClassType","parameters":["Annotations","KotlinType","Variance"],"returnType":"KotlinType"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.KotlinCallResolver","methodName":"resolveGivenCandidates","parameters":["ImplicitScopeTower","KotlinResolutionCallbacks","KotlinCall","UnwrappedType","Collection","Boolean"],"returnType":"CallResolutionResult"},69,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parsePropertyGetterOrSetter","parameters":["AccessorKind"],"returnType":"AccessorKind"},37,{"pathToFun":"org.jetbrains.kotlin.codegen.AnnotationCodegen","methodName":"getJavaTargetList","parameters":["ClassDescriptor"],"returnType":"Set"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.TowerResolver$Task","methodName":"processImplicitReceiver","parameters":["ReceiverValueWithSmartCastInfo","Boolean"],"returnType":"Collection"},27,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingUtils\\$ResolveConstruct","methodName":"getSpecialTypeParameterName","parameters":[""],"returnType":"Name"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.CoroutineInferenceUtilKt","methodName":"getCoroutineInferenceData","parameters":["OverloadResolutionResultsImpl"],"returnType":"CoroutineInferenceData"},2,{"pathToFun":"org.jetbrains.kotlin.util.ProgressManagerBasedCancellationChecker","methodName":"check","parameters":[""],"returnType":"Unit"},29,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"tryResolveRHSWithReceiver","parameters":["String","Receiver","KtSimpleNameExpression","ResolutionContext","ResolveArgumentsMode"],"returnType":"ResolutionResultsAndTraceCommitCallback"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.SmartCastManager","methodName":"getSmartCastVariantsExcludingReceiver","parameters":["BindingContext","DeclarationDescriptor","DataFlowInfo","ReceiverValue","LanguageVersionSettings","DataFlowValueFactory"],"returnType":"Collection"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CandidateResolver","methodName":"checkReceivers","parameters":["CallCandidateResolutionContext"],"returnType":"ResolutionStatus"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.SmartCastManager","methodName":"getSmartCastVariantsExcludingReceiver","parameters":["ResolutionContext","ReceiverValue"],"returnType":"Collection"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.ClosureCodegen","methodName":"calculateFunctionReferenceFlags","parameters":["ResolvedCall","FunctionDescriptor"],"returnType":"int"},20,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl\\$CopyConfiguration","methodName":"build","parameters":[""],"returnType":"PropertyDescriptor"},29,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.FunctionalArgumentInterpreter","methodName":"unaryOperation","parameters":["AbstractInsnNode","BasicValue"],"returnType":"BasicValue"},15,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallCompleter","methodName":"updateResultDataFlowInfoUsingEffects","parameters":["MutableResolvedCall","BindingTrace"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.NewResolutionOldInference$MyCandidate","methodName":"component1","parameters":[""],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.load.java.components.DescriptorResolverUtils","methodName":"isMethodWithOneObjectParameter","parameters":["JavaMethod"],"returnType":"boolean"},3,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingUtils","methodName":"createTracingForSpecialConstruction","parameters":["Call","String","ExpressionTypingContext"],"returnType":"TracingStrategy"},22,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"createNonSyntheticValue","parameters":["KtElement","List","MagicKind"],"returnType":"PseudoValue"},37,{"pathToFun":"org.jetbrains.kotlin.load.java.JvmAbi","methodName":"startsWithIsPrefix","parameters":["String"],"returnType":"boolean"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.LazyImportResolverForKtImportDirective","methodName":"forceResolveImport","parameters":["KtImportDirective"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadingConflictResolver","methodName":"isOfNotLessSpecificShape","parameters":["FlatSignature","FlatSignature"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker","methodName":"makeValueArgument","parameters":["KtExpression"],"returnType":"ValueArgument"},22,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.typeEnhancementKt","methodName":"shouldEnhance","parameters":["TypeComponentPosition"],"returnType":"Any"},64,{"pathToFun":"org.jetbrains.kotlin.psi.KtSuperTypeCallEntry","methodName":"getValueArgumentList","parameters":[""],"returnType":"KtValueArgumentList"},7,{"pathToFun":"org.jetbrains.kotlin.contracts.model.visitors.Reducer","methodName":"reduceEffect","parameters":["ESEffect"],"returnType":"ESEffect"},18,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.contextKt","methodName":"childForMethod","parameters":["LazyJavaResolverContext","DeclarationDescriptor","JavaTypeParameterListOwner","Int"],"returnType":"Any"},64,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.RedundantNullCheckMethodTransformerKt","methodName":"isInstanceOfOrNullCheck","parameters":["AbstractInsnNode"],"returnType":"Any"},64,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"resolveTypeOnLHS","parameters":["KtExpression","KtDoubleColonExpression","ExpressionTypingContext"],"returnType":"DoubleColonLHS.Type"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.ErrorCandidateFactoryKt","methodName":"getWrongResolutionToClassifier","parameters":["ErrorCandidateContext","ClassifierDescriptor","Boolean"],"returnType":"WrongResolutionToClassifier"},3,{"pathToFun":"org.jetbrains.kotlin.types.AbstractTypeApproximator","methodName":"toApproximationResult","parameters":["KotlinTypeMarker?"],"returnType":"ApproximationResult"},22,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitCallableReferenceExpression","parameters":["KtCallableReferenceExpression","Void"],"returnType":"Void"},21,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getBackingFieldContext","parameters":["AccessorKind","DeclarationDescriptor"],"returnType":"CodegenContext"},51,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.IdentifierInfoKt","methodName":"getIdForThisReceiver","parameters":["DeclarationDescriptor"],"returnType":"Any"},15,{"pathToFun":"org.jetbrains.kotlin.codegen.context.InlineLambdaContext","methodName":"getFirstCrossInlineOrNonInlineContext","parameters":[""],"returnType":"CodegenContext"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CandidateResolver","methodName":"checkExpectedCallableType","parameters":["CallCandidateResolutionContext"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.typeEnhancementKt","methodName":"noChange","parameters":["T"],"returnType":"Any"},61,{"pathToFun":"org.jetbrains.kotlin.codegen.callableReferenceUtilKt","methodName":"generateFunctionReferenceSignature","parameters":["InstructionAdapter","CallableDescriptor","GenerationState"],"returnType":"Unit"},20,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadingConflictResolver","methodName":"computeHashCode","parameters":["C"],"returnType":"Int"},26,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.LocalVariablesManager","methodName":"markEmitted","parameters":["AbstractInsnNode"],"returnType":"Unit"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxedValuesCollection","methodName":"add","parameters":["BoxedValueDescriptor"],"returnType":"void"},48,{"pathToFun":"org.jetbrains.kotlin.resolve.LazyExplicitImportScope","methodName":"collectCallableMemberDescriptors","parameters":["LookupLocation","MemberScope.(Name, LookupLocation) -> Collection"],"returnType":"Collection"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.ConstructorCodegen","methodName":"generateSuperCallImplicitArguments","parameters":["InstructionAdapter","ExpressionCodegen","ConstructorDescriptor","ConstructorDescriptor","ResolvedCall","CallableMethod","List","List"],"returnType":"ArgumentGenerator"},7,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContextKt","methodName":"requireOrDescribe","parameters":["Boolean","Any"],"returnType":"Unit"},26,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper$Companion","methodName":"getKindForDefaultImplCall","parameters":["FunctionDescriptor"],"returnType":"OwnerKind"},8,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"isAllowedInClassLiteral","parameters":["KotlinType"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.PopBackwardPropagationTransformer$Transformer","methodName":"createRemovableNopInsn","parameters":[""],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader","methodName":"loadTypeParameterAnnotations","parameters":["ProtoBuf.TypeParameter","NameResolver"],"returnType":"List"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackMethodTransformer","methodName":"removeAlwaysFalseIfeqMarkers","parameters":["FixStackContext","MethodNode"],"returnType":"Unit"},11,{"pathToFun":"org.jetbrains.kotlin.codegen.pseudoInsns.PseudoInsnsKt","methodName":"isPseudo","parameters":["AbstractInsnNode","PseudoInsn"],"returnType":"Any"},64,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackAnalyzer","methodName":"analyze","parameters":[""],"returnType":"Unit"},10,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.PostponedArgumentInputTypesResolver","methodName":"fixNextReadyVariableForParameterType","parameters":["Context","KotlinType","List","UnwrappedType","List","TypeVariableDependencyInformationProvider"],"returnType":"Boolean"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.PSICallResolver","methodName":"reportAdditionalDiagnosticIfNoCandidates","parameters":["BasicCallResolutionContext","ImplicitScopeTower","KotlinCallKind","KotlinCall"],"returnType":"Boolean"},3,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.types.JavaTypeResolver","methodName":"isConflictingArgumentFor","parameters":["Variance","TypeParameterDescriptor"],"returnType":"Boolean"},3,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.SignatureEnhancement$SignatureParts","methodName":"toIndexed","parameters":["KotlinType"],"returnType":"List"},64,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper$Companion","methodName":"getDefaultDescriptor","parameters":["Method","String","CallableDescriptor","Int"],"returnType":"String"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.AbstractScopeAdapter","methodName":"recordLookup","parameters":["Name","LookupLocation"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.extensions.internal.CandidateInterceptor","methodName":"interceptVariableCandidates","parameters":["Collection","ImplicitScopeTower","BasicCallResolutionContext","ResolutionScope","CallResolver","Name","LookupLocation"],"returnType":"Collection"},2,{"pathToFun":"org.jetbrains.kotlin.contracts.interpretation.ReturnsEffectInterpreter","methodName":"tryInterpret","parameters":["EffectDeclaration"],"returnType":"ESEffect"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackAnalyzer$InternalAnalyzer$FixStackFrame","methodName":"pushAll","parameters":["Collection"],"returnType":"Unit"},10,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitClassLiteralExpression","parameters":["KtClassLiteralExpression","Void"],"returnType":"Void"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadResolutionResultsImpl","methodName":"getResultCode","parameters":[""],"returnType":"Code"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.NewResolutionOldInference$MyCandidate","methodName":"component2","parameters":[""],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.QualifiedExpressionResolver","methodName":"storeQualifier","parameters":["BindingTrace","KtSimpleNameExpression","DeclarationDescriptor"],"returnType":"Qualifier"},10,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.CoroutineInferenceSupport","methodName":"checkCoroutineCalls","parameters":["BasicCallResolutionContext","TracingStrategy","OverloadResolutionResultsImpl"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadingConflictResolver","methodName":"uniquifyCandidatesSet","parameters":["Collection"],"returnType":"Set"},26,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"isAdaptedCallableReference","parameters":["KtCallableReferenceExpression","ResolvedCall","boolean"],"returnType":"boolean"},20,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl","methodName":"doSubstitute","parameters":["CopyConfiguration"],"returnType":"PropertyDescriptor"},29,{"pathToFun":"org.jetbrains.kotlin.psi.KtCallableReferenceExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},21,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowInfoImpl$Companion","methodName":"create","parameters":["DataFlowInfo","Map","SetMultimap"],"returnType":"DataFlowInfo"},26,{"pathToFun":"org.jetbrains.kotlin.psi.KtImportDirective","methodName":"getAlias","parameters":[""],"returnType":"KtImportAlias"},4,{"pathToFun":"org.jetbrains.kotlin.contracts.ContractDeserializerImpl$ContractDeserializationWorker","methodName":"toDescriptorInvocationKind","parameters":["ProtoBuf.Effect.InvocationKind"],"returnType":"InvocationKind"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.PsiSourceCompilerForInline$FakeMemberCodegen","methodName":"getClassName","parameters":[""],"returnType":"String"},10,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"createTypeArgumentsMap","parameters":["CallableDescriptor"],"returnType":"Map"},33,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitDoubleColonExpression","parameters":["KtDoubleColonExpression","D"],"returnType":"R"},22,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.SignatureBuildingComponents","methodName":"signature","parameters":["ClassDescriptor","String"],"returnType":"Any"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.ErrorCandidateFactoryKt","methodName":"collectErrorCandidatesForFunction","parameters":["ImplicitScopeTower","Name","DetailedReceiver"],"returnType":"Collection"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowValueKindUtilsKt","methodName":"propertyKind","parameters":["PropertyDescriptor","ModuleDescriptor"],"returnType":"DataFlowValue.Kind"},49,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"intoInlinedLambda","parameters":["FunctionDescriptor","boolean","boolean"],"returnType":"MethodContext"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionReferenceGenerationStrategy","methodName":"computeAndSaveReceiver","parameters":["JvmMethodSignature","ExpressionCodegen","ReceiverParameterDescriptor"],"returnType":"ReceiverValue"},20,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.FieldRemapper","methodName":"shouldProcessNonAload0FieldAccessChains","parameters":[""],"returnType":"Boolean"},6,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.signatureEnhancementKt","methodName":"createJavaTypeQualifiers","parameters":["NullabilityQualifier","MutabilityQualifier","Boolean","Boolean"],"returnType":"JavaTypeQualifiers"},64,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.methodSignatureMappingKt","methodName":"mapToJvmType","parameters":["KotlinType"],"returnType":"JvmType"},64,{"pathToFun":"org.jetbrains.kotlin.codegen.JvmCodegenUtil","methodName":"getBoundCallableReferenceReceiver","parameters":["ResolvedCall"],"returnType":"ReceiverValue"},21,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CandidateResolver","methodName":"checkAndReport","parameters":["CallCandidateResolutionContext","CallCandidateResolutionContext"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.contracts.model.MutableContextInfo","methodName":"union","parameters":["Map","Map"],"returnType":"MutableMap"},18,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyAccessorDescriptorImpl","methodName":"getOverriddenDescriptors","parameters":["boolean"],"returnType":"Collection"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker","methodName":"makeConstructorCallWithoutTypeArguments","parameters":["KtCallElement"],"returnType":"Call"},7,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"jumpToError","parameters":["KtElement"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallResolver","methodName":"anyConstructorHasDeclaredTypeParameters","parameters":["ClassifierDescriptor"],"returnType":"boolean"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.sinceKotlinUtilKt","methodName":"loadWasExperimentalMarkerClasses","parameters":["DeclarationDescriptor"],"returnType":"List"},19,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"createOperationArgumentForReceiver","parameters":["ResolvedCall","KtExpression"],"returnType":"OperationArgument"},74,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder","methodName":"build","parameters":[""],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"kotlinType","parameters":["KtExpression"],"returnType":"KotlinType"},83,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"markCallAsCompleted","parameters":[""],"returnType":"void"},33,{"pathToFun":"org.jetbrains.kotlin.resolve.CompileTimeConstantUtils","methodName":"checkConstructorParametersType","parameters":["List","BindingTrace"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl\\$CopyConfiguration","methodName":"setOwner","parameters":["DeclarationDescriptor"],"returnType":"CopyConfiguration"},22,{"pathToFun":"org.jetbrains.kotlin.builtins.functions.FunctionInvokeDescriptor","methodName":"createSubstitutedCopy","parameters":["DeclarationDescriptor","FunctionDescriptor","CallableMemberDescriptor.Kind","Name","Annotations","SourceElement"],"returnType":"FunctionDescriptorImpl"},38,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.contextKt","methodName":"computeNewDefaultTypeQualifiers","parameters":["LazyJavaResolverContext","Annotations"],"returnType":"JavaTypeQualifiersByElementType"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl","methodName":"hasUpperOrEqualUnitConstraint","parameters":["KotlinTypeMarker"],"returnType":"Boolean"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.KotlinDiagnosticsHolder$SimpleHolder","methodName":"addDiagnostic","parameters":["KotlinCallDiagnostic"],"returnType":"Unit"},18,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitConstantExpression","parameters":["KtConstantExpression","Void"],"returnType":"Void"},58,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.CapturedParamInfo$Companion","methodName":"isSynthetic","parameters":["ParameterInfo"],"returnType":"Boolean"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"getTypeArguments","parameters":[""],"returnType":"Map"},33,{"pathToFun":"org.jetbrains.kotlin.psi.psiUtil.ktPsiUtilKt","methodName":"getTopmostParentQualifiedExpressionForSelector","parameters":["KtSimpleNameExpression"],"returnType":"KtQualifiedExpression"},10,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.ArgumentTypeResolver","methodName":"isFunctionLiteralArgument","parameters":["KtExpression","ResolutionContext"],"returnType":"boolean"},15,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingUtils","methodName":"createFunctionDescriptorForSpecialConstruction","parameters":["ResolveConstruct","List","List"],"returnType":"SimpleFunctionDescriptorImpl"},22,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingUtils\\$ResolveConstruct","methodName":"getName","parameters":[""],"returnType":"String"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.JvmSignatureWriter","methodName":"writeUnboundedWildcard","parameters":[""],"returnType":"void"},33,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.MethodAnalyzer","methodName":"getFrame","parameters":["AbstractInsnNode"],"returnType":"Frame"},6,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseImportDirective","parameters":[""],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.DelegatingResolvedCall","methodName":"getTypeArguments","parameters":[""],"returnType":"Map"},20,{"pathToFun":"org.jetbrains.kotlin.resolve.LazyExplicitImportScope","methodName":"getContributedFunctions","parameters":["Name","LookupLocation"],"returnType":"Collection"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"newArrayInstruction","parameters":["KotlinType"],"returnType":"void"},10,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitPostfixExpression","parameters":["KtPostfixExpression"],"returnType":"void"},15,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CandidateResolver","methodName":"checkValueArgumentTypes","parameters":["CallResolutionContext","MutableResolvedCall","ResolveArgumentsMode"],"returnType":"ValueArgumentsCheckingResult"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.LocalVariablesManager","methodName":"allocateVariablesForBeforeInlineMarker","parameters":["AbstractInsnNode","List"],"returnType":"SavedStackDescriptor"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.RedundantNullCheckMethodTransformer$TransformerPass$NullabilityAssumptionsBuilder","methodName":"collectVariableDependentChecks","parameters":[""],"returnType":"Unit"},64,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"getDispatchReceiverParameter","parameters":[""],"returnType":"ReceiverParameterDescriptor"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallResolver","methodName":"resolveCallForMember","parameters":["KtSimpleNameExpression","BasicCallResolutionContext"],"returnType":"OverloadResolutionResults"},2,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl\\$CopyConfiguration","methodName":"setVisibility","parameters":["Visibility"],"returnType":"CopyConfiguration"},22,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder","methodName":"parameter","parameters":["String","JavaTypeQualifiers"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.components.SignaturePropagator\\$PropagatedSignature","methodName":"getReturnType","parameters":[""],"returnType":"KotlinType"},64,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getPrimitiveOrStringCompileTimeConstant","parameters":["KtExpression","BindingContext","boolean"],"returnType":"ConstantValue"},82,{"pathToFun":"org.jetbrains.kotlin.contracts.model.functors.SubstitutingFunctor","methodName":"doInvocation","parameters":["List","ESTypeSubstitution","Reducer"],"returnType":"List"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.ResolutionStatus","methodName":"among","parameters":["ResolutionStatus","ResolutionStatus"],"returnType":"boolean"},2,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"getTypeConstructor","parameters":["TypeParameterMarker"],"returnType":"TypeConstructorMarker"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"constant","parameters":["int"],"returnType":"StackValue"},5,{"pathToFun":"org.jetbrains.kotlin.psi.KtSuperTypeCallEntry","methodName":"getLambdaArguments","parameters":[""],"returnType":"List"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$Property","methodName":"isStatic","parameters":["boolean","CallableMethod"],"returnType":"boolean"},51,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.NullabilityInterpreter","methodName":"newOperation","parameters":["AbstractInsnNode"],"returnType":"BasicValue"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.ResolutionResultsHandler","methodName":"chooseAndReportMaximallySpecific","parameters":["Set","boolean","CheckArgumentTypesMode","LanguageVersionSettings"],"returnType":"OverloadResolutionResultsImpl"},2,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"unCaptureProjection","parameters":["TypeProjection"],"returnType":"TypeProjection"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher","methodName":"visitConstantExpression","parameters":["KtConstantExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},58,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.typeEnhancementKt","methodName":"enhancePossiblyFlexible","parameters":["UnwrappedType","(Int) -> JavaTypeQualifiers","Int"],"returnType":"Result"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallResolver","methodName":"prepareCandidatesAndContextForConstructorCall","parameters":["KotlinType","BasicCallResolutionContext","SyntheticScopes"],"returnType":"Pair"},7,{"pathToFun":"org.jetbrains.kotlin.builtins.jvm.JavaToKotlinClassMap","methodName":"convertReadOnlyToMutable","parameters":["ClassDescriptor"],"returnType":"ClassDescriptor"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackAnalyzer$InternalAnalyzer","methodName":"newFrame","parameters":["Int","Int"],"returnType":"Frame"},10,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"predefinedOperation","parameters":["KtExpression","ControlFlowBuilder.PredefinedOperation","List"],"returnType":"OperationInstruction"},17,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.BoxedValueDescriptor","methodName":"markAsUnsafeToRemove","parameters":[""],"returnType":"Unit"},47,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingUtils","methodName":"isUnaryExpressionDependentOnExpectedType","parameters":["KtUnaryExpression"],"returnType":"boolean"},18,{"pathToFun":"org.jetbrains.kotlin.codegen.CallBasedArgumentGenerator","methodName":"generateVararg","parameters":["Int","VarargValueArgument"],"returnType":"Unit"},10,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiFactory","methodName":"createExpression","parameters":["String"],"returnType":"KtExpression"},23,{"pathToFun":"org.jetbrains.kotlin.codegen.context.PackageContext","methodName":"getSourceFile","parameters":[""],"returnType":"KtFile"},24,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.NewResolutionOldInference$CandidateFactoryImpl","methodName":"createCandidate","parameters":["CandidateWithBoundDispatchReceiver","ExplicitReceiverKind","ReceiverValueWithSmartCastInfo"],"returnType":"MyCandidate"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CandidateResolver","methodName":"checkExtensionReceiver","parameters":["CallCandidateResolutionContext"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.types.StarProjectionImpl","methodName":"getType","parameters":[""],"returnType":"Any"},5,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder","methodName":"function","parameters":["String","FunctionEnhancementBuilder.() -> Unit"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.ErrorCandidateFactoryKt","methodName":"asClassifierCall","parameters":["ErrorCandidateContext","Boolean"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.descriptors.Visibilities","methodName":"mustCheckInImports","parameters":[""],"returnType":"boolean"},20,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseOneTokenExpression","parameters":["IElementType"],"returnType":"void"},58,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.OptimizationBasicInterpreter","methodName":"ternaryOperation","parameters":["AbstractInsnNode","BasicValue","BasicValue","BasicValue"],"returnType":"BasicValue"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.AnnotationCodegen","methodName":"getRetentionPolicy","parameters":["Annotated"],"returnType":"RetentionPolicy"},2,{"pathToFun":"org.jetbrains.kotlin.builtins.functionTypesKt","methodName":"extractFunctionalTypeFromSupertypes","parameters":["KotlinType"],"returnType":"KotlinType"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"findParentContextWithDescriptor","parameters":["DeclarationDescriptor"],"returnType":"CodegenContext"},92,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CandidateResolver","methodName":"checkAllValueArguments","parameters":["CallCandidateResolutionContext","ResolveArgumentsMode"],"returnType":"ValueArgumentsCheckingResult"},2,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.TypeMappingConfiguration","methodName":"preprocessType","parameters":["KotlinType"],"returnType":"KotlinType"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.callResolverUtil.CallResolverUtilKt","methodName":"getErasedReceiverType","parameters":["ReceiverParameterDescriptor","CallableDescriptor"],"returnType":"KotlinType"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.RedundantNullCheckMethodTransformer$TransformerPass$NullabilityAssumptionsBuilder","methodName":"injectNullabilityAssumptions","parameters":[""],"returnType":"NullabilityAssumptions"},64,{"pathToFun":"org.jetbrains.kotlin.codegen.ClosureCodegen","methodName":"getErasedInvokeFunction","parameters":["FunctionDescriptor"],"returnType":"FunctionDescriptor"},38,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackAnalyzer$InternalAnalyzer","methodName":"visitControlFlowEdge","parameters":["Int","Int"],"returnType":"Boolean"},10,{"pathToFun":"org.jetbrains.kotlin.contracts.EffectsExtractingVisitor","methodName":"createDataFlowValue","parameters":["ExtensionReceiver"],"returnType":"DataFlowValue"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackAnalyzer$InternalAnalyzer","methodName":"saveStackAndClear","parameters":["FixStackFrame","AbstractInsnNode"],"returnType":"Unit"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.inlineCodegenUtilsKt","methodName":"isMarkedReturn","parameters":["AbstractInsnNode"],"returnType":"Any"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.PopBackwardPropagationTransformer$Transformer","methodName":"removeUnneededNopsInRange","parameters":["AbstractInsnNode","AbstractInsnNode"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"getCandidateDescriptor","parameters":[""],"returnType":"D"},33,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.ErrorCandidateContext","methodName":"add","parameters":["ErrorCandidate"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.util.Checks","methodName":"isApplicable","parameters":["FunctionDescriptor"],"returnType":"Boolean"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallResolver","methodName":"resolveConstructorCall","parameters":["BasicCallResolutionContext","KtReferenceExpression","KotlinType"],"returnType":"OverloadResolutionResults"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionReferenceGenerationStrategy","methodName":"doGenerateBody","parameters":["ExpressionCodegen","JvmMethodSignature"],"returnType":"void"},20,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadResolutionResultsImpl","methodName":"isNothing","parameters":[""],"returnType":"boolean"},3,{"pathToFun":"org.jetbrains.kotlin.types.FlexibleTypeImpl","methodName":"runAssertions","parameters":[""],"returnType":"Unit"},61,{"pathToFun":"org.jetbrains.kotlin.contracts.description.ContractProviderImpl","methodName":"getContractDescription","parameters":[""],"returnType":"ContractDescription"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowValueFactoryImpl","methodName":"createDataFlowValueForStableReceiver","parameters":["ReceiverValue"],"returnType":"Any"},28,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"makeDefinitelyNotNullOrNotNull","parameters":["KotlinTypeMarker"],"returnType":"KotlinTypeMarker"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallResolver","methodName":"completeTypeInferenceDependentOnFunctionLiterals","parameters":["BasicCallResolutionContext","OverloadResolutionResultsImpl","TracingStrategy"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractClassDescriptor","methodName":"isDefinitelyNotSamInterface","parameters":[""],"returnType":"boolean"},35,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.BoxedBasicValueKt","methodName":"getUnboxedType","parameters":["Type","GenerationState"],"returnType":"Type"},48,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.MethodInliner","methodName":"recordTransformation","parameters":["TransformationInfo"],"returnType":"Unit"},7,{"pathToFun":"org.jetbrains.kotlin.builtins.ReflectionTypes","methodName":"getKFunctionType","parameters":["Annotations","KotlinType","List","List","KotlinType","KotlinBuiltIns","Boolean"],"returnType":"SimpleType"},20,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitUnaryExpression","parameters":["KtUnaryExpression","D"],"returnType":"R"},18,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"visitCallableReferenceExpression","parameters":["KtCallableReferenceExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},2,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver$LHSResolutionResult","methodName":"commit","parameters":[""],"returnType":"T"},10,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder","methodName":"returns","parameters":["String","JavaTypeQualifiers"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.SavedStackDescriptor","methodName":"isNotEmpty","parameters":[""],"returnType":"Boolean"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.QualifiedExpressionResolveUtilKt","methodName":"resolveQualifierReferenceTarget","parameters":["Qualifier","DeclarationDescriptor","ExpressionTypingContext"],"returnType":"DeclarationDescriptor"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackAnalyzer$InternalAnalyzer$FixStackFrame","methodName":"pop","parameters":[""],"returnType":"BasicValue"},10,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.typeEnhancementKt","methodName":"enhance","parameters":["KotlinType","(Int) -> JavaTypeQualifiers"],"returnType":"Any"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.NewResolutionOldInference$CandidateFactoryImpl","methodName":"createDiagnosticsForCandidate","parameters":["CandidateWithBoundDispatchReceiver","ResolvedCallImpl"],"returnType":"List"},2,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"createProjection","parameters":["KotlinType","Variance","TypeParameterDescriptor"],"returnType":"TypeProjection"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.DelegatingCall","methodName":"getCalleeExpression","parameters":[""],"returnType":"KtExpression"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.AllUnderImportScope","methodName":"recordLookup","parameters":["Name","LookupLocation"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.ArgumentTypeResolver","methodName":"isSubtypeOfForArgumentType","parameters":["KotlinType","KotlinType"],"returnType":"boolean"},12,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"getDataFlowInfoForArguments","parameters":[""],"returnType":"MutableDataFlowInfoForArguments"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.JvmRuntimeTypes","methodName":"getSupertypesForFunctionReference","parameters":["FunctionDescriptor","AnonymousFunctionDescriptor","Boolean","Boolean","Boolean"],"returnType":"Collection"},20,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitSuperTypeCallEntry","parameters":["KtSuperTypeCallEntry"],"returnType":"void"},7,{"pathToFun":"org.jetbrains.kotlin.types.expressions.OperatorConventions","methodName":"getNameForOperationSymbol","parameters":["KtToken","boolean","boolean"],"returnType":"Name"},77,{"pathToFun":"org.jetbrains.kotlin.contracts.description.InvocationKindKt","methodName":"canBeRevisited","parameters":["InvocationKind"],"returnType":"Boolean"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"createValueArgumentsMap","parameters":["CallableDescriptor"],"returnType":"Map"},33,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tasks.ResolutionCandidate","methodName":"getKnownTypeParametersResultingSubstitutor","parameters":[""],"returnType":"TypeSubstitutor"},80,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl","methodName":"substitute","parameters":["TypeSubstitutor"],"returnType":"PropertyDescriptor"},27,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallCompleter","methodName":"completeArguments","parameters":["BasicCallResolutionContext","OverloadResolutionResultsImpl"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiFactory","methodName":"createFile","parameters":["String","String"],"returnType":"KtFile"},28,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadResolutionResultsImpl","methodName":"getTrace","parameters":[""],"returnType":"DelegatingBindingTrace"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackMethodTransformer","methodName":"analyzeAndTransformBreakContinueGotos","parameters":["FixStackContext","String","MethodNode"],"returnType":"Unit"},10,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyGetterDescriptorImpl","methodName":"getOverriddenDescriptors","parameters":[""],"returnType":"Collection"},64,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"unboxPrimitiveTypeOrNull","parameters":["Type"],"returnType":"Type"},54,{"pathToFun":"org.jetbrains.kotlin.contracts.description.ContractDescription","methodName":"getFunctor","parameters":["ModuleDescriptor"],"returnType":"Functor"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.LocalVariablesManager","methodName":"getBeforeInlineDescriptor","parameters":["AbstractInsnNode"],"returnType":"SavedStackDescriptor"},6,{"pathToFun":"org.jetbrains.kotlin.psi.KtSuperTypeCallEntry","methodName":"getCalleeExpression","parameters":[""],"returnType":"KtConstructorCalleeExpression"},7,{"pathToFun":"org.jetbrains.kotlin.load.java.descriptors.JavaMethodDescriptor","methodName":"initialize","parameters":["ReceiverParameterDescriptor","ReceiverParameterDescriptor","List","List","KotlinType","Modality","Visibility","Map"],"returnType":"SimpleFunctionDescriptorImpl"},64,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl","methodName":"getOverriddenDescriptors","parameters":[""],"returnType":"Collection"},66,{"pathToFun":"org.jetbrains.kotlin.types.DelegatingSimpleTypeImpl","methodName":"makeNullableAsSpecified","parameters":["Boolean"],"returnType":"SimpleType"},76,{"pathToFun":"org.jetbrains.kotlin.types.StarProjectionImplKt","methodName":"starProjectionType","parameters":["TypeParameterDescriptor"],"returnType":"KotlinType"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.SubstitutingScope","methodName":"definitelyDoesNotContainName","parameters":["Name"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.DelegatingBindingTrace","methodName":"report","parameters":["Diagnostic"],"returnType":"Unit"},20,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.KotlinResolutionStatelessCallbacksImpl","methodName":"createConstraintSystemForOverloadResolution","parameters":["ConstraintInjector","KotlinBuiltIns"],"returnType":"SimpleConstraintSystem"},26,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"getExtensionReceiver","parameters":[""],"returnType":"ReceiverValue"},33,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallResolver","methodName":"computeTasksFromCandidatesAndResolvedCall","parameters":["BasicCallResolutionContext","KtReferenceExpression","Collection"],"returnType":"OverloadResolutionResults"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.PsiSourceCompilerForInline","methodName":"generateLambdaBody","parameters":["ExpressionLambda"],"returnType":"SMAPAndMethodNode"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.DeprecatedCallChecker","methodName":"shouldCheckPropertyGetter","parameters":["PsiElement"],"returnType":"Boolean"},51,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CandidateResolver","methodName":"processTypeArguments","parameters":["CallCandidateResolutionContext"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"resolveMethodSignature","parameters":["JavaMethod","List","KotlinType","List"],"returnType":"MethodSignatureData"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CandidateResolver","methodName":"checkVisibilityWithoutReceiver","parameters":["CallCandidateResolutionContext"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadResolutionResultsImpl","methodName":"getResultingCall","parameters":[""],"returnType":"MutableResolvedCall"},2,{"pathToFun":"org.jetbrains.kotlin.load.java.propertiesConventionUtilKt","methodName":"propertyNameByGetMethodName","parameters":["Name"],"returnType":"Name"},36,{"pathToFun":"org.jetbrains.kotlin.resolve.LazyExplicitImportScope","methodName":"storeReferencesToDescriptors","parameters":[""],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtImportDirective","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.LocalVarRemapper","methodName":"visitLocalVariable","parameters":["String","String","String","Label","Label","Int","MethodVisitor"],"returnType":"Unit"},10,{"pathToFun":"org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt","methodName":"isDocumentedAnnotation","parameters":["Annotated"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"getAnnotationType","parameters":[""],"returnType":"SimpleType"},1,{"pathToFun":"org.jetbrains.kotlin.types.ErrorUtils","methodName":"createErrorFunction","parameters":["ErrorScope"],"returnType":"SimpleFunctionDescriptor"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CandidateResolver","methodName":"getReceiverSuper","parameters":["Receiver"],"returnType":"KtSuperExpression"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.JvmCodegenUtil","methodName":"couldUseDirectAccessToProperty","parameters":["PropertyDescriptor","boolean","boolean","MethodContext","boolean"],"returnType":"boolean"},51,{"pathToFun":"org.jetbrains.kotlin.psi.KtImportDirective","methodName":"isAllUnder","parameters":[""],"returnType":"boolean"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateClassLiteralReference","parameters":["DoubleColonLHS","KtExpression","boolean"],"returnType":"StackValue"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadingConflictResolver","methodName":"findMaximallySpecific","parameters":["Set","CheckArgumentTypesMode","Boolean"],"returnType":"C"},26,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$Receiver","methodName":"putSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"void"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.TypeRemapper","methodName":"registerTypeParameter","parameters":["TypeParameterMapping"],"returnType":"Unit"},10,{"pathToFun":"org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt","methodName":"getAnnotationRetention","parameters":["Annotated"],"returnType":"KotlinRetention"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"visitConstantExpression","parameters":["KtConstantExpression","KotlinType"],"returnType":"CompileTimeConstant"},58,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.ErrorDescriptorResolutionPart","methodName":"process","parameters":["KotlinResolutionCandidate","Int"],"returnType":"Unit"},9,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.methodSignatureMappingKt","methodName":"appendErasedType","parameters":["StringBuilder","KotlinType"],"returnType":"Unit"},64,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitConstructorCalleeExpression","parameters":["KtConstructorCalleeExpression","Void"],"returnType":"Void"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CandidateResolver","methodName":"checkReceiverTypeError","parameters":["CallCandidateResolutionContext","ReceiverParameterDescriptor","ReceiverValue"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.ResolutionResultsHandler","methodName":"computeSuccessfulResult","parameters":["CallResolutionContext","TracingStrategy","Set","Set","CheckArgumentTypesMode","LanguageVersionSettings"],"returnType":"OverloadResolutionResultsImpl"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitImportDirective","parameters":["KtImportDirective","Void"],"returnType":"Void"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InlineResult","methodName":"mergeWithNotChangeInfo","parameters":["InlineResult"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallCompleter","methodName":"completeAllCandidates","parameters":["BasicCallResolutionContext","OverloadResolutionResultsImpl"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.ResolutionStatus","methodName":"combine","parameters":["ResolutionStatus"],"returnType":"ResolutionStatus"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtOperationReferenceExpression","methodName":"isConventionOperator","parameters":[""],"returnType":"Boolean"},77,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.NewResolutionOldInference$ImplicitScopeTowerImpl","methodName":"getImplicitReceiver","parameters":["LexicalScope"],"returnType":"ReceiverValueWithSmartCastInfo"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CandidateResolver","methodName":"performResolutionForCandidateCall","parameters":["CallCandidateResolutionContext","CheckArgumentTypesMode"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"getStatus","parameters":[""],"returnType":"ResolutionStatus"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.ArgumentsToParametersMapper$CallArgumentProcessor","methodName":"addVarargArgument","parameters":["KotlinCallArgument"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.VarargValueArgument","methodName":"addArgument","parameters":["ValueArgument"],"returnType":"void"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"addStatus","parameters":["ResolutionStatus"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.callableReferenceUtilKt","methodName":"getSignatureString","parameters":["CallableDescriptor","GenerationState","Boolean"],"returnType":"String"},21,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader","methodName":"loadPropertyAnnotations","parameters":["ProtoContainer","ProtoBuf.Property","PropertyRelatedElement"],"returnType":"List"},26,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.DslScopeViolationCallChecker","methodName":"checkCallImplicitReceiver","parameters":["ReceiverValue","ResolvedCall","PsiElement","CallCheckerContext"],"returnType":"Unit"},19,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.signatureEnhancementKt","methodName":"select","parameters":["Set","NullabilityQualifier","Boolean"],"returnType":"Any"},64,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InlineAdapter","methodName":"getNextLocalIndex","parameters":[""],"returnType":"int"},6,{"pathToFun":"org.jetbrains.kotlin.types.model.MarkerExtensionsKt","methodName":"dependsOnTypeConstructor","parameters":["KotlinTypeMarker","TypeSystemInferenceExtensionContext","Set"],"returnType":"Any"},7,{"pathToFun":"org.jetbrains.kotlin.types.expressions.LabelResolver","methodName":"getCallerName","parameters":["KtExpression"],"returnType":"Name"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.RedundantNullCheckMethodTransformerKt","methodName":"isThrowIntrinsic","parameters":["AbstractInsnNode"],"returnType":"Any"},64,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitDoubleColonExpression","parameters":["KtDoubleColonExpression"],"returnType":"void"},22,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContextKt","methodName":"captureFromExpressionInternal","parameters":["UnwrappedType"],"returnType":"Any"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.ParametersBuilder$Companion","methodName":"initializeBuilderFrom","parameters":["Type","String","LambdaInfo","Boolean"],"returnType":"ParametersBuilder"},6,{"pathToFun":"org.jetbrains.kotlin.contracts.ContractDeserializerImpl$ContractDeserializationWorker","methodName":"deserializeSimpleEffect","parameters":["ProtoBuf.Effect"],"returnType":"EffectDeclaration"},6,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.JvmType","methodName":"toString","parameters":[""],"returnType":"Any"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallCompleter","methodName":"completeResolvedCallAndArguments","parameters":["MutableResolvedCall","OverloadResolutionResultsImpl","BasicCallResolutionContext","TracingStrategy"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadingConflictResolver","methodName":"exactMaxWith","parameters":["Collection","(C, C) -> Boolean"],"returnType":"C"},26,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.DelegatingCall","methodName":"getValueArgumentList","parameters":[""],"returnType":"KtValueArgumentList"},10,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker\\$ExpressionValueArgument","methodName":"isExternal","parameters":[""],"returnType":"boolean"},81,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.ArgumentTypeResolver","methodName":"getCallableReferenceExpressionIfAny","parameters":["KtExpression","StatementFilter"],"returnType":"KtCallableReferenceExpression"},28,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"isMemberExtension","parameters":["CallableMemberDescriptor"],"returnType":"Boolean"},21,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl","methodName":"copy","parameters":["DeclarationDescriptor","Modality","Visibility","Kind","boolean"],"returnType":"PropertyDescriptor"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.SyntheticScopesKt","methodName":"collectSyntheticConstructors","parameters":["SyntheticScopes","ConstructorDescriptor"],"returnType":"Any"},7,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.SignatureEnhancement$SignatureParts","methodName":"extractNullability","parameters":["Annotations"],"returnType":"NullabilityQualifierWithMigrationStatus"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.NewResolutionOldInference$ImplicitScopeTowerImpl","methodName":"interceptVariableCandidates","parameters":["ResolutionScope","Name","Collection","LookupLocation","ReceiverValueWithSmartCastInfo","ReceiverValueWithSmartCastInfo"],"returnType":"Collection"},2,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder","methodName":"returns","parameters":["JvmPrimitiveType"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.contracts.interpretation.ContractInterpretationDispatcher","methodName":"convertContractDescriptorToFunctor","parameters":["ContractDescription"],"returnType":"Functor"},6,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyAccessorDescriptorImpl","methodName":"isDefault","parameters":[""],"returnType":"boolean"},64,{"pathToFun":"org.jetbrains.kotlin.types.DescriptorSubstitutor","methodName":"substituteTypeParameters","parameters":["List","TypeSubstitution","DeclarationDescriptor","List"],"returnType":"TypeSubstitutor"},30,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalWritableScope$Snapshot","methodName":"getContributedClassifier","parameters":["Name","LookupLocation"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitPostfixExpression","parameters":["KtPostfixExpression","Void"],"returnType":"Void"},15,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackMethodTransformer","methodName":"removeAlwaysTrueIfeqMarkers","parameters":["FixStackContext","MethodNode"],"returnType":"Unit"},11,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InlineResult","methodName":"merge","parameters":["InlineResult"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingUtils","methodName":"createCallForSpecialConstruction","parameters":["KtExpression","KtExpression","List"],"returnType":"Call"},22,{"pathToFun":"org.jetbrains.kotlin.contracts.model.MutableContextInfo","methodName":"fire","parameters":["ESEffect"],"returnType":"Any"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"addRemainingTasks","parameters":["Function0"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.ResolutionResultsHandler","methodName":"computeResultAndReportErrors","parameters":["CallResolutionContext","TracingStrategy","Collection","LanguageVersionSettings"],"returnType":"OverloadResolutionResultsImpl"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.KotlinResolutionStatelessCallbacksImpl","methodName":"isDescriptorFromSource","parameters":["CallableDescriptor"],"returnType":"Any"},29,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"performRemainingTasks","parameters":[""],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitSuperTypeCallEntry","parameters":["KtSuperTypeCallEntry","D"],"returnType":"R"},7,{"pathToFun":"org.jetbrains.kotlin.contracts.model.visitors.InfoCollector","methodName":"collectFromEffect","parameters":["ESEffect"],"returnType":"MutableContextInfo"},18,{"pathToFun":"org.jetbrains.kotlin.psi.KtConstantExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},58,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker\\$ExpressionValueArgument","methodName":"isNamed","parameters":[""],"returnType":"boolean"},81,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.VarargValueArgument","methodName":"getArguments","parameters":[""],"returnType":"List"},11,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.IdentifierInfo$Qualified","methodName":"hashCode","parameters":[""],"returnType":"Any"},59,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.resolvedCallUtil.resolvedCallUtilKt","methodName":"hasThisOrNoDispatchReceiver","parameters":["ResolvedCall","BindingContext"],"returnType":"Boolean"},40,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionReferenceGenerationStrategy","methodName":"computeAndSaveArguments","parameters":["List","ExpressionCodegen","int"],"returnType":"void"},20,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.TowerUtilsKt","methodName":"forceResolution","parameters":["C"],"returnType":"C"},75,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.NewResolvedCallImpl","methodName":"updateExtensionReceiverType","parameters":["KotlinType"],"returnType":"Unit"},17,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.utils.ScopeUtilsKt","methodName":"findClassifier","parameters":["HierarchicalScope","Name","LookupLocation"],"returnType":"ClassifierDescriptor"},12,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowInfoImpl","methodName":"putNullabilityAndTypeInfo","parameters":["MutableMap","DataFlowValue","Nullability","LanguageVersionSettings","SetMultimap","Boolean"],"returnType":"Unit"},67,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.PopBackwardPropagationTransformer$Transformer","methodName":"getInputTop","parameters":["AbstractInsnNode"],"returnType":"SourceValue"},56,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.SyntheticScopesKt","methodName":"collectSyntheticExtensionProperties","parameters":["SyntheticScopes","Collection","Name","LookupLocation"],"returnType":"Any"},31,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.DelegatingCall","methodName":"getCallElement","parameters":[""],"returnType":"KtElement"},10,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.BinaryClassAnnotationAndConstantLoaderImpl","methodName":"loadTypeAnnotation","parameters":["ProtoBuf.Annotation","NameResolver"],"returnType":"AnnotationDescriptor"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker\\$ExpressionValueArgument","methodName":"getSpreadElement","parameters":[""],"returnType":"LeafPsiElement"},83,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.InferenceUtilsKt","methodName":"substitute","parameters":["TypeSubstitutor","UnwrappedType"],"returnType":"UnwrappedType"},21,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tasks.ResolutionCandidate","methodName":"create","parameters":["Call","D","TypeSubstitutor"],"returnType":"ResolutionCandidate"},22,{"pathToFun":"org.jetbrains.kotlin.types.SpecialTypesKt","methodName":"makeDefinitelyNotNullOrNotNull","parameters":["UnwrappedType"],"returnType":"UnwrappedType"},10,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallResolver","methodName":"resolveCallWithKnownCandidate","parameters":["Call","TracingStrategy","ResolutionContext","ResolutionCandidate","MutableDataFlowInfoForArguments"],"returnType":"OverloadResolutionResults"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.ArgumentGeneratorKt","methodName":"defaultValueFromJava","parameters":["CallableDescriptor","Int"],"returnType":"Boolean"},9,{"pathToFun":"org.jetbrains.kotlin.types.expressions.LabelResolver","methodName":"getLabelForFunctionalExpression","parameters":["KtExpression"],"returnType":"Name"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.MethodInliner$Companion","methodName":"putStackValuesIntoLocalsForLambdaOnInvoke","parameters":["List","List","List","Int","InstructionAdapter","String"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CandidateResolver","methodName":"checkDispatchReceiver","parameters":["CallCandidateResolutionContext"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.JvmCodegenUtil","methodName":"isCallInsideSameClassAsFieldRepresentingProperty","parameters":["PropertyDescriptor","CodegenContext"],"returnType":"boolean"},51,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"putJavaLangClassInstance","parameters":["InstructionAdapter","Type","KotlinType","KotlinTypeMapper"],"returnType":"void"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"unit","parameters":[""],"returnType":"StackValue"},27,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"getAnnotation","parameters":[""],"returnType":"ClassDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.RedundantNullCheckMethodTransformer$TransformerPass","methodName":"analyzeNullabilities","parameters":[""],"returnType":"Map"},64,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"wrapJavaClassIntoKClass","parameters":["InstructionAdapter"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.predefinedEnhancementInfoKt","methodName":"enhancement","parameters":["SignatureEnhancementBuilder.() -> Unit"],"returnType":"Map"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.FlatSignature$Companion","methodName":"create","parameters":["T","CallableDescriptor","Int","List"],"returnType":"FlatSignature"},26,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.NewResolutionOldInference","methodName":"runResolution","parameters":["BasicCallResolutionContext","Name","ResolutionKind","TracingStrategy"],"returnType":"OverloadResolutionResultsImpl"},2,{"pathToFun":"org.jetbrains.kotlin.types.model.MarkerExtensionsKt","methodName":"dependsOnTypeParameters","parameters":["KotlinTypeMarker","TypeSystemInferenceExtensionContext","Collection"],"returnType":"Any"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"createDefaultValue","parameters":["Type"],"returnType":"StackValue"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxingInterpreter","methodName":"markValueAsDirty","parameters":["BoxedBasicValue"],"returnType":"Unit"},47,{"pathToFun":"org.jetbrains.kotlin.psi.KtSimpleNameExpressionImpl","methodName":"getReferencedName","parameters":[""],"returnType":"Any"},77,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"isCompleted","parameters":[""],"returnType":"boolean"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.BoxingInterpreter","methodName":"createNewBoxing","parameters":["AbstractInsnNode","Type","ProgressionIteratorBasicValue"],"returnType":"BasicValue"},48,{"pathToFun":"org.jetbrains.kotlin.extensions.internal.CandidateInterceptor","methodName":"interceptFunctionCandidates","parameters":["Collection","ImplicitScopeTower","BasicCallResolutionContext","ResolutionScope","CallResolver","Name","LookupLocation"],"returnType":"Collection"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackContext","methodName":"isAnalysisRequired","parameters":[""],"returnType":"Boolean"},11,{"pathToFun":"org.jetbrains.kotlin.psi.KtSuperTypeCallEntry","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.AnnotationCodegen","methodName":"generateDocumentedAnnotation","parameters":["ClassDescriptor","Set"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"predefinedOperation","parameters":["KtExpression","ControlFlowBuilder.PredefinedOperation","List"],"returnType":"OperationInstruction"},17,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.PopBackwardPropagationTransformer$Transformer","methodName":"replaceWithNopTransformation","parameters":[""],"returnType":"Transformation"},4,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaScope","methodName":"resolveMethodToFunctionDescriptor","parameters":["JavaMethod"],"returnType":"JavaMethodDescriptor"},64,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitConstantExpression","parameters":["KtConstantExpression","StackValue"],"returnType":"StackValue"},57,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"loadConstant","parameters":["KtExpression","CompileTimeConstant"],"returnType":"Any"},58,{"pathToFun":"org.jetbrains.kotlin.resolve.LazyExplicitImportScope","methodName":"getContributedVariables","parameters":["Name","LookupLocation"],"returnType":"Collection"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.state.typeMappingUtilKt","methodName":"isMostPreciseCovariantArgument","parameters":["TypeSystemCommonBackendContext","KotlinTypeMarker"],"returnType":"Boolean"},29,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.SignatureEnhancement$SignatureParts","methodName":"enhance","parameters":["TypeEnhancementInfo"],"returnType":"PartEnhancementResult"},64,{"pathToFun":"org.jetbrains.kotlin.contracts.interpretation.ContractInterpretationDispatcher","methodName":"interpretVariable","parameters":["VariableReference"],"returnType":"ESVariable"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.ErrorCandidateFactoryKt","methodName":"collectErrorCandidatesForVariable","parameters":["ImplicitScopeTower","Name","DetailedReceiver"],"returnType":"Collection"},3,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.SignatureBuildingComponents","methodName":"escapeClassName","parameters":["String"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"resolveCallableReference","parameters":["KtCallableReferenceExpression","ExpressionTypingContext","ResolveArgumentsMode"],"returnType":"Pair"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateExtensionReceiver","parameters":["CallableDescriptor"],"returnType":"StackValue"},11,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxingInterpreter","methodName":"onNewBoxedValue","parameters":["BoxedBasicValue"],"returnType":"Unit"},48,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.TowerResolver","methodName":"runWithEmptyTowerData","parameters":["ScopeTowerProcessor","ResultCollector","Boolean"],"returnType":"Collection"},69,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"getResultingDescriptor","parameters":[""],"returnType":"D"},33,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.SimpleCandidateFactory","methodName":"createErrorCandidate","parameters":[""],"returnType":"KotlinResolutionCandidate"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.TypeRemapper$Companion","methodName":"createFrom","parameters":["TypeRemapper","Map","Boolean"],"returnType":"TypeRemapper"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InlineOnlySmapSkipper","methodName":"onInlineLambdaStart","parameters":["MethodVisitor","LambdaInfo","SourceMapper"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallCompleter","methodName":"completeCall","parameters":["BasicCallResolutionContext","OverloadResolutionResultsImpl","TracingStrategy"],"returnType":"OverloadResolutionResultsImpl"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.CompileTimeConstantChecker","methodName":"checkConstantExpressionType","parameters":["ConstantValue","KtConstantExpression","KotlinType"],"returnType":"boolean"},29,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"getExplicitReceiverKind","parameters":[""],"returnType":"ExplicitReceiverKind"},33,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver$Companion","methodName":"receiverTypeFor","parameters":["CallableDescriptor","DoubleColonLHS"],"returnType":"KotlinType"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.ChainedMemberScope","methodName":"recordLookup","parameters":["Name","LookupLocation"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"getNameForReceiverParameter","parameters":["CallableDescriptor","BindingContext","LanguageVersionSettings"],"returnType":"String"},15,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.MemberScopeTowerLevel","methodName":"recordLookup","parameters":["Name"],"returnType":"Unit"},11,{"pathToFun":"org.jetbrains.kotlin.psi.UserDataProperty","methodName":"setValue","parameters":["R","KProperty","T"],"returnType":"Any"},28,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.DefaultValueArgument","methodName":"getArguments","parameters":[""],"returnType":"List"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker\\$ExpressionValueArgument","methodName":"hashCode","parameters":[""],"returnType":"int"},81,{"pathToFun":"org.jetbrains.kotlin.load.java.components.SignaturePropagator\\$PropagatedSignature","methodName":"getReceiverType","parameters":[""],"returnType":"KotlinType"},64,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InlineOnlySmapSkipper","methodName":"onInlineLambdaEnd","parameters":["MethodVisitor"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingUtils","methodName":"createKnownTypeParameterSubstitutorForSpecialCall","parameters":["ResolveConstruct","SimpleFunctionDescriptorImpl","KotlinType","LanguageVersionSettings"],"returnType":"TypeSubstitutor"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper$Companion","methodName":"isConstructor","parameters":["Method"],"returnType":"Boolean"},9,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"createNonSyntheticValue","parameters":["KtElement","MagicKind","KtElement"],"returnType":"PseudoValue"},37,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.nullabilityValuesKt","methodName":"getNullability","parameters":["BasicValue"],"returnType":"Nullability"},64,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"getLabeledThisNameForReceiver","parameters":["CallableDescriptor","BindingContext","LanguageVersionSettings","String","String"],"returnType":"String"},15,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadResolutionResultsImpl","methodName":"getResultingDescriptor","parameters":[""],"returnType":"D"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.SyntheticScope$Default","methodName":"getSyntheticConstructor","parameters":["ConstructorDescriptor"],"returnType":"ConstructorDescriptor"},7,{"pathToFun":"org.jetbrains.kotlin.types.expressions.LabelResolver","methodName":"getContainingCallExpression","parameters":["KtExpression"],"returnType":"KtCallExpression"},10,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadingConflictResolver","methodName":"isNotLessSpecificCallWithArgumentMapping","parameters":["FlatSignature","FlatSignature","Boolean"],"returnType":"Boolean"},26,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.LazyJavaAnnotations","methodName":"iterator","parameters":[""],"returnType":"Any"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.MutableVariableWithConstraints","methodName":"removeLastConstraints","parameters":["(Constraint) -> Boolean"],"returnType":"Unit"},11,{"pathToFun":"org.jetbrains.kotlin.codegen.CallReceiver","methodName":"calcExtensionReceiverType","parameters":["ResolvedCall","ReceiverParameterDescriptor","KotlinTypeMapper","Callable","GenerationState"],"returnType":"JvmKotlinType"},18,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$ArrayElement","methodName":"storeSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"void"},5,{"pathToFun":"org.jetbrains.kotlin.psi.KtImportDirective","methodName":"getImportedReference","parameters":[""],"returnType":"KtExpression"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.callResolverUtil.CallResolverUtilKt","methodName":"isInvokeCallOnVariable","parameters":["Call"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker\\$CallImpl","methodName":"getTypeArgumentList","parameters":[""],"returnType":"KtTypeArgumentList"},73,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext","methodName":"substitutionSupertypePolicy","parameters":["SimpleTypeMarker"],"returnType":"SupertypesPolicy"},34,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.PopBackwardPropagationTransformer$Transformer","methodName":"isDontTouch","parameters":["AbstractInsnNode"],"returnType":"Any"},56,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadResolutionResultsImpl","methodName":"setAllCandidates","parameters":["Collection"],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"unCapture","parameters":["SimpleType"],"returnType":"UnwrappedType"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackAnalyzer$InternalAnalyzer$FixStackFrame","methodName":"getStackContent","parameters":[""],"returnType":"List"},10,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.InferenceSession$Companion","methodName":"addErrorCallInfo","parameters":["ErrorCallInfo"],"returnType":"Unit"},7,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitConstantExpression","parameters":["KtConstantExpression"],"returnType":"Unit"},58,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl\\$CopyConfiguration","methodName":"setKind","parameters":["Kind"],"returnType":"CopyConfiguration"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"createArgumentsToParameterMap","parameters":["CallableDescriptor"],"returnType":"Map"},33,{"pathToFun":"org.jetbrains.kotlin.diagnostics.DiagnosticFactory3","methodName":"on","parameters":["E","A","B","C"],"returnType":"ParametrizedDiagnostic"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.SmartCastManager","methodName":"getSmartCastReceiverResult","parameters":["ReceiverValue","KotlinType","ResolutionContext"],"returnType":"ReceiverSmartCastResult"},2,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl","methodName":"getUserData","parameters":["UserDataKey"],"returnType":"V"},52,{"pathToFun":"org.jetbrains.kotlin.builtins.functions.FunctionClassDescriptor","methodName":"getSource","parameters":[""],"returnType":"SourceElement"},41,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper$Companion","methodName":"mapDefaultFieldName","parameters":["PropertyDescriptor","Boolean"],"returnType":"String"},50,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.LocalVariablesManager$AllocatedHandle","methodName":"isFullyEmitted","parameters":[""],"returnType":"Boolean"},10,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.SignatureEnhancementBuilder","methodName":"forClass","parameters":["String","ClassEnhancementBuilder.() -> Unit"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.TowerResolver$SuccessfulResultCollector","methodName":"getFinalCandidates","parameters":[""],"returnType":"Collection"},14,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"correctElementType","parameters":["Type"],"returnType":"Type"},11,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker","methodName":"makeValueArgument","parameters":["KtExpression","KtElement"],"returnType":"ValueArgument"},81,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkValOnAnnotationParameter","parameters":["KtClass"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitSuperTypeCallEntry","parameters":["KtSuperTypeCallEntry","Void"],"returnType":"Void"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.PopBackwardPropagationTransformer$Transformer","methodName":"isTransformablePopOperand","parameters":["AbstractInsnNode"],"returnType":"Any"},31,{"pathToFun":"org.jetbrains.kotlin.load.java.descriptors.JavaMethodDescriptor","methodName":"setParameterNamesStatus","parameters":["boolean","boolean"],"returnType":"void"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.NewResolutionOldInference$ResolutionKind$CallableReference","methodName":"createTowerProcessor","parameters":["NewResolutionOldInference","Name","TracingStrategy","ImplicitScopeTower","DetailedReceiver","BasicCallResolutionContext"],"returnType":"ScopeTowerProcessor"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadResolutionResultsImpl","methodName":"success","parameters":["MutableResolvedCall"],"returnType":"OverloadResolutionResultsImpl"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.ParametersBuilder","methodName":"addNextParameter","parameters":["Type","Boolean","Type"],"returnType":"ParameterInfo"},12,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker\\$CallImpl","methodName":"toString","parameters":[""],"returnType":"String"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.SimpleConstraintSystemImpl","methodName":"hasContradiction","parameters":[""],"returnType":"Any"},26,{"pathToFun":"org.jetbrains.kotlin.types.expressions.OperatorConventions","methodName":"getNameForOperationSymbol","parameters":["KtToken"],"returnType":"Name"},76,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyAccessorDescriptorImpl","methodName":"getInitialSignatureDescriptor","parameters":[""],"returnType":"FunctionDescriptor"},66,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadingConflictResolver","methodName":"candidateDescriptor","parameters":["FlatSignature"],"returnType":"Any"},26,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.RedundantNullCheckMethodTransformer$TransformerPass$NullabilityAssumptions","methodName":"revert","parameters":[""],"returnType":"Unit"},64,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.StackTransformationUtilsKt","methodName":"generateStoreInstructions","parameters":["MethodNode","AbstractInsnNode","SavedStackDescriptor"],"returnType":"Unit"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.RedundantNullCheckMethodTransformer$TransformerPass$NullabilityAssumptionsBuilder","methodName":"injectAssumptions","parameters":[""],"returnType":"NullabilityAssumptions"},64,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl","methodName":"setVisibility","parameters":["Visibility"],"returnType":"void"},23,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.LocalVariablesManager","methodName":"allocateNewHandle","parameters":["Int","AbstractInsnNode","List"],"returnType":"SavedStackDescriptor"},10,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"isKnownToBeNotNull","parameters":["KtExpression","KotlinType","ExpressionTypingContext"],"returnType":"boolean"},14,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"closeImportWithErrorIfNewline","parameters":["Marker","Marker","String"],"returnType":"boolean"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.NullabilityInterpreter","methodName":"isReifiedSafeAs","parameters":["AbstractInsnNode"],"returnType":"Boolean"},64,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader","methodName":"loadPropertyBackingFieldAnnotations","parameters":["ProtoContainer","ProtoBuf.Property"],"returnType":"List"},24,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitClassLiteralExpression","parameters":["KtClassLiteralExpression","D"],"returnType":"R"},2,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"generateCallOrMarkUnresolved","parameters":["KtCallElement"],"returnType":"Unit"},7,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitUnaryExpression","parameters":["KtUnaryExpression"],"returnType":"void"},18,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackAnalyzer","methodName":"getActualStack","parameters":["AbstractInsnNode"],"returnType":"Any"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.DelegatingCall","methodName":"getValueArguments","parameters":[""],"returnType":"List"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.ParametersBuilder","methodName":"addThis","parameters":["Type","Boolean"],"returnType":"ParameterInfo"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.jvm.JvmPrimitiveType","methodName":"getByDesc","parameters":["String"],"returnType":"JvmPrimitiveType"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitCallableReferenceExpression","parameters":["KtCallableReferenceExpression","StackValue"],"returnType":"StackValue"},21,{"pathToFun":"org.jetbrains.kotlin.psi.KtSuperTypeCallEntry","methodName":"getTypeReference","parameters":[""],"returnType":"KtTypeReference"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getCompileTimeConstant","parameters":["KtExpression","BindingContext","boolean","boolean"],"returnType":"ConstantValue"},90,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitDoubleColonExpression","parameters":["KtDoubleColonExpression"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.TypeVariableDependencyInformationProvider","methodName":"getDeeplyDependentVariables","parameters":["TypeConstructorMarker"],"returnType":"Any"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.JvmCodegenUtil","methodName":"isConstOrHasJvmFieldAnnotation","parameters":["PropertyDescriptor"],"returnType":"boolean"},52,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"getMagicKind","parameters":["ControlFlowBuilder.PredefinedOperation"],"returnType":"Any"},17,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.inlineCodegenUtilsKt","methodName":"isOldSamWrapper","parameters":["String"],"returnType":"Any"},8,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowValueKindUtilsKt","methodName":"hasDefaultGetter","parameters":["PropertyDescriptor"],"returnType":"Boolean"},33,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tasks.TracingStrategyImpl","methodName":"unresolvedReference","parameters":["BindingTrace"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"captureFromExpression","parameters":["KotlinTypeMarker"],"returnType":"KotlinTypeMarker"},7,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingUtils","methodName":"resolveSpecialConstructionAsCall","parameters":["Call","ResolveConstruct","List","List","ExpressionTypingContext","MutableDataFlowInfoForArguments"],"returnType":"ResolvedCall"},22,{"pathToFun":"org.jetbrains.kotlin.contracts.ContractDeserializerImpl$ContractDeserializationWorker","methodName":"extractVariable","parameters":["ProtoBuf.Expression"],"returnType":"VariableReference"},6,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.SignatureEnhancement","methodName":"parts","parameters":["CallableMemberDescriptor","Annotated","Boolean","LazyJavaResolverContext","AnnotationTypeQualifierResolver.QualifierApplicabilityType","(CallableMemberDescriptor) -> KotlinType"],"returnType":"SignatureParts"},64,{"pathToFun":"org.jetbrains.kotlin.codegen.CallableMethod","methodName":"genInvokeDefaultInstruction","parameters":["InstructionAdapter"],"returnType":"Unit"},8,{"pathToFun":"org.jetbrains.kotlin.resolve.QualifiedExpressionResolver","methodName":"storeResult","parameters":["BindingTrace","KtSimpleNameExpression","Collection","DeclarationDescriptor","QualifierPosition","Boolean"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isUnitOrNullableUnit","parameters":["KotlinType"],"returnType":"boolean"},14,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.SignatureEnhancementBuilder","methodName":"build","parameters":[""],"returnType":"Map"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"reportUnsupportedCallableReferenceIfNeeded","parameters":["KtCallableReferenceExpression","ExpressionTypingContext","DoubleColonLHS","OverloadResolutionResults"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.JvmTypeFactoryImpl","methodName":"createObjectType","parameters":["String"],"returnType":"Any"},61,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.callResolverUtil.CallResolverUtilKt","methodName":"createResolutionCandidatesForConstructors","parameters":["LexicalScope","Call","KotlinType","Boolean","SyntheticScopes"],"returnType":"List"},7,{"pathToFun":"org.jetbrains.kotlin.load.java.components.SignaturePropagator\\$PropagatedSignature","methodName":"getValueParameters","parameters":[""],"returnType":"List"},64,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackAnalyzer$InternalAnalyzer","methodName":"executeBeforeInlineCallMarker","parameters":["FixStackFrame","AbstractInsnNode"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"visitCallableReferenceExpression","parameters":["KtCallableReferenceExpression"],"returnType":"void"},21,{"pathToFun":"org.jetbrains.kotlin.load.java.descriptors.JavaMethodDescriptor\\$ParameterNamesStatus","methodName":"get","parameters":["boolean","boolean"],"returnType":"ParameterNamesStatus"},64,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassDescriptor","methodName":"isInline","parameters":[""],"returnType":"Any"},64,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitCallableReferenceExpression","parameters":["KtCallableReferenceExpression"],"returnType":"void"},21,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.AnonymousObjectTransformationInfo","methodName":"shouldRegenerate","parameters":["Boolean"],"returnType":"Boolean"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.PopBackwardPropagationTransformer$Transformer","methodName":"propagatePopBackwards","parameters":["AbstractInsnNode","Int"],"returnType":"Unit"},56,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.FunctionDescriptorImpl","methodName":"putInUserDataMap","parameters":["UserDataKey","Object"],"returnType":"void"},6,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeCheckerContext$Companion","methodName":"classicSubstitutionSupertypePolicy","parameters":["ClassicTypeSystemContext","SimpleTypeMarker"],"returnType":"SupertypesPolicy.DoCustomTransform"},40,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.SimpleCandidateFactory","methodName":"createCandidate","parameters":["GivenCandidate"],"returnType":"KotlinResolutionCandidate"},69,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.TypedCompileTimeConstant","methodName":"toConstantValue","parameters":["KotlinType"],"returnType":"ConstantValue"},57,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadingConflictResolver","methodName":"tryCompareDescriptorsFromScripts","parameters":["CallableDescriptor","CallableDescriptor"],"returnType":"Boolean"},26,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DataFlowAnalyzer","methodName":"createCompileTimeConstantTypeInfo","parameters":["CompileTimeConstant","KtExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},58,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ResultTypeResolver","methodName":"isSuitableType","parameters":["Context","KotlinTypeMarker","VariableWithConstraints"],"returnType":"Boolean"},8,{"pathToFun":"org.jetbrains.kotlin.builtins.jvm.JavaToKotlinClassMap","methodName":"convertToOppositeMutability","parameters":["ClassDescriptor","Map","String"],"returnType":"ClassDescriptor"},3,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"unCapture","parameters":["KotlinType"],"returnType":"KotlinType"},2,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"shouldTryResolveLHSAsReservedCallChain","parameters":["KtDoubleColonExpression"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowInfoImpl","methodName":"equateOrDisequate","parameters":["DataFlowValue","DataFlowValue","LanguageVersionSettings","Boolean","Boolean"],"returnType":"DataFlowInfo"},66,{"pathToFun":"org.jetbrains.kotlin.resolve.QualifiedExpressionResolver","methodName":"computePackageFragmentToCheck","parameters":["KtFile","PackageFragmentDescriptor"],"returnType":"PackageFragmentDescriptor"},4,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl","methodName":"getAccessors","parameters":[""],"returnType":"List"},35,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"resolveDoubleColonLHS","parameters":["KtDoubleColonExpression","ExpressionTypingContext"],"returnType":"DoubleColonLHS"},10,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyAccessorDescriptorImpl","methodName":"setInitialSignatureDescriptor","parameters":["FunctionDescriptor"],"returnType":"void"},29,{"pathToFun":"org.jetbrains.kotlin.load.java.descriptors.JavaMethodDescriptor","methodName":"createJavaMethod","parameters":["DeclarationDescriptor","Annotations","Name","SourceElement"],"returnType":"JavaMethodDescriptor"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.BodyResolver","methodName":"recordConstructorDelegationCall","parameters":["BindingTrace","ConstructorDescriptor","ResolvedCall"],"returnType":"void"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"getCall","parameters":[""],"returnType":"Call"},33,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"isInstancePropertyWithStaticBackingField","parameters":["PropertyDescriptor"],"returnType":"boolean"},50,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiFactory","methodName":"createProperty","parameters":["String"],"returnType":"KtProperty"},24,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver$Companion","methodName":"createKCallableTypeForReference","parameters":["CallableDescriptor","DoubleColonLHS","ReflectionTypes","DeclarationDescriptor"],"returnType":"KotlinType"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.context.CallCandidateResolutionContext","methodName":"create","parameters":["MutableResolvedCall","CallResolutionContext","BindingTrace","TracingStrategy","Call","CandidateResolveMode"],"returnType":"CallCandidateResolutionContext"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.inlineCodegenUtilsKt","methodName":"isInteger","parameters":["String","Int"],"returnType":"Any"},10,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.SignatureEnhancement$SignatureParts","methodName":"extractQualifiersFromAnnotations","parameters":["KotlinType","Boolean","JavaTypeQualifiers"],"returnType":"JavaTypeQualifiers"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.DelegatingBindingTrace","methodName":"moveAllMyDataTo","parameters":["BindingTrace"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.inline.InlineUtil","methodName":"isInlinableParameterExpression","parameters":["KtExpression"],"returnType":"boolean"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"getValueArguments","parameters":[""],"returnType":"Map"},33,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"loadConstant","parameters":["KtExpression","CompileTimeConstant"],"returnType":"InstructionWithValue"},58,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.TypeMappingConfiguration","methodName":"getPredefinedFullInternalNameForClass","parameters":["ClassDescriptor"],"returnType":"String"},69,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CandidateResolver","methodName":"shouldContinue","parameters":["CallCandidateResolutionContext"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.PSICallResolver","methodName":"runResolutionAndInferenceForGivenCandidates","parameters":["BasicCallResolutionContext","Collection","TracingStrategy"],"returnType":"OverloadResolutionResults"},69,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"resolveCallableReferenceRHS","parameters":["KtCallableReferenceExpression","DoubleColonLHS","ResolutionContext","ResolveArgumentsMode"],"returnType":"OverloadResolutionResults"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"isActual","parameters":[""],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.CallBasedArgumentGenerator","methodName":"generateDefault","parameters":["Int","DefaultValueArgument"],"returnType":"Unit"},9,{"pathToFun":"org.jetbrains.kotlin.contracts.model.structure.ESVariable","methodName":"equals","parameters":["Any"],"returnType":"Boolean"},6,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.instructions.special.InlinedLocalFunctionDeclarationInstruction","methodName":"accept","parameters":["InstructionVisitor"],"returnType":"Any"},6,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.SignatureBuildingComponents","methodName":"javaFunction","parameters":["String"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitCallableReferenceExpression","parameters":["KtCallableReferenceExpression","D"],"returnType":"R"},21,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenBinding","methodName":"recordInnerClass","parameters":["BindingTrace","ClassDescriptor","ClassDescriptor"],"returnType":"void"},13,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$Property","methodName":"putSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"void"},51,{"pathToFun":"org.jetbrains.kotlin.types.AbstractFlexibilityChecker","methodName":"hasDifferentFlexibilityAtDepth","parameters":["TypeSystemCommonSuperTypesContext","Collection"],"returnType":"Boolean"},5,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"declareInlinedFunction","parameters":["KtElement","Pseudocode","InvocationKind"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.load.java.components.SignaturePropagator\\$PropagatedSignature","methodName":"getTypeParameters","parameters":[""],"returnType":"List"},64,{"pathToFun":"org.jetbrains.kotlin.codegen.VariableAsmNameManglingUtilsKt","methodName":"isValidCharacter","parameters":["Char"],"returnType":"Boolean"},14,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.MutableDataFlowInfoForArguments","methodName":"getResultInfo","parameters":[""],"returnType":"DataFlowInfo"},14,{"pathToFun":"org.jetbrains.kotlin.contracts.description.InvocationKindKt","methodName":"isDefinitelyVisited","parameters":["InvocationKind"],"returnType":"Boolean"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.DelegatingCall","methodName":"getExplicitReceiver","parameters":[""],"returnType":"Receiver"},7,{"pathToFun":"org.jetbrains.kotlin.contracts.model.functors.SubstitutingFunctor","methodName":"toESVariable","parameters":["ValueDescriptor"],"returnType":"ESVariable"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.ExpressionLambda","methodName":"generateLambdaBody","parameters":["SourceCompilerForInline","ReifiedTypeInliner"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.contracts.ContractDeserializerImpl$ContractDeserializationWorker","methodName":"deserializePossiblyConditionalEffect","parameters":["ProtoBuf.Effect"],"returnType":"EffectDeclaration"},6,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.instructions.InstructionVisitor","methodName":"visitUnconditionalJump","parameters":["UnconditionalJumpInstruction"],"returnType":"Unit"},71,{"pathToFun":"org.jetbrains.kotlin.psi.KtPostfixExpression","methodName":"getBaseExpression","parameters":[""],"returnType":"KtExpression"},15,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.ResolutionStatus","methodName":"chooseDifferent","parameters":["ResolutionStatus","ResolutionStatus"],"returnType":"ResolutionStatus"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorKt","methodName":"getReceiverExpressionType","parameters":["ResolvedCall"],"returnType":"KotlinType"},74,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ResultTypeResolver","methodName":"specialResultForIntersectionType","parameters":["Context","KotlinTypeMarker","KotlinTypeMarker"],"returnType":"KotlinTypeMarker"},8,{"pathToFun":"org.jetbrains.kotlin.resolve.QualifiedExpressionResolver","methodName":"resolveDescriptorForDoubleColonLHS","parameters":["KtExpression","LexicalScope","BindingTrace","Boolean"],"returnType":"TypeQualifierResolutionResult"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.SimpleConstraintSystemImpl","methodName":"addSubtypeConstraint","parameters":["KotlinTypeMarker","KotlinTypeMarker"],"returnType":"Unit"},8,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"shouldTryResolveLHSAsExpression","parameters":["KtDoubleColonExpression"],"returnType":"Boolean"},10,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"visitClassLiteralExpression","parameters":["KtClassLiteralExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.FlatSignatureKt","methodName":"isSignatureNotLessSpecific","parameters":["SimpleConstraintSystem","FlatSignature","FlatSignature","SpecificityComparisonCallbacks","TypeSpecificityComparator"],"returnType":"Boolean"},26,{"pathToFun":"org.jetbrains.kotlin.psi.KtUnaryExpression","methodName":"getOperationReference","parameters":[""],"returnType":"KtSimpleNameExpression"},18,{"pathToFun":"org.jetbrains.kotlin.idea.KotlinFileType","methodName":"getName","parameters":[""],"returnType":"String"},28,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.MethodInliner","methodName":"isDefaultLambdaWithReification","parameters":["LambdaInfo"],"returnType":"Any"},6,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContextKt","methodName":"makeDefinitelyNotNullOrNotNullInternal","parameters":["UnwrappedType"],"returnType":"UnwrappedType"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tasks.ResolutionCandidate","methodName":"getDescriptor","parameters":[""],"returnType":"D"},80,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"visitUnaryExpression","parameters":["KtUnaryExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},18,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackAnalyzer$InternalAnalyzer","methodName":"executeAfterInlineCallMarker","parameters":["FixStackFrame","AbstractInsnNode"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.SmartCastManager","methodName":"getSmartCastReceiverResultWithGivenNullability","parameters":["ReceiverValue","KotlinType","ResolutionContext"],"returnType":"ReceiverSmartCastResult"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitClassLiteralExpression","parameters":["KtClassLiteralExpression","StackValue"],"returnType":"StackValue"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.NullValue","methodName":"getType","parameters":["ModuleDescriptor"],"returnType":"Any"},11,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.MutableVariableWithConstraints","methodName":"removeConstrains","parameters":["(Constraint) -> Boolean"],"returnType":"Unit"},18,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowValue$Companion","methodName":"nullValue","parameters":["KotlinBuiltIns"],"returnType":"Any"},20,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadingConflictResolver","methodName":"findMaximallySpecificCall","parameters":["Set","Boolean"],"returnType":"C"},26,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InlineAdapter","methodName":"visitLineNumber","parameters":["int","Label"],"returnType":"void"},10,{"pathToFun":"org.jetbrains.kotlin.load.java.components.SignaturePropagator\\$PropagatedSignature","methodName":"hasStableParameterNames","parameters":[""],"returnType":"boolean"},64,{"pathToFun":"org.jetbrains.kotlin.codegen.JvmCodegenUtil","methodName":"isWithinSameFile","parameters":["KtFile","CallableMemberDescriptor"],"returnType":"boolean"},24,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.BoxedValueDescriptor","methodName":"addVariableIndex","parameters":["Int"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallResolver","methodName":"computeTasksFromCandidatesAndResolvedCall","parameters":["BasicCallResolutionContext","Collection","TracingStrategy"],"returnType":"OverloadResolutionResults"},62,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl\\$CopyConfiguration","methodName":"setSubstitution","parameters":["TypeSubstitution"],"returnType":"CopyConfiguration"},27,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.LazyJavaTypeParameterResolver","methodName":"resolveTypeParameter","parameters":["JavaTypeParameter"],"returnType":"TypeParameterDescriptor"},58,{"pathToFun":"org.jetbrains.kotlin.util.Box","methodName":"equals","parameters":["Object"],"returnType":"boolean"},60,{"pathToFun":"org.jetbrains.kotlin.resolve.TypeResolver","methodName":"isPossibleToSpecifyTypeArgumentsFor","parameters":["ClassifierDescriptorWithTypeParameters"],"returnType":"Boolean"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"intermediateValueForProperty","parameters":["PropertyDescriptor","boolean","boolean","ClassDescriptor","boolean","StackValue","ResolvedCall","boolean"],"returnType":"Property"},51,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.NewResolutionOldInference$ImplicitScopeTowerImpl","methodName":"interceptFunctionCandidates","parameters":["ResolutionScope","Name","Collection","LookupLocation","ReceiverValueWithSmartCastInfo","ReceiverValueWithSmartCastInfo"],"returnType":"Collection"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitConstantExpression","parameters":["KtConstantExpression"],"returnType":"void"},58,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallResolver","methodName":"resolveCallForConstructor","parameters":["BasicCallResolutionContext","KtConstructorCalleeExpression"],"returnType":"OverloadResolutionResults"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxingInterpreter$Companion","methodName":"addAssociatedInsn","parameters":["BoxedBasicValue","AbstractInsnNode"],"returnType":"Unit"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.callResolverUtil.CallResolverUtilKt","methodName":"isInvokeCallOnExpressionWithBothReceivers","parameters":["Call"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.NewResolutionOldInference$CandidateFactoryImpl","methodName":"checkInfixAndOperator","parameters":["Call","CallableDescriptor"],"returnType":"List"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.BaseExpressionCodegen","methodName":"putReifiedOperationMarkerIfTypeIsReifiedParameter","parameters":["KotlinTypeMarker","OperationKind"],"returnType":"Unit"},8,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.SignatureEnhancement$SignatureParts","methodName":"computeIndexedQualifiersForOverride","parameters":[""],"returnType":"(Int) -> JavaTypeQualifiers"},64,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyAccessorDescriptorImpl","methodName":"getUserData","parameters":["UserDataKey"],"returnType":"V"},52,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluator$Companion","methodName":"getConstant","parameters":["KtExpression","BindingContext"],"returnType":"CompileTimeConstant"},90,{"pathToFun":"org.jetbrains.kotlin.builtins.ReflectionTypes","methodName":"find","parameters":["String","Int"],"returnType":"ClassDescriptor"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.PsiSourceCompilerForInline","methodName":"generateMethodBody","parameters":["MethodVisitor","FunctionDescriptor","MethodContext","KtExpression","JvmMethodSignature","PsiExpressionLambda"],"returnType":"SMAP"},10,{"pathToFun":"org.jetbrains.kotlin.resolve.DelegatingBindingTrace","methodName":"wantsDiagnostics","parameters":[""],"returnType":"Boolean"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.PsiInlineCodegen","methodName":"rememberClosure","parameters":["KtExpression","Type","ValueParameterDescriptor"],"returnType":"LambdaInfo"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.callableReferenceUtilKt","methodName":"computeExpectedNumberOfReceivers","parameters":["FunctionDescriptor","Boolean"],"returnType":"Int"},20,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.LocalVariablesManager","methodName":"markAfterInlineMarkerEmitted","parameters":["AbstractInsnNode"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.QualifiedExpressionResolver","methodName":"resolveNameExpressionAsQualifierForDiagnostics","parameters":["KtSimpleNameExpression","Receiver","ExpressionTypingContext"],"returnType":"Qualifier"},1,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl","methodName":"getSubstitutedInitialSignatureDescriptor","parameters":["TypeSubstitutor","PropertyAccessorDescriptor"],"returnType":"FunctionDescriptor"},29,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.TypeRemapper$Companion","methodName":"createNewAndMerge","parameters":["TypeRemapper","Map"],"returnType":"MutableMap"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadResolutionResultsImpl","methodName":"isAmbiguity","parameters":[""],"returnType":"boolean"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CandidateResolver","methodName":"checkOuterClassMemberIsAccessible","parameters":["CallCandidateResolutionContext"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"getConstraintSystem","parameters":[""],"returnType":"ConstraintSystem"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.DelegatingResolvedCall","methodName":"getCall","parameters":[""],"returnType":"Call"},20,{"pathToFun":"org.jetbrains.kotlin.resolve.LazyExplicitImportScope","methodName":"getContributedDescriptors","parameters":["DescriptorKindFilter","(Name) -> Boolean","Boolean"],"returnType":"Collection"},3,{"pathToFun":"org.jetbrains.kotlin.builtins.jvm.JvmBuiltInsSettings","methodName":"isMutabilityViolation","parameters":["SimpleFunctionDescriptor","Boolean"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.DelegatingCall","methodName":"getCallType","parameters":[""],"returnType":"CallType"},7,{"pathToFun":"org.jetbrains.kotlin.descriptors.annotations.AnnotationsKt","methodName":"composeAnnotations","parameters":["Annotations","Annotations"],"returnType":"Any"},69,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getReturnType","parameters":[""],"returnType":"Type"},20,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"visitClassLiteralExpression","parameters":["KtClassLiteralExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"accessibleDescriptorIfNeeded","parameters":["D","ClassDescriptor","boolean"],"returnType":"D"},90,{"pathToFun":"org.jetbrains.kotlin.extensions.internal.CandidateInterceptor","methodName":"interceptResolvedCandidates","parameters":["Collection","BasicCallResolutionContext","CandidateResolver","CallResolver","Name","NewResolutionOldInference.ResolutionKind","TracingStrategy"],"returnType":"Collection"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxedValuesCollection","methodName":"remove","parameters":["BoxedValueDescriptor"],"returnType":"void"},47,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"writeSuperConstructorCallParameters","parameters":["JvmSignatureWriter","ClassConstructorDescriptor","ResolvedCall","Boolean"],"returnType":"Unit"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.PsiInlineCodegen","methodName":"putClosureParametersOnStack","parameters":["LambdaInfo","StackValue"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.QualifiedExpressionResolver$QualifierPart","methodName":"component1","parameters":[""],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.inlineClassesUtilsKt","methodName":"isUnderlyingPropertyOfInlineClass","parameters":["VariableDescriptor"],"returnType":"Boolean"},52,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackAnalyzer$InternalAnalyzer$FixStackFrame","methodName":"clearStack","parameters":[""],"returnType":"Unit"},10,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.Nullability","methodName":"invert","parameters":[""],"returnType":"Nullability"},66,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"property","parameters":["PropertyDescriptor","Type","Type","boolean","String","CallableMethod","CallableMethod","StackValue","ExpressionCodegen","ResolvedCall","boolean","KotlinType"],"returnType":"Property"},51,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.JvmTypeFactoryImpl","methodName":"toString","parameters":["JvmType"],"returnType":"String"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.AnnotationChecker$Companion","methodName":"applicableTargetSet","parameters":["ClassDescriptor"],"returnType":"Set"},2,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitUnaryExpression","parameters":["KtUnaryExpression"],"returnType":"Unit"},18,{"pathToFun":"org.jetbrains.kotlin.util.AbstractModifierChecks","methodName":"check","parameters":["FunctionDescriptor"],"returnType":"CheckResult"},64,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackAnalyzer$InternalAnalyzer$FixStackFrame","methodName":"execute","parameters":["AbstractInsnNode","Interpreter"],"returnType":"Unit"},10,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CandidateResolver","methodName":"checkReceiver","parameters":["CallCandidateResolutionContext","MutableResolvedCall","ReceiverParameterDescriptor","ReceiverValue","Boolean","Boolean","Boolean"],"returnType":"ResolutionStatus"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackMethodTransformer","methodName":"transformAfterInlineCallMarker","parameters":["MethodNode","MutableList","FixStackAnalyzer","AbstractInsnNode","LocalVariablesManager"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadResolutionResultsImpl","methodName":"isSingleResult","parameters":[""],"returnType":"boolean"},4,{"pathToFun":"org.jetbrains.kotlin.types.AbstractFlexibilityChecker","methodName":"hasDifferentFlexibility","parameters":["TypeSystemCommonSuperTypesContext","Collection"],"returnType":"Boolean"},5,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher","methodName":"visitUnaryExpression","parameters":["KtUnaryExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},18,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackMethodTransformer","methodName":"transformBeforeInlineCallMarker","parameters":["MethodNode","MutableList","FixStackAnalyzer","AbstractInsnNode","LocalVariablesManager"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl","methodName":"newCopyBuilder","parameters":[""],"returnType":"CopyConfiguration"},29,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.DelegatingCall","methodName":"getCallOperationNode","parameters":[""],"returnType":"ASTNode"},7,{"pathToFun":"org.jetbrains.kotlin.builtins.functionTypesKt","methodName":"getPureArgumentsForFunctionalTypeOrSubtype","parameters":["KotlinType"],"returnType":"List"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.TemporaryBindingTrace","methodName":"wantsDiagnostics","parameters":[""],"returnType":"boolean"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.JvmCodegenUtil","methodName":"isDebuggerContext","parameters":["CodegenContext"],"returnType":"boolean"},54,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseLiteralConstant","parameters":[""],"returnType":"boolean"},58,{"pathToFun":"org.jetbrains.kotlin.contracts.model.visitors.Reducer","methodName":"reduceEffects","parameters":["List"],"returnType":"List"},61,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"arrayElement","parameters":["Type","KotlinType","StackValue","StackValue"],"returnType":"StackValue"},10,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl\\$CopyConfiguration","methodName":"getOriginalGetter","parameters":[""],"returnType":"PropertyGetterDescriptor"},29,{"pathToFun":"org.jetbrains.kotlin.psi.KtConstructorCalleeExpression","methodName":"getConstructorReferenceExpression","parameters":[""],"returnType":"KtSimpleNameExpression"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.inlineCodegenUtilsKt","methodName":"isSamWrapper","parameters":["String"],"returnType":"Any"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadResolutionResultsImpl","methodName":"nameNotFound","parameters":[""],"returnType":"OverloadResolutionResultsImpl"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiFactory","methodName":"createFile","parameters":["String"],"returnType":"KtFile"},28,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"isBoxedPrimitiveType","parameters":["Type"],"returnType":"boolean"},57,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitPostfixExpression","parameters":["KtPostfixExpression","D"],"returnType":"R"},15,{"pathToFun":"org.jetbrains.kotlin.codegen.ConstructorCodegen","methodName":"isSameClassConstructor","parameters":["ConstructorDescriptor"],"returnType":"boolean"},7,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.signatureEnhancementKt","methodName":"select","parameters":["Set","T","T","T","Boolean"],"returnType":"T"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.BaseImportingScope","methodName":"getContributedDescriptors","parameters":["DescriptorKindFilter","(Name) -> Boolean"],"returnType":"Collection"},3,{"pathToFun":"org.jetbrains.kotlin.builtins.functionTypesKt","methodName":"withExtensionFunctionAnnotation","parameters":["Annotations","KotlinBuiltIns"],"returnType":"Any"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.BothSignatureWriter","methodName":"writeUnboundedWildcard","parameters":[""],"returnType":"void"},33,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.SubstitutingScope","methodName":"getVariableNames","parameters":[""],"returnType":"Any"},73,{"pathToFun":"org.jetbrains.kotlin.codegen.state.typeMappingUtilKt","methodName":"canHaveSubtypesIgnoringNullability","parameters":["TypeSystemCommonBackendContext","KotlinTypeMarker"],"returnType":"Boolean"},29,{"pathToFun":"org.jetbrains.kotlin.types.TypeConstructorSubstitution$Companion","methodName":"create","parameters":["KotlinType"],"returnType":"Any"},46,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.PostponedArgumentInputTypesResolver","methodName":"fixNextReadyVariableForParameterTypeIfNeeded","parameters":["Context","PostponedResolvedAtom","List","UnwrappedType","List","TypeVariableDependencyInformationProvider"],"returnType":"Boolean"},22,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.MemberSignature$Companion","methodName":"fromMethod","parameters":["NameResolver","JvmProtoBuf.JvmMethodSignature"],"returnType":"MemberSignature"},26,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadResolutionResultsImpl","methodName":"getResultingCalls","parameters":[""],"returnType":"Collection"},2,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolverKt","methodName":"refineBareType","parameters":["KotlinTypeRefiner","PossiblyBareType"],"returnType":"PossiblyBareType"},2,{"pathToFun":"org.jetbrains.kotlin.builtins.ReflectionTypes$Companion","methodName":"isNumberedKSuspendFunction","parameters":["KotlinType"],"returnType":"Boolean"},20,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitImportDirective","parameters":["KtImportDirective","D"],"returnType":"R"},4,{"pathToFun":"org.jetbrains.kotlin.descriptors.annotations.AnnotationSplitter","methodName":"getAnnotationsForTarget","parameters":["AnnotationUseSiteTarget"],"returnType":"Annotations"},47,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitConstantExpression","parameters":["KtConstantExpression","D"],"returnType":"R"},58,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowInfoImpl","methodName":"disequate","parameters":["DataFlowValue","DataFlowValue","LanguageVersionSettings"],"returnType":"DataFlowInfo"},66,{"pathToFun":"org.jetbrains.kotlin.psi.KtImportDirective","methodName":"getAliasName","parameters":[""],"returnType":"String"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtConstructorCalleeExpression","methodName":"getTypeReference","parameters":[""],"returnType":"KtTypeReference"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadingConflictResolver","methodName":"filterOutEquivalentCalls","parameters":["Collection"],"returnType":"Set"},29,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitDoubleColonExpression","parameters":["KtDoubleColonExpression","Void"],"returnType":"Void"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.TowerResolver$Task","methodName":"mayFitForName","parameters":["KotlinType","Name"],"returnType":"Any"},27,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl\\$CopyConfiguration","methodName":"setOriginal","parameters":["CallableMemberDescriptor"],"returnType":"CopyConfiguration"},29,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"unCapture","parameters":["UnwrappedType"],"returnType":"UnwrappedType"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.PSIKotlinCall","methodName":"toString","parameters":[""],"returnType":"Any"},9,{"pathToFun":"org.jetbrains.kotlin.load.java.JvmAbi","methodName":"getterName","parameters":["String"],"returnType":"String"},52,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.KnownResultProcessor","methodName":"process","parameters":["TowerData"],"returnType":"Any"},70,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CandidateResolver","methodName":"checkAbstractAndSuper","parameters":["CallCandidateResolutionContext"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"checkClassLiteral","parameters":["ExpressionTypingContext","KtClassLiteralExpression","KotlinType","DoubleColonLHS"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxingInterpreter","methodName":"ternaryOperation","parameters":["AbstractInsnNode","BasicValue","BasicValue","BasicValue"],"returnType":"BasicValue"},5,{"pathToFun":"org.jetbrains.kotlin.load.java.components.JavaResolverCache","methodName":"recordMethod","parameters":["JavaMethod","SimpleFunctionDescriptor"],"returnType":"void"},57,{"pathToFun":"org.jetbrains.kotlin.codegen.state.typeMappingUtilKt","methodName":"isMostPreciseContravariantArgument","parameters":["TypeSystemCommonBackendContext","KotlinTypeMarker","TypeParameterMarker"],"returnType":"Boolean"},12,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"tryResolveLHS","parameters":["KtDoubleColonExpression","ExpressionTypingContext","(KtDoubleColonExpression) -> Boolean","(KtExpression, ExpressionTypingContext) -> T"],"returnType":"LHSResolutionResult"},10,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadingConflictResolver","methodName":"compareCallsByUsedArguments","parameters":["FlatSignature","FlatSignature","Boolean"],"returnType":"Boolean"},26,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.PsiSourceCompilerForInline$FakeMemberCodegen","methodName":"addParentsToInnerClassesIfNeeded","parameters":["MutableCollection"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.types.ErrorUtils\\$ErrorScope","methodName":"getContributedFunctions","parameters":["Name","LookupLocation"],"returnType":"Set"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.PsiInlineCodegen","methodName":"getBoundCallableReferenceReceiver","parameters":["KtExpression"],"returnType":"ReceiverValue"},6,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher","methodName":"visitCallableReferenceExpression","parameters":["KtCallableReferenceExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"getCompileTimeType","parameters":["KotlinType"],"returnType":"CompileTimeType"},74,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"mapDefaultMethod","parameters":["FunctionDescriptor","OwnerKind"],"returnType":"Method"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.LazyExplicitImportScope","methodName":"choseOnlyVisibleOrAll","parameters":["Collection"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.LambdaInfo","methodName":"addAllParameters","parameters":["FieldRemapper"],"returnType":"Parameters"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadingConflictResolver","methodName":"isMostSpecific","parameters":["C","Collection","(C, C) -> Boolean"],"returnType":"Boolean"},26,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"getLabeledThisName","parameters":["String","String","String"],"returnType":"String"},14,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.typeEnhancementKt","methodName":"enhanceInflexible","parameters":["SimpleType","(Int) -> JavaTypeQualifiers","Int","TypeComponentPosition"],"returnType":"SimpleResult"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.CompileTimeConstantChecker","methodName":"checkNullValue","parameters":["KotlinType","KtConstantExpression"],"returnType":"boolean"},11,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.NullabilityInterpreter","methodName":"unaryOperation","parameters":["AbstractInsnNode","BasicValue"],"returnType":"BasicValue"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.GenericCandidateResolver","methodName":"completeTypeInferenceDependentOnFunctionArgumentsForCall","parameters":["CallCandidateResolutionContext"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.RedundantNullCheckMethodTransformer$TransformerPass","methodName":"transformTrivialCheckNotNull","parameters":["AbstractInsnNode","Nullability"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyAccessorDescriptorImpl","methodName":"getDispatchReceiverParameter","parameters":[""],"returnType":"ReceiverParameterDescriptor"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"assertNotCompleted","parameters":["String"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.MethodInliner","methodName":"isAlreadyRegenerated","parameters":["String"],"returnType":"Boolean"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackMethodTransformer","methodName":"transformSaveRestoreStackMarkers","parameters":["MethodNode","FixStackContext","MutableList","FixStackAnalyzer"],"returnType":"Unit"},10,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"shouldTryResolveLHSAsType","parameters":["KtDoubleColonExpression"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitConstructorCalleeExpression","parameters":["KtConstructorCalleeExpression","D"],"returnType":"R"},7,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.instructions.jumps.UnconditionalJumpInstruction","methodName":"accept","parameters":["InstructionVisitor"],"returnType":"Unit"},71,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper$Companion","methodName":"isInlineClassConstructor","parameters":["CallableDescriptor"],"returnType":"Boolean"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.TowerResolver$Task","methodName":"createNonLocalLevels","parameters":["ImplicitScopeTower"],"returnType":"Collection"},13,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.inlineCodegenUtilsKt","methodName":"isAnonymousClass","parameters":["String"],"returnType":"Any"},9,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractReceiverParameterDescriptor","methodName":"getReturnType","parameters":[""],"returnType":"KotlinType"},18,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.smartCastUtilKt","methodName":"getReceiverValueWithSmartCast","parameters":["ReceiverValue","KotlinType"],"returnType":"Any"},16,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiFactory","methodName":"doCreateExpression","parameters":["String"],"returnType":"KtExpression"},23,{"pathToFun":"org.jetbrains.kotlin.resolve.QualifiedExpressionResolver$ExpressionQualifierPart","methodName":"component2","parameters":[""],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.QualifiedExpressionResolver","methodName":"asQualifierPartList","parameters":["KtExpression","Boolean"],"returnType":"List"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.PopBackwardPropagationTransformer$Transformer$HazardsTrackingInterpreter","methodName":"ternaryOperation","parameters":["AbstractInsnNode","SourceValue","SourceValue","SourceValue"],"returnType":"SourceValue"},5,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitUnaryExpression","parameters":["KtUnaryExpression","Void"],"returnType":"Void"},18,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.NewResolutionOldInferenceKt","methodName":"createPreviousResolveError","parameters":["ResolutionStatus"],"returnType":"PreviousResolutionError"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.ArgumentTypeResolver","methodName":"isFunctionLiteralArgument","parameters":["KtExpression","StatementFilter"],"returnType":"boolean"},25,{"pathToFun":"org.jetbrains.kotlin.codegen.CallGenerator$DefaultCallGenerator","methodName":"putValueIfNeeded","parameters":["JvmKotlinType","StackValue","ValueKind","Int"],"returnType":"Unit"},12,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker\\$ExpressionValueArgument","methodName":"getArgumentName","parameters":[""],"returnType":"ValueArgumentName"},83,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitConstructorCalleeExpression","parameters":["KtConstructorCalleeExpression"],"returnType":"void"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackMethodTransformer","methodName":"analyzeAndTransformSaveRestoreStack","parameters":["FixStackContext","String","MethodNode"],"returnType":"Unit"},10,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"visitExclExclExpression","parameters":["KtUnaryExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},14,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackAnalyzer$InternalAnalyzer$FixStackFrame","methodName":"push","parameters":["BasicValue"],"returnType":"Unit"},10,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.ImplicitNothingAsTypeParameterCallChecker","methodName":"getResolvedCallAtom","parameters":["ResolvedAtom","BindingContext"],"returnType":"ResolvedCallAtom"},2,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"lowerBound","parameters":["FlexibleTypeMarker"],"returnType":"SimpleTypeMarker"},61,{"pathToFun":"org.jetbrains.kotlin.contracts.model.structure.ESVariable","methodName":"hashCode","parameters":[""],"returnType":"Int"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InliningContext","methodName":"subInlineLambda","parameters":["LambdaInfo"],"returnType":"InliningContext"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CandidateResolver","methodName":"checkValueArguments","parameters":["CallCandidateResolutionContext"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.inlineCodegenUtilsKt","methodName":"addInlineMarker","parameters":["InstructionAdapter","Boolean"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiUtil","methodName":"getLastReference","parameters":["KtExpression"],"returnType":"KtSimpleNameExpression"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"isSuperTypeCallForAnonymousObject","parameters":["KtSuperTypeCallEntry"],"returnType":"boolean"},7,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.SignatureEnhancement$SignatureParts","methodName":"computeQualifiersForOverride","parameters":["KotlinType","Collection","JavaTypeQualifiers","Boolean"],"returnType":"JavaTypeQualifiers"},64,{"pathToFun":"org.jetbrains.kotlin.psi.KtUnaryExpression","methodName":"getOperationToken","parameters":[""],"returnType":"IElementType"},18,{"pathToFun":"org.jetbrains.kotlin.codegen.CallableMethod","methodName":"isStaticCall","parameters":[""],"returnType":"Boolean"},30,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl","methodName":"normalizeVisibility","parameters":["Visibility","Kind"],"returnType":"Visibility"},29,{"pathToFun":"org.jetbrains.kotlin.resolve.ObservableBindingTrace","methodName":"getType","parameters":["KtExpression"],"returnType":"KotlinType"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.QualifiedExpressionResolveUtilKt","methodName":"getCallableReceiverDescriptorRetainingTypeAliasReference","parameters":["ClassifierDescriptor"],"returnType":"DeclarationDescriptor"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"getPredefinedFullInternalNameForClass","parameters":["ClassDescriptor"],"returnType":"String"},52,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitClassLiteralExpression","parameters":["KtClassLiteralExpression"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"intersectTypes","parameters":["List"],"returnType":"KotlinTypeMarker"},14,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.BoxedBasicValueKt","methodName":"isInlineClassValue","parameters":["Type"],"returnType":"Boolean"},48,{"pathToFun":"org.jetbrains.kotlin.codegen.AnnotationCodegen","methodName":"generateRetentionAnnotation","parameters":["ClassDescriptor","Set"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CandidateResolver","methodName":"checkConstructedExpandedType","parameters":["CallCandidateResolutionContext"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CandidateResolver","methodName":"check","parameters":["CallCandidateResolutionContext","CallCandidateResolutionContext"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"visitSuperTypeCallEntry","parameters":["KtSuperTypeCallEntry"],"returnType":"void"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.PackageFragmentWithCustomSource","methodName":"getSource","parameters":[""],"returnType":"SourceElement"},3,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.methodSignatureMappingKt","methodName":"computeJvmDescriptor","parameters":["FunctionDescriptor","Boolean","Boolean"],"returnType":"String"},64,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.DelegatingCall","methodName":"getFunctionLiteralArguments","parameters":[""],"returnType":"List"},8,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"canBeConsideredProperExpression","parameters":["KtExpression"],"returnType":"Boolean"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.BoxedValueDescriptor","methodName":"addInsn","parameters":["AbstractInsnNode"],"returnType":"Unit"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackAnalyzer","methodName":"getStackToSpill","parameters":["AbstractInsnNode"],"returnType":"Any"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.callableReferenceUtilKt","methodName":"getCallableReferenceTopLevelFlag","parameters":["CallableDescriptor"],"returnType":"Int"},21,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"getArrayElementType","parameters":["KotlinType"],"returnType":"KotlinType"},11,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher","methodName":"visitClassLiteralExpression","parameters":["KtClassLiteralExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.LocalVariablesManager","methodName":"getFirstUnusedLocalVariableIndex","parameters":[""],"returnType":"Int"},10,{"pathToFun":"org.jetbrains.kotlin.builtins.ReflectionTypes","methodName":"getKFunction","parameters":["Int"],"returnType":"ClassDescriptor"},19,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.BoxedValueDescriptor","methodName":"getMergedWith","parameters":[""],"returnType":"Iterable"},47,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxingInterpreter","methodName":"onMethodCallWithBoxedValue","parameters":["BoxedBasicValue"],"returnType":"Unit"},41,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.TypeMappingConfigurationImpl","methodName":"getPredefinedTypeForClass","parameters":["ClassDescriptor"],"returnType":"JvmType"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackAnalyzer","methodName":"recordLoopEntryPointMarkers","parameters":[""],"returnType":"Unit"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackAnalyzer$InternalAnalyzer$FixStackFrame","methodName":"init","parameters":["Frame"],"returnType":"Frame"},10,{"pathToFun":"org.jetbrains.kotlin.psi.KtClassLiteralExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},2,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.SignatureBuildingComponents","methodName":"jvmDescriptor","parameters":["String","List","String"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.JvmAbi","methodName":"isClassCompanionObjectWithBackingFieldsInOuter","parameters":["DeclarationDescriptor"],"returnType":"boolean"},48,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"jumpToError","parameters":["KtElement"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.ResolutionStatus","methodName":"possibleTransformToSuccess","parameters":[""],"returnType":"boolean"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiFactory","methodName":"doCreateFile","parameters":["String","String"],"returnType":"KtFile"},28,{"pathToFun":"org.jetbrains.kotlin.contracts.ContractDeserializerImpl$ContractDeserializationWorker","methodName":"deserializeContract","parameters":["ProtoBuf.Contract"],"returnType":"ContractDescription"},6,{"pathToFun":"org.jetbrains.kotlin.load.java.JvmAbi","methodName":"isPropertyWithBackingFieldInOuterClass","parameters":["PropertyDescriptor"],"returnType":"boolean"},51,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tasks.ResolutionCandidate","methodName":"create","parameters":["Call","D","ReceiverValue","ExplicitReceiverKind","TypeSubstitutor"],"returnType":"ResolutionCandidate"},73,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CandidateResolver","methodName":"checkReceiverTypeError","parameters":["CallCandidateResolutionContext"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitSuperTypeCallEntry","parameters":["KtSuperTypeCallEntry"],"returnType":"Unit"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.PlatformClassesMappedToKotlinChecker","methodName":"checkPlatformClassesMappedToKotlin","parameters":["PlatformToKotlinClassMap","BindingTrace","KtImportDirective","Collection"],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"getTrace","parameters":[""],"returnType":"DelegatingBindingTrace"},2,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"bindFunctionReference","parameters":["KtCallableReferenceExpression","KotlinType","ResolutionContext","FunctionDescriptor"],"returnType":"Unit"},20,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader","methodName":"getPropertySignature","parameters":["ProtoBuf.Property","NameResolver","TypeTable","Boolean","Boolean","Boolean"],"returnType":"MemberSignature"},26,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowValue","methodName":"equals","parameters":["Any"],"returnType":"Boolean"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallResolver","methodName":"resolveFunctionCall","parameters":["BindingTrace","LexicalScope","Call","KotlinType","DataFlowInfo","boolean"],"returnType":"OverloadResolutionResults"},7,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingUtils","methodName":"resolveSpecialConstructionAsCall","parameters":["Call","SimpleFunctionDescriptorImpl","ResolveConstruct","ExpressionTypingContext","MutableDataFlowInfoForArguments"],"returnType":"ResolvedCall"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"hasInferredReturnType","parameters":[""],"returnType":"boolean"},33,{"pathToFun":"org.jetbrains.kotlin.builtins.jvm.JvmBuiltInsSettings","methodName":"getJdkMethodStatus","parameters":["FunctionDescriptor"],"returnType":"JDKMemberStatus"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt","methodName":"getOwnerForEffectiveDispatchReceiverParameter","parameters":["CallableDescriptor"],"returnType":"DeclarationDescriptor"},38,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"resolveReservedExpressionSyntaxOnDoubleColonLHS","parameters":["KtDoubleColonExpression","ExpressionTypingContext"],"returnType":"ReservedDoubleColonLHSResolutionResult"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.LocalVariablesManager$AllocatedHandle","methodName":"markRestoreNodeEmitted","parameters":[""],"returnType":"Unit"},10,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.contextKt","methodName":"copyWithNewDefaultTypeQualifiers","parameters":["LazyJavaResolverContext","Annotations"],"returnType":"Any"},64,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitImportDirective","parameters":["KtImportDirective"],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.builtins.ReflectionTypes$ClassLookup","methodName":"getValue","parameters":["ReflectionTypes","KProperty"],"returnType":"ClassDescriptor"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtImportDirective","methodName":"getImportedName","parameters":[""],"returnType":"Name"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.ArgumentTypeResolver","methodName":"isCallableReferenceArgument","parameters":["KtExpression","ResolutionContext"],"returnType":"boolean"},15,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.SignatureString","methodName":"invoke","parameters":["IrFunctionAccessExpression","ExpressionCodegen","BlockInfo"],"returnType":"PromisedValue"},17,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irCall","parameters":["IrBuilderWithScope","IrSimpleFunctionSymbol"],"returnType":"IrCall"},44,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitClassReference","parameters":["IrClassReference","Nothing"],"returnType":"Any"},18,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitPostfixExpression","parameters":["KtPostfixExpression","Nothing"],"returnType":"IrStatement"},15,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmDefaultParameterInjector","methodName":"useConstructorMarker","parameters":["IrFunction"],"returnType":"Boolean"},9,{"pathToFun":"org.jetbrains.kotlin.ir.builders.declarations.IrFunctionBuilder","methodName":"updateFrom","parameters":["IrFunction"],"returnType":"Unit"},33,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"generateClassLiteralReference","parameters":["IrExpression","Boolean","BlockInfo"],"returnType":"PromisedValue"},18,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitClassReference","parameters":["IrClassReference","D"],"returnType":"Any"},18,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FakeInliningLocalVariablesLowering","methodName":"addFakeLocalVariable","parameters":["IrFunction","String"],"returnType":"Unit"},10,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.SingleAbstractMethodLowering","methodName":"visitTypeOperator","parameters":["IrTypeOperatorCall"],"returnType":"IrExpression"},66,{"pathToFun":"org.jetbrains.kotlin.builtins.functions.FunctionInvokeDescriptor","methodName":"isTailrec","parameters":[""],"returnType":"Boolean"},20,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrVarargImpl","methodName":"acceptChildren","parameters":["IrElementVisitor","D"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.AnnotationCodegenKt","methodName":"getAnnotationRetention","parameters":["IrClass"],"returnType":"KotlinRetention"},2,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.DefaultParameterInjector","methodName":"log","parameters":["() -> String"],"returnType":"Any"},9,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmDefaultParameterInjector","methodName":"defaultArgumentStubVisibility","parameters":["IrFunction"],"returnType":"Any"},9,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.NewArray","methodName":"invoke","parameters":["IrFunctionAccessExpression","ExpressionCodegen","BlockInfo"],"returnType":"PromisedValue"},10,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer","methodName":"putAbsentOrSame","parameters":["MutableMap","K","V"],"returnType":"Unit"},9,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmArgumentNullabilityAssertionsLowering","methodName":"visitTypeOperator","parameters":["IrTypeOperatorCall","AssertionScope"],"returnType":"IrExpression"},84,{"pathToFun":"org.jetbrains.kotlin.backend.common.ir.IrUtilsKt","methodName":"copySuperTypesFrom","parameters":["IrTypeParameter","IrTypeParameter","Map"],"returnType":"Unit"},14,{"pathToFun":"org.jetbrains.kotlin.ir.util.ConstantValueGenerator","methodName":"generateConstantValueAsExpression","parameters":["Int","Int","ConstantValue","KotlinType"],"returnType":"IrExpression"},58,{"pathToFun":"org.jetbrains.kotlin.psi2ir.intermediate.OnceExpressionValue","methodName":"load","parameters":[""],"returnType":"IrExpression"},65,{"pathToFun":"org.jetbrains.kotlin.ir.builders.Scope","methodName":"nextTemporaryIndex","parameters":[""],"returnType":"Int"},50,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.VarargLowering","methodName":"visitVararg","parameters":["IrVararg"],"returnType":"IrExpression"},5,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FunctionReferenceLowering$Companion","methodName":"kClassReference","parameters":["IrBuilderWithScope","IrType"],"returnType":"Any"},17,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.AdditionalClassAnnotationLowering","methodName":"generateDocumentedAnnotation","parameters":["IrClass"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ReflectionReferencesGenerator","methodName":"requiresCoercionToUnit","parameters":["CallableDescriptor","KotlinType"],"returnType":"Boolean"},21,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irTemporary","parameters":["IrStatementsBuilder","IrExpression","String","KotlinType","IrType"],"returnType":"IrVariable"},46,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.MethodInliner$Companion","methodName":"getCapturedFieldAccessChain","parameters":["VarInsnNode"],"returnType":"List"},6,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitErrorExpression","parameters":["IrErrorExpression","Nothing"],"returnType":"Any"},9,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FunctionReferenceLowering$Companion","methodName":"calculateOwnerKClass","parameters":["IrBuilderWithScope","IrDeclarationParent","JvmBackendContext"],"returnType":"IrExpression"},17,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ReflectionReferencesGenerator","methodName":"generateClassLiteral","parameters":["KtClassLiteralExpression"],"returnType":"IrExpression"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrArrayBuilder","methodName":"newArray","parameters":["Int"],"returnType":"Any"},10,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmPropertiesLowering","methodName":"shouldSubstituteAccessorWithField","parameters":["IrProperty","IrSimpleFunction"],"returnType":"Boolean"},53,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrArrayBuilder","methodName":"build","parameters":[""],"returnType":"IrExpression"},10,{"pathToFun":"org.jetbrains.kotlin.backend.common.serialization.mangle.descriptor.DescriptorExportCheckerVisitor","methodName":"visitReceiverParameterDescriptor","parameters":["ReceiverParameterDescriptor","SpecialDeclarationType"],"returnType":"Any"},39,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"visitClassReference","parameters":["IrClassReference","BlockInfo"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeUtilsKt","methodName":"getArrayElementType","parameters":["IrType","IrBuiltIns"],"returnType":"IrType"},10,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrVarargImpl","methodName":"transformChildren","parameters":["IrElementTransformer","D"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrArrayBuilder","methodName":"coerce","parameters":["IrExpression","IrType"],"returnType":"IrExpression"},10,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"generateConstantExpression","parameters":["KtExpression","CompileTimeConstant"],"returnType":"IrExpression"},58,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.AdditionalClassAnnotationLowering","methodName":"generateRetentionAnnotation","parameters":["IrClass"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmDefaultParameterInjector","methodName":"nullConst","parameters":["Int","Int","IrValueParameter"],"returnType":"IrExpression"},9,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrClassReferenceImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},18,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FunctionReferenceLowering$Companion","methodName":"getCallableReferenceTopLevelFlag","parameters":["IrDeclaration"],"returnType":"Int"},17,{"pathToFun":"org.jetbrains.kotlin.ir.declarations.lazy.LazyScopedTypeParametersResolver","methodName":"resolveScopedTypeParameter","parameters":["TypeParameterDescriptor"],"returnType":"IrTypeParameterSymbol"},19,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrInlineReferenceLocator","methodName":"visitInlineLambda","parameters":["IrFunctionReference","IrFunction","IrValueParameter","IrDeclaration"],"returnType":"Any"},6,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitCallableReference","parameters":["IrCallableReference","D"],"returnType":"Any"},20,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"isMarkedNullable","parameters":["SimpleTypeMarker"],"returnType":"Boolean"},30,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitErrorExpression","parameters":["IrErrorExpression"],"returnType":"Any"},9,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.IrInlineCodegenKt","methodName":"isInlineIrExpression","parameters":["IrExpression"],"returnType":"Any"},6,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrFunctionFactory$Companion","methodName":"reflectFunctionClassFqn","parameters":["Name"],"returnType":"FqName"},20,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer","methodName":"createLiftedDeclaration","parameters":["LocalFunctionContext"],"returnType":"Unit"},11,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FunctionReferenceLowering$Companion","methodName":"kClassToJavaClass","parameters":["IrBuilderWithScope","IrExpression","JvmBackendContext"],"returnType":"Any"},17,{"pathToFun":"org.jetbrains.kotlin.ir.util.RenderIrElementVisitor","methodName":"renderAsAnnotation","parameters":["StringBuilder","IrConstructorCall"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.descriptors.annotations.Annotations","methodName":"getUseSiteTargetedAnnotations","parameters":[""],"returnType":"List"},47,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractReceiverParameterDescriptor","methodName":"accept","parameters":["DeclarationDescriptorVisitor","D"],"returnType":"R"},39,{"pathToFun":"org.jetbrains.kotlin.ir.builders.IrBuildersKt","methodName":"createTmpVariable","parameters":["Scope","IrExpression","String","Boolean","IrDeclarationOrigin","IrType"],"returnType":"IrVariable"},11,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedSimpleFunctionDescriptor","methodName":"getTypeParameters","parameters":[""],"returnType":"Any"},84,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpressionKt","methodName":"getTypeArgumentOrDefault","parameters":["IrMemberAccessExpression","IrTypeParameter"],"returnType":"Any"},10,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedClassConstructorDescriptor","methodName":"getKind","parameters":[""],"returnType":"Any"},61,{"pathToFun":"org.jetbrains.kotlin.backend.common.DeepCopyIrTreeWithDeclarationsKt","methodName":"deepCopyWithVariables","parameters":["T"],"returnType":"T"},9,{"pathToFun":"org.jetbrains.kotlin.ir.builders.Scope","methodName":"getNameForTemporary","parameters":["String"],"returnType":"String"},50,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.AnnotationCodegen","methodName":"genAnnotationArguments","parameters":["IrConstructorCall","AnnotationVisitor"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.ir.util.IrTypeUtilsKt","methodName":"isFunctionTypeOrSubtype","parameters":["IrType"],"returnType":"Boolean"},6,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.JvmBackendContext$JvmIr","methodName":"unfoldInlineClassType","parameters":["IrType"],"returnType":"IrType"},9,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedFieldDescriptor","methodName":"getSource","parameters":[""],"returnType":"Any"},39,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedFieldDescriptor","methodName":"getKind","parameters":[""],"returnType":"Any"},39,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ReflectionReferencesGenerator","methodName":"generateCallableReference","parameters":["KtCallableReferenceExpression"],"returnType":"IrExpression"},21,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitVararg","parameters":["IrVararg","Nothing"],"returnType":"Any"},5,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ReflectionReferencesGenerator","methodName":"generateFunctionReference","parameters":["Int","Int","KotlinType","IrFunctionSymbol","FunctionDescriptor","Map","IrStatementOrigin"],"returnType":"IrFunctionReference"},20,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"visitTypeOperator","parameters":["IrTypeOperatorCall","BlockInfo"],"returnType":"PromisedValue"},83,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable","methodName":"referenceValueParameter","parameters":["ParameterDescriptor"],"returnType":"Any"},20,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InlineMethodInstructionAdapter","methodName":"visitAnnotableParameterCount","parameters":["int","boolean"],"returnType":"void"},9,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LowerUtilsKt","methodName":"at","parameters":["T","IrElement"],"returnType":"Any"},84,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitTypeOperator","parameters":["IrTypeOperatorCall","D"],"returnType":"Any"},84,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedClassDescriptor","methodName":"isExpect","parameters":[""],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitVararg","parameters":["IrVararg","D"],"returnType":"Any"},5,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.PromisedValueKt","methodName":"materializedAt","parameters":["PromisedValue","IrType"],"returnType":"MaterialValue"},60,{"pathToFun":"org.jetbrains.kotlin.psi2ir.intermediate.IrUtilsKt","methodName":"computeSubstitutedSyntheticAccessor","parameters":["PropertyDescriptor","FunctionDescriptor","PropertyAccessorDescriptor"],"returnType":"FunctionDescriptor"},51,{"pathToFun":"org.jetbrains.kotlin.ir.builders.IrBuilderKt","methodName":"at","parameters":["T","Int","Int"],"returnType":"Any"},84,{"pathToFun":"org.jetbrains.kotlin.ir.util.IdSignature$AccessorSignature","methodName":"asPublic","parameters":[""],"returnType":"PublicSignature"},26,{"pathToFun":"org.jetbrains.kotlin.ir.builders.Scope","methodName":"createDescriptorForTemporaryVariable","parameters":["KotlinType","String","Boolean"],"returnType":"IrTemporaryVariableDescriptor"},50,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"visitCallableReference","parameters":["IrCallableReference"],"returnType":"IrExpression"},21,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrErrorExpressionImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},9,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitClassReference","parameters":["IrClassReference"],"returnType":"Any"},18,{"pathToFun":"org.jetbrains.kotlin.ir.util.RenderIrElementVisitor","methodName":"renderAsAnnotation","parameters":["IrConstructorCall"],"returnType":"String"},4,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.JvmBackendContext$JvmIr","methodName":"shouldGenerateHandlerParameterForDefaultBodyFun","parameters":[""],"returnType":"Any"},9,{"pathToFun":"org.jetbrains.kotlin.ir.builders.Scope","methodName":"createTemporaryVariable","parameters":["IrExpression","String","Boolean","KotlinType","IrDeclarationOrigin","IrType"],"returnType":"IrVariable"},50,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.AnnotationCodegen","methodName":"genAnnotation","parameters":["IrConstructorCall","TypePath","Boolean"],"returnType":"String"},2,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrVarargImpl","methodName":"putElement","parameters":["Int","IrVarargElement"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.AnnotationCodegenKt","methodName":"applicableTargetSet","parameters":["IrClass"],"returnType":"Set"},2,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"visitVararg","parameters":["IrVararg"],"returnType":"IrExpression"},5,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.ArraySet","methodName":"invoke","parameters":["IrFunctionAccessExpression","ExpressionCodegen","BlockInfo"],"returnType":"PromisedValue"},5,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalNameProvider","methodName":"localName","parameters":["IrDeclarationWithName"],"returnType":"String"},11,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitFunctionReference","parameters":["IrFunctionReference","D"],"returnType":"Any"},20,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FunctionReferenceLowering$Companion","methodName":"isCallableReferenceTopLevel","parameters":["IrDeclaration"],"returnType":"Boolean"},17,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl","methodName":"copy","parameters":[""],"returnType":"IrConst"},18,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.AnnotationCodegen","methodName":"getAnnotationArgumentJvmName","parameters":["IrClass","Name"],"returnType":"String"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer","methodName":"setLocalTypeArguments","parameters":["IrMemberAccessExpression","IrFunction"],"returnType":"Unit"},11,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.CallGenerator","methodName":"generatePropertyGetterCall","parameters":["PropertyDescriptor","Int","Int","CallBuilder"],"returnType":"IrExpression"},51,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ClosureAnnotator","methodName":"getFunctionClosure","parameters":["IrFunction"],"returnType":"Any"},11,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrArrayBuilderKt","methodName":"irArray","parameters":["JvmIrBuilder","IrType","IrArrayBuilder.() -> Unit"],"returnType":"IrExpression"},10,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitVararg","parameters":["IrVararg"],"returnType":"Any"},5,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irString","parameters":["IrBuilderWithScope","String"],"returnType":"Any"},41,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.ConstLowering","methodName":"lowerConstRead","parameters":["IrExpression","IrField"],"returnType":"IrExpression"},52,{"pathToFun":"org.jetbrains.kotlin.backend.common.CheckIrElementVisitor","methodName":"visitFunctionReference","parameters":["IrFunctionReference"],"returnType":"Unit"},24,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractReceiverParameterDescriptor","methodName":"getSource","parameters":[""],"returnType":"SourceElement"},42,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.CallGenerator","methodName":"generateDelegatingConstructorCall","parameters":["Int","Int","CallBuilder"],"returnType":"IrExpression"},7,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitConstantExpression","parameters":["KtConstantExpression","Nothing"],"returnType":"IrExpression"},58,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irInt","parameters":["IrBuilderWithScope","Int"],"returnType":"Any"},44,{"pathToFun":"org.jetbrains.kotlin.ir.types.irTypesKt","methodName":"makeNotNull","parameters":["IrType"],"returnType":"Any"},81,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FunctionReferenceLowering$FunctionReferenceBuilder","methodName":"generateSignature","parameters":["JvmIrBuilder","IrFunctionSymbol"],"returnType":"IrExpression"},16,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.SignatureString","methodName":"generateSignatureString","parameters":["InstructionAdapter","IrFunction","JvmBackendContext"],"returnType":"Unit"},17,{"pathToFun":"org.jetbrains.kotlin.ir.util.IrTypeUtilsKt","methodName":"isFunctionOrKFunction","parameters":["IrType"],"returnType":"Any"},26,{"pathToFun":"org.jetbrains.kotlin.ir.builders.Scope","methodName":"getLocalDeclarationParent","parameters":[""],"returnType":"IrDeclarationParent"},55,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrArrayBuilder","methodName":"buildSimpleArray","parameters":[""],"returnType":"IrExpression"},5,{"pathToFun":"org.jetbrains.kotlin.ir.util.IrTypeUtilsKt","methodName":"isKFunction","parameters":["IrType"],"returnType":"Boolean"},38,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.InterfaceLowering","methodName":"handleAnnotationClass","parameters":["IrClass"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irGet","parameters":["IrBuilderWithScope","IrType","IrExpression","IrFunctionSymbol"],"returnType":"IrCall"},17,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl","methodName":"getSetter","parameters":[""],"returnType":"PropertySetterDescriptor"},58,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ReflectionReferencesGenerator","methodName":"requiresSuspendConversion","parameters":["CallableDescriptor","KotlinType"],"returnType":"Boolean"},21,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.KClassJavaProperty","methodName":"invoke","parameters":["IrFunctionAccessExpression","ExpressionCodegen","BlockInfo"],"returnType":"PromisedValue"},18,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorConventionsKt","methodName":"getPostfixOperator","parameters":["IElementType"],"returnType":"IrStatementOrigin"},15,{"pathToFun":"org.jetbrains.kotlin.ir.builders.Scope","methodName":"inventNameForTemporary","parameters":["String","String"],"returnType":"String"},50,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.AnnotationCodegen$Companion","methodName":"applicableTargetSet","parameters":["IrConstructorCall"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer$FunctionBodiesRewriter","methodName":"visitFunctionReference","parameters":["IrFunctionReference"],"returnType":"IrExpression"},20,{"pathToFun":"org.jetbrains.kotlin.ir.builders.declarations.IrDeclarationBuilder","methodName":"updateFrom","parameters":["IrDeclaration"],"returnType":"Unit"},33,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl$Companion","methodName":"int","parameters":["Int","Int","IrType","Int"],"returnType":"IrConstImpl"},66,{"pathToFun":"org.jetbrains.kotlin.ir.declarations.StageController","methodName":"withStage","parameters":["Int","() -> T"],"returnType":"T"},9,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.VarargLowering","methodName":"createBuilder","parameters":["Int","Int"],"returnType":"Any"},10,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitCallableReferenceExpression","parameters":["KtCallableReferenceExpression","Nothing"],"returnType":"IrStatement"},21,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrFunctionFactory","methodName":"kFunctionN","parameters":["Int","SymbolTable.((IrClassSymbol) -> IrClass) -> IrClass"],"returnType":"IrClass"},19,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedFieldDescriptor","methodName":"getOriginal","parameters":[""],"returnType":"Any"},39,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FunctionReferenceLowering","methodName":"isSuspendFunctionReference","parameters":["IrFunctionReference"],"returnType":"Boolean"},6,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.AdditionalClassAnnotationLowering","methodName":"generateTargetAnnotation","parameters":["IrClass"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrVarargImpl","methodName":"addElement","parameters":["IrVarargElement"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.JvmSymbols","methodName":"getJvmFunctionClass","parameters":["Int"],"returnType":"IrClassSymbol"},23,{"pathToFun":"org.jetbrains.kotlin.ir.builders.IrBuildersKt","methodName":"createTmpVariable","parameters":["IrStatementsBuilder","IrExpression","String","Boolean","IrDeclarationOrigin","IrType"],"returnType":"IrVariable"},10,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.DefaultParameterInjector","methodName":"parametersForCall","parameters":["IrFunctionAccessExpression"],"returnType":"Pair"},9,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols","methodName":"visitErrorExpression","parameters":["IrErrorExpression"],"returnType":"IrErrorExpression"},9,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen$Companion","methodName":"generateClassInstance","parameters":["InstructionAdapter","IrType","IrTypeMapper"],"returnType":"Unit"},18,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrMemberAccessExpressionBase","methodName":"getTypeArgument","parameters":["Int"],"returnType":"IrType"},32,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.VarargLowering","methodName":"addVararg","parameters":["IrArrayBuilder","IrVararg"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"isArrayOrNullableArray","parameters":["KotlinTypeMarker"],"returnType":"Boolean"},17,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.DefaultArgumentStubGeneratorKt","methodName":"isMovedReceiver","parameters":["IrValueParameter"],"returnType":"Any"},9,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorExpressionGenerator","methodName":"generatePostfixExpression","parameters":["KtPostfixExpression"],"returnType":"IrExpression"},15,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.StaticLambdaLowering","methodName":"visitClassReference","parameters":["IrClassReference"],"returnType":"Unit"},11,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitClassReference","parameters":["IrClassReference","D"],"returnType":"Any"},18,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitClassReference","parameters":["IrClassReference","Nothing"],"returnType":"Any"},18,{"pathToFun":"org.jetbrains.kotlin.ir.util.RenderIrElementKt","methodName":"renderTypeParameterFqn","parameters":["IrTypeParameter"],"returnType":"String"},11,{"pathToFun":"org.jetbrains.kotlin.ir.util.IrTypeUtilsKt","methodName":"isKSuspendFunction","parameters":["IrType"],"returnType":"Boolean"},38,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrFunctionFactory","methodName":"kFunctionClassDescriptor","parameters":["Int"],"returnType":"FunctionClassDescriptor"},19,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitClassReference","parameters":["IrClassReference"],"returnType":"Any"},18,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrTemporaryVariableDescriptorImpl","methodName":"isLateInit","parameters":[""],"returnType":"Boolean"},50,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FunctionReferenceLowering$FunctionReferenceBuilder","methodName":"getAdaptedCallableReferenceFlags","parameters":[""],"returnType":"Int"},16,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irImplicitCast","parameters":["IrBuilderWithScope","IrExpression","IrType"],"returnType":"Any"},72,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.SyntheticAccessorLowering","methodName":"visitFunctionReference","parameters":["IrFunctionReference"],"returnType":"IrExpression"},20,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.FieldRemapper","methodName":"foldFieldAccessChainIfNeeded","parameters":["List","MethodNode"],"returnType":"AbstractInsnNode"},6,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer","methodName":"suggestLocalName","parameters":["IrDeclarationWithName"],"returnType":"String"},11,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FunctionReferenceLowering","methodName":"visitBlock","parameters":["IrBlock"],"returnType":"IrExpression"},48,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.IrSourceCompilerForInline","methodName":"generateLambdaBody","parameters":["ExpressionLambda"],"returnType":"SMAPAndMethodNode"},6,{"pathToFun":"org.jetbrains.kotlin.builtins.functions.FunctionInvokeDescriptor","methodName":"isInline","parameters":[""],"returnType":"Boolean"},22,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FunctionReferenceLowering$FunctionReferenceBuilder","methodName":"getFunctionReferenceFlags","parameters":["IrFunction"],"returnType":"Int"},16,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.IrTypeMapper","methodName":"boxType","parameters":["IrType"],"returnType":"Type"},57,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitClassLiteralExpression","parameters":["KtClassLiteralExpression","Nothing"],"returnType":"IrStatement"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.AnnotationCodegen","methodName":"genCompileTimeValue","parameters":["String","IrExpression","AnnotationVisitor"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitVararg","parameters":["IrVararg"],"returnType":"Any"},5,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrUtilsKt","methodName":"defaultValue","parameters":["IrType","Int","Int","JvmBackendContext"],"returnType":"IrExpression"},9,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.DefaultArgumentStubGeneratorKt","methodName":"generateDefaultsFunctionImpl","parameters":["IrFunction","CommonBackendContext","IrDeclarationOrigin","Visibility","Boolean","Boolean"],"returnType":"IrFunction"},9,{"pathToFun":"org.jetbrains.kotlin.backend.common.CheckIrElementVisitor","methodName":"ensureNullable","parameters":["IrExpression"],"returnType":"Unit"},36,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FunctionReferenceLowering$FunctionReferenceBuilder","methodName":"generateConstructorCallArguments","parameters":["JvmIrBuilder","IrFunctionAccessExpression","IrBuilder.() -> IrExpression"],"returnType":"Unit"},31,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FunctionReferenceLowering$FunctionReferenceBuilder","methodName":"createFunctionReferenceInvokeMethod","parameters":["IrSimpleFunction","IrValueDeclaration"],"returnType":"Unit"},20,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrArrayBuilder","methodName":"newArray","parameters":["IrExpression"],"returnType":"IrExpression"},10,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FunctionReferenceLowering","methodName":"visitFunctionReference","parameters":["IrFunctionReference"],"returnType":"IrExpression"},11,{"pathToFun":"org.jetbrains.kotlin.ir.builders.Scope","methodName":"createTemporaryVariableDeclaration","parameters":["IrType","String","Boolean","KotlinType","IrDeclarationOrigin","Int","Int"],"returnType":"IrVariable"},50,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ReflectionReferencesGenerator","methodName":"generateCallableReference","parameters":["KtElement","KotlinType","CallableDescriptor","Map","IrStatementOrigin"],"returnType":"IrCallableReference"},21,{"pathToFun":"org.jetbrains.kotlin.ir.util.ConstantValueGenerator","methodName":"generateConstantOrAnnotationValueAsExpression","parameters":["Int","Int","ConstantValue","KotlinType"],"returnType":"IrExpression"},81,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.JvmBackendContext","methodName":"log","parameters":["() -> String"],"returnType":"Unit"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.MethodInlinerUtilKt","methodName":"getNextMeaningful","parameters":["AbstractInsnNode"],"returnType":"AbstractInsnNode"},6,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrArrayBuilder","methodName":"add","parameters":["IrExpression"],"returnType":"Any"},5,{"pathToFun":"org.jetbrains.kotlin.builtins.functions.FunctionInvokeDescriptor","methodName":"isExternal","parameters":[""],"returnType":"Boolean"},20,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer","methodName":"generateNameForLiftedDeclaration","parameters":["IrDeclaration","IrDeclarationParent"],"returnType":"Name"},11,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.IrTypeMappingKt","methodName":"mapTypeParameter","parameters":["IrTypeMapper","IrType","JvmSignatureWriter"],"returnType":"Type"},10,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrTemporaryVariableDescriptorImpl","methodName":"isVar","parameters":[""],"returnType":"Boolean"},50,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.IrInlineCodegen","methodName":"rememberClosure","parameters":["IrFunctionReference","Type","IrValueParameter","IrVariable"],"returnType":"LambdaInfo"},6,{"pathToFun":"org.jetbrains.kotlin.ir.util.RenderIrElementVisitor","methodName":"renderTypeArgument","parameters":["IrTypeArgument"],"returnType":"String"},14,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmDefaultParameterInjector","methodName":"nullConst","parameters":["Int","Int","IrType"],"returnType":"IrExpression"},9,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrVarargImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},5,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.AnnotationCodegen$Companion","methodName":"getRetentionPolicy","parameters":["IrClass"],"returnType":"RetentionPolicy"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrArrayBuilder","methodName":"unaryPlus","parameters":["IrExpression"],"returnType":"Any"},5,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FunctionReferenceLowering$Companion","methodName":"getOwnerKClassType","parameters":["IrDeclarationParent","JvmBackendContext"],"returnType":"IrType"},17,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.TypeOperatorLowering","methodName":"visitTypeOperator","parameters":["IrTypeOperatorCall"],"returnType":"IrExpression"},84,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrUtilsKt","methodName":"needsAccessor","parameters":["IrProperty","IrSimpleFunction"],"returnType":"Boolean"},53,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorExpressionGenerator","methodName":"generateExclExclOperator","parameters":["KtPostfixExpression","IrStatementOrigin"],"returnType":"IrExpression"},14,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ClosureAnnotator$ClosureCollectorVisitor","methodName":"visitFunctionReference","parameters":["IrFunctionReference","ClosureBuilder"],"returnType":"Unit"},20,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitVararg","parameters":["IrVararg","Nothing"],"returnType":"Any"},5,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.AdditionalClassAnnotationLoweringKt","methodName":"applicableTargetSet","parameters":["IrClass"],"returnType":"Set"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ArgumentsGenerationUtilsKt","methodName":"generateVarargExpressionUsing","parameters":["StatementGenerator","VarargValueArgument","ValueParameterDescriptor","ResolvedCall","(KtExpression) -> IrExpression"],"returnType":"IrExpression"},5,{"pathToFun":"org.jetbrains.kotlin.ir.types.impl.IrTypeProjectionImpl","methodName":"equals","parameters":["Any"],"returnType":"Boolean"},13,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen","methodName":"addInnerClassInfoFromAnnotation","parameters":["IrClass"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.IrInlineCodegenKt","methodName":"isInlineIrBlock","parameters":["IrBlock"],"returnType":"Boolean"},6,{"pathToFun":"org.jetbrains.kotlin.backend.common.ir.IrUtilsKt","methodName":"copyToWithoutSuperTypes","parameters":["IrTypeParameter","IrTypeParametersContainer","Int","IrDeclarationOrigin"],"returnType":"IrTypeParameter"},14,{"pathToFun":"org.jetbrains.kotlin.ir.builders.IrElementBuilder","methodName":"updateFrom","parameters":["IrElement"],"returnType":"Unit"},33,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper","methodName":"visitElement","parameters":["IrElement"],"returnType":"Unit"},20,{"pathToFun":"org.jetbrains.kotlin.psi2ir.intermediate.IrUtilsKt","methodName":"adjustForCallee","parameters":["CallReceiver","CallableMemberDescriptor"],"returnType":"CallReceiver"},51,{"pathToFun":"org.jetbrains.kotlin.descriptors.annotations.AnnotationSplitter$LazySplitAnnotations","methodName":"iterator","parameters":[""],"returnType":"Any"},47,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.IrInlineCodegen","methodName":"putClosureParametersOnStack","parameters":["LambdaInfo","StackValue"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitErrorExpression","parameters":["IrErrorExpression","Nothing"],"returnType":"Any"},9,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrFunctionFactory$Companion","methodName":"reflectionFunctionClassName","parameters":["Boolean","Int"],"returnType":"Name"},20,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FakeInliningLocalVariablesLowering","methodName":"visitInlineLambda","parameters":["IrFunctionReference","IrFunction","IrValueParameter","IrDeclaration"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.ir.declarations.lazy.IrLazySymbolTable","methodName":"referenceTypeParameter","parameters":["TypeParameterDescriptor"],"returnType":"IrTypeParameterSymbol"},15,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.JvmLowerKt","methodName":"localName","parameters":["IrDeclarationWithName"],"returnType":"String"},11,{"pathToFun":"org.jetbrains.kotlin.psi.KtValueArgument","methodName":"asElement","parameters":[""],"returnType":"KtElement"},5,{"pathToFun":"org.jetbrains.kotlin.ir.builders.declarations.declarationBuildersKt","methodName":"buildFunWithDescriptorForInlining","parameters":["FunctionDescriptor","IrFunctionBuilder.() -> Unit"],"returnType":"IrFunctionImpl"},33,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertySetterDescriptorImpl","methodName":"getValueParameters","parameters":[""],"returnType":"List"},14,{"pathToFun":"org.jetbrains.kotlin.storage.LockBasedLazyResolveStorageManager$LockProtectedTrace","methodName":"recordType","parameters":["KtExpression","KotlinType"],"returnType":"Unit"},39,{"pathToFun":"org.jetbrains.kotlin.resolve.BindingTraceContext","methodName":"recordType","parameters":["KtExpression","KotlinType"],"returnType":"void"},57,{"pathToFun":"org.jetbrains.kotlin.descriptors.annotations.AnnotationSplitter","methodName":"getOtherAnnotations","parameters":[""],"returnType":"Annotations"},44,{"pathToFun":"org.jetbrains.kotlin.descriptors.annotations.AnnotationSplitter$LazySplitAnnotations","methodName":"hasAnnotation","parameters":["FqName"],"returnType":"Any"},45,{"pathToFun":"org.jetbrains.kotlin.psi.KtProperty","methodName":"hasDelegateExpression","parameters":[""],"returnType":"boolean"},16,{"pathToFun":"org.jetbrains.kotlin.psi.KtProperty","methodName":"getDelegateExpressionOrInitializer","parameters":[""],"returnType":"KtExpression"},15,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"resolveAsPropertyDescriptor","parameters":["DeclarationDescriptor","LexicalScope","LexicalScope","KtVariableDeclaration","BindingTrace","DataFlowInfo","InferenceSession","VariableAsPropertyInfo"],"returnType":"PropertyDescriptor"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.AnnotationCodegen","methodName":"forField","parameters":["FieldVisitor","InnerClassConsumer","GenerationState"],"returnType":"AnnotationCodegen"},42,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"skipDefaultValue","parameters":["PropertyDescriptor","Object","Type"],"returnType":"boolean"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyCodegen\\$DefaultPropertyAccessorStrategy","methodName":"doGenerateBody","parameters":["ExpressionCodegen","JvmMethodSignature"],"returnType":"void"},42,{"pathToFun":"org.jetbrains.kotlin.load.java.JvmAbi","methodName":"hasJvmFieldAnnotation","parameters":["CallableMemberDescriptor"],"returnType":"boolean"},44,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertySetterDescriptorImpl","methodName":"getReturnType","parameters":[""],"returnType":"KotlinType"},14,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$Property","methodName":"storeSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"void"},17,{"pathToFun":"org.jetbrains.kotlin.resolve.BodyResolver","methodName":"resolvePropertyAccessors","parameters":["BodiesResolveContext","KtProperty","PropertyDescriptor"],"returnType":"void"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"resolvePropertySetterDescriptor","parameters":["LexicalScope","KtVariableDeclaration","PropertyDescriptor","AnnotationSplitter","BindingTrace","KtPropertyAccessor","boolean"],"returnType":"PropertySetterDescriptor"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.BindingContext","methodName":"computeValue","parameters":["SlicedMap","PropertyDescriptor","Boolean","boolean"],"returnType":"Boolean"},44,{"pathToFun":"org.jetbrains.kotlin.codegen.JvmCodegenUtil","methodName":"isInlinedJavaConstProperty","parameters":["VariableDescriptor"],"returnType":"boolean"},42,{"pathToFun":"org.jetbrains.kotlin.codegen.serialization.JvmSerializerExtension","methodName":"isJvmFieldPropertyInInterfaceCompanion","parameters":["PropertyDescriptor"],"returnType":"Boolean"},44,{"pathToFun":"org.jetbrains.kotlin.codegen.context.FieldOwnerContext","methodName":"getFieldName","parameters":["PropertyDescriptor","boolean"],"returnType":"String"},42,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tasks.ResolutionCandidate","methodName":"getCall","parameters":[""],"returnType":"Call"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"mapFieldSignature","parameters":["KotlinType","PropertyDescriptor"],"returnType":"String"},42,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorFactory","methodName":"createSetter","parameters":["PropertyDescriptor","Annotations","Annotations","boolean","boolean","boolean","Visibility","SourceElement"],"returnType":"PropertySetterDescriptorImpl"},13,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl","methodName":"isExternal","parameters":[""],"returnType":"boolean"},44,{"pathToFun":"org.jetbrains.kotlin.descriptors.descriptorPsiUtilsKt","methodName":"hasBody","parameters":["PropertyAccessorDescriptor"],"returnType":"Boolean"},44,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"shouldInitializeProperty","parameters":["KtProperty"],"returnType":"boolean"},15,{"pathToFun":"org.jetbrains.kotlin.descriptors.annotations.AnnotationSplitter$LazySplitAnnotations","methodName":"findAnnotation","parameters":["FqName"],"returnType":"Any"},45,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkAccessors","parameters":["KtProperty","PropertyDescriptor"],"returnType":"Unit"},16,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl","methodName":"isSetterProjectedOut","parameters":[""],"returnType":"boolean"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.AnalyzerExtensions","methodName":"getPropertyExtensions","parameters":["PropertyDescriptor"],"returnType":"List"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.ControlFlowAnalyzer","methodName":"checkProperty","parameters":["BodiesResolveContext","KtProperty","PropertyDescriptor"],"returnType":"void"},16,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingUtils","methodName":"isBinaryExpressionDependentOnExpectedType","parameters":["KtBinaryExpression"],"returnType":"boolean"},71,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$Property","methodName":"inlineConstantIfNeeded","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"boolean"},42,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl","methodName":"getDelegateField","parameters":[""],"returnType":"FieldDescriptor"},44,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyCodegen","methodName":"gen","parameters":["KtProperty"],"returnType":"void"},16,{"pathToFun":"org.jetbrains.kotlin.load.java.JvmAbi","methodName":"setterName","parameters":["String"],"returnType":"String"},18,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyCodegen","methodName":"isAccessorNeeded","parameters":["PropertyDescriptor","KtPropertyAccessor","boolean"],"returnType":"boolean"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.bindingContextUtil.BindingContextUtilsKt","methodName":"getParentOfTypeCodeFragmentAware","parameters":["KtElement","Class"],"returnType":"T"},13,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"generateNopSeparatorIfNeeded","parameters":["NotNullLazyValue"],"returnType":"void"},14,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"isPropertyWithBackingFieldCopyInOuterClass","parameters":["PropertyDescriptor"],"returnType":"boolean"},42,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.ScopeUtils","methodName":"makeScopeForPropertyHeader","parameters":["LexicalScope","PropertyDescriptor"],"returnType":"LexicalScope"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.BodyResolver","methodName":"getScopeForProperty","parameters":["BodiesResolveContext","KtProperty"],"returnType":"LexicalScope"},16,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"checkPropertySetterCall","parameters":["ExpressionTypingContext","PropertySetterDescriptor","ResolvedCall","KtExpression"],"returnType":"void"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.bindingContextUtil.BindingContextUtilsKt","methodName":"getEnclosingDescriptor","parameters":["BindingContext","KtElement"],"returnType":"DeclarationDescriptor"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"create","parameters":["ResolutionCandidate","DelegatingBindingTrace","TracingStrategy","MutableDataFlowInfoForArguments"],"returnType":"ResolvedCallImpl"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyPackageMemberScope","methodName":"getScopeForInitializerResolution","parameters":["KtDeclaration"],"returnType":"Any"},14,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkPropertyTypeParametersAreUsedInReceiverType","parameters":["PropertyDescriptor"],"returnType":"Unit"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"initializeProperty","parameters":["ExpressionCodegen","KtProperty"],"returnType":"void"},14,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"intermediateValueForProperty","parameters":["PropertyDescriptor","boolean","ClassDescriptor","StackValue"],"returnType":"Property"},42,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"getVisibilityForBackingField","parameters":["PropertyDescriptor","boolean"],"returnType":"int"},42,{"pathToFun":"org.jetbrains.kotlin.codegen.serialization.JvmSerializerExtension","methodName":"serializeProperty","parameters":["PropertyDescriptor","ProtoBuf.Property.Builder","MutableVersionRequirementTable","DescriptorSerializer"],"returnType":"Unit"},44,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"resolvePropertyDescriptor","parameters":["DeclarationDescriptor","LexicalScope","LexicalScope","KtProperty","BindingTrace","DataFlowInfo","InferenceSession"],"returnType":"PropertyDescriptor"},16,{"pathToFun":"org.jetbrains.kotlin.descriptors.annotations.AnnotationSplitter$LazySplitAnnotations","methodName":"isEmpty","parameters":[""],"returnType":"Any"},44,{"pathToFun":"org.jetbrains.kotlin.resolve.AnnotationChecker$Companion","methodName":"hasBackingField","parameters":["DeclarationDescriptor?","BindingContext"],"returnType":"Any"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.BodyResolver","methodName":"resolveProperty","parameters":["BodiesResolveContext","KtProperty","PropertyDescriptor"],"returnType":"void"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$Property","methodName":"store","parameters":["StackValue","InstructionAdapter","boolean"],"returnType":"void"},17,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tasks.ResolutionCandidate","methodName":"getExplicitReceiverKind","parameters":[""],"returnType":"ExplicitReceiverKind"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.VariableAsPropertyInfo$Companion","methodName":"createFromProperty","parameters":["KtProperty"],"returnType":"VariableAsPropertyInfo"},16,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertySetterDescriptorImpl","methodName":"createSetterParameter","parameters":["PropertySetterDescriptor","KotlinType","Annotations"],"returnType":"ValueParameterDescriptorImpl"},13,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyCodegen","methodName":"generateBackingField","parameters":["PropertyDescriptor","boolean","Object","boolean"],"returnType":"void"},42,{"pathToFun":"org.jetbrains.kotlin.resolve.inline.InlineUtil","methodName":"hasInlineAccessors","parameters":["PropertyDescriptor"],"returnType":"boolean"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkAccessor","parameters":["PropertyDescriptor","KtPropertyAccessor","PropertyAccessorDescriptor"],"returnType":"Unit"},16,{"pathToFun":"org.jetbrains.kotlin.descriptors.annotations.CompositeAnnotations","methodName":"hasAnnotation","parameters":["FqName"],"returnType":"Any"},61,{"pathToFun":"org.jetbrains.kotlin.psi.KtFile","methodName":"getPsiOrParent","parameters":[""],"returnType":"KtElement"},15,{"pathToFun":"org.jetbrains.kotlin.resolve.ExposedVisibilityChecker","methodName":"checkProperty","parameters":["KtProperty","PropertyDescriptor","Visibility"],"returnType":"Boolean"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"writeFieldSignature","parameters":["KotlinType","PropertyDescriptor","JvmSignatureWriter"],"returnType":"Unit"},42,{"pathToFun":"org.jetbrains.kotlin.codegen.serialization.JvmSerializerExtension$SignatureSerializer","methodName":"requiresSignature","parameters":["PropertyDescriptor","String"],"returnType":"Boolean"},42,{"pathToFun":"org.jetbrains.kotlin.psi.KtProperty","methodName":"hasBody","parameters":[""],"returnType":"boolean"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyCodegen","methodName":"generateBackingField","parameters":["PropertyDescriptor","boolean"],"returnType":"void"},44,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyCodegen","methodName":"genBackingFieldAndAnnotations","parameters":["PropertyDescriptor"],"returnType":"void"},44,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"getPropertyOrDelegateType","parameters":["KtProperty","PropertyDescriptor"],"returnType":"KotlinType"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyCodegen","methodName":"generateAccessor","parameters":["KtPropertyAccessor","PropertyAccessorDescriptor"],"returnType":"void"},44,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker$Companion","methodName":"hasAccessorImplementation","parameters":["PropertyDescriptor"],"returnType":"Boolean"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkProperty","parameters":["KtProperty","PropertyDescriptor"],"returnType":"Unit"},16,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"createCallCheckerContext","parameters":["ExpressionTypingContext"],"returnType":"CallCheckerContext"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.BodyResolver","methodName":"createFieldTrackingTrace","parameters":["PropertyDescriptor"],"returnType":"ObservableBindingTrace"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyCodegen","methodName":"gen","parameters":["KtProperty","PropertyDescriptor","KtPropertyAccessor","KtPropertyAccessor"],"returnType":"void"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyCodegen","methodName":"generateSyntheticMethodIfNeeded","parameters":["PropertyDescriptor","boolean"],"returnType":"void"},44,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorFactory","methodName":"createSetter","parameters":["PropertyDescriptor","Annotations","Annotations","boolean","boolean","boolean","SourceElement"],"returnType":"PropertySetterDescriptorImpl"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkPropertyInitializer","parameters":["KtProperty","PropertyDescriptor"],"returnType":"Unit"},16,{"pathToFun":"org.jetbrains.kotlin.psi.KtProperty","methodName":"hasDelegateExpressionOrInitializer","parameters":[""],"returnType":"boolean"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.NewResolvedCallImpl","methodName":"getSmartCastDispatchReceiverType","parameters":[""],"returnType":"KotlinType"},13,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyCodegen","methodName":"shouldWriteFieldInitializer","parameters":["PropertyDescriptor"],"returnType":"boolean"},42,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyCodegen","methodName":"generateSetter","parameters":["PropertyDescriptor","KtPropertyAccessor"],"returnType":"void"},44,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyCodegen","methodName":"isDefaultAccessor","parameters":["KtPropertyAccessor"],"returnType":"boolean"},17,{"pathToFun":"org.jetbrains.kotlin.codegen.serialization.JvmSerializerExtension$SignatureSerializer","methodName":"propertySignature","parameters":["PropertyDescriptor","String","String","JvmProtoBuf.JvmMethodSignature","JvmProtoBuf.JvmMethodSignature","JvmProtoBuf.JvmMethodSignature"],"returnType":"JvmProtoBuf.JvmPropertySignature"},44,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyCodegen","methodName":"isAccessorNeeded","parameters":["PropertyDescriptor","KtPropertyAccessor","boolean","OwnerKind"],"returnType":"boolean"},17,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.ScopeUtils","methodName":"makeScopeForPropertyInitializer","parameters":["LexicalScope","PropertyDescriptor"],"returnType":"LexicalScope"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getCompileTimeConstant","parameters":["KtExpression","BindingContext","boolean"],"returnType":"ConstantValue"},17,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyAccessorDescriptorImpl","methodName":"isInfix","parameters":[""],"returnType":"boolean"},19,{"pathToFun":"org.jetbrains.kotlin.descriptors.annotations.AnnotationSplitter$LazySplitAnnotations","methodName":"forceResolveAllContents","parameters":[""],"returnType":"Unit"},18,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyAccessorDescriptorImpl","methodName":"getTypeParameters","parameters":[""],"returnType":"List"},44,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyCodegen","methodName":"generateGetter","parameters":["PropertyDescriptor","KtPropertyAccessor"],"returnType":"void"},44,{"pathToFun":"org.jetbrains.kotlin.resolve.AnnotationChecker$Companion$TargetLists","methodName":"propertyTargets","parameters":["TargetListBuilder","Boolean","Boolean"],"returnType":"Unit"},16,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertySetterDescriptorImpl","methodName":"getOverriddenDescriptors","parameters":[""],"returnType":"Collection"},14,{"pathToFun":"org.jetbrains.kotlin.codegen.serialization.JvmSerializerExtension","methodName":"shouldSerializeProperty","parameters":["PropertyDescriptor"],"returnType":"Boolean"},44,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertySetterDescriptorImpl","methodName":"initialize","parameters":["ValueParameterDescriptor"],"returnType":"void"},14,{"pathToFun":"org.jetbrains.kotlin.resolve.BodyResolver","methodName":"resolvePropertyInitializer","parameters":["DataFlowInfo","KtProperty","PropertyDescriptor","KtExpression","LexicalScope"],"returnType":"void"},14,{"pathToFun":"org.jetbrains.kotlin.codegen.serialization.JvmSerializerExtension$SignatureSerializer","methodName":"fieldSignature","parameters":["PropertyDescriptor","String","String"],"returnType":"JvmProtoBuf.JvmFieldSignature"},42,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.resolvedCallUtil.resolvedCallUtilKt","methodName":"getDispatchReceiverWithSmartCast","parameters":["ResolvedCall"],"returnType":"ReceiverValue"},13,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertySetterDescriptorImpl","methodName":"getOriginal","parameters":[""],"returnType":"PropertySetterDescriptor"},14,{"pathToFun":"org.jetbrains.kotlin.resolve.AnnotationChecker$Companion$TargetLists","methodName":"T_TOP_LEVEL_PROPERTY","parameters":["Boolean","Boolean"],"returnType":"Any"},14,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"resolvePropertyGetterDescriptor","parameters":["LexicalScope","KtVariableDeclaration","PropertyDescriptor","AnnotationSplitter","BindingTrace","KotlinType","KtPropertyAccessor","boolean"],"returnType":"PropertyGetterDescriptorImpl"},16,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertySetterDescriptorImpl","methodName":"accept","parameters":["DeclarationDescriptorVisitor","D"],"returnType":"R"},14,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.BodyGenerator","methodName":"generateExpressionBody","parameters":["KtExpression"],"returnType":"IrExpressionBody"},20,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyAccessorDescriptorImpl","methodName":"isActual","parameters":[""],"returnType":"boolean"},14,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.FunctionGenerator","methodName":"generateDefaultAccessorBody","parameters":["PropertyAccessorDescriptor","IrSimpleFunction"],"returnType":"Any"},42,{"pathToFun":"org.jetbrains.kotlin.ir.util.TypeTranslator","methodName":"withTypeErasure","parameters":["PropertyDescriptor","() -> T"],"returnType":"T"},42,{"pathToFun":"org.jetbrains.kotlin.backend.common.IrElementTransformerVoidWithContext","methodName":"visitProperty","parameters":["IrProperty"],"returnType":"IrStatement"},44,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.FunctionGenerator","methodName":"generateReceiverExpressionForDefaultPropertyAccessor","parameters":["PropertyDescriptor","IrSimpleFunction"],"returnType":"IrExpression"},42,{"pathToFun":"org.jetbrains.kotlin.backend.common.serialization.signature.IdSignatureBuilder","methodName":"platformSpecificSetter","parameters":["PropertySetterDescriptor"],"returnType":"Unit"},13,{"pathToFun":"org.jetbrains.kotlin.psi2ir.intermediate.PropertyLValueBase","methodName":"assign","parameters":["IrExpression"],"returnType":"IrExpression"},12,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitProperty","parameters":["IrProperty"],"returnType":"Any"},44,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.JvmGeneratorExtensions","methodName":"computeFieldVisibility","parameters":["PropertyDescriptor"],"returnType":"Visibility"},42,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.AssignmentGenerator","methodName":"unwrapPropertyDescriptor","parameters":["PropertyDescriptor"],"returnType":"Any"},13,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irGetField","parameters":["IrBuilderWithScope","IrExpression","IrField"],"returnType":"Any"},53,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.FunctionGenerator","methodName":"generateDefaultSetterBody","parameters":["PropertySetterDescriptor","IrSimpleFunction"],"returnType":"IrBlockBody"},13,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable$FieldSymbolTable","methodName":"signature","parameters":["PropertyDescriptor"],"returnType":"IdSignature"},42,{"pathToFun":"org.jetbrains.kotlin.backend.common.IrElementVisitorVoidWithContext","methodName":"visitProperty","parameters":["IrProperty"],"returnType":"Unit"},44,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.FunctionGenerator","methodName":"generatePropertyAccessor","parameters":["PropertyAccessorDescriptor","KtProperty","KtPropertyAccessor"],"returnType":"IrSimpleFunction"},16,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.DeclarationGenerator","methodName":"generateInitializerBody","parameters":["IrSymbol","KtExpression"],"returnType":"IrExpressionBody"},14,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmPropertiesLowering","methodName":"lowerProperty","parameters":["IrProperty","ClassKind"],"returnType":"List"},44,{"pathToFun":"org.jetbrains.kotlin.ir.declarations.impl.IrPropertyCommonImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},44,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"visitGetField","parameters":["IrGetField"],"returnType":"IrExpression"},42,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.PropertyGenerator","methodName":"generateSetterIfRequired","parameters":["KtProperty","PropertyDescriptor"],"returnType":"IrSimpleFunction"},16,{"pathToFun":"org.jetbrains.kotlin.ir.declarations.impl.IrPropertyCommonImpl","methodName":"acceptChildren","parameters":["IrElementVisitor","D"],"returnType":"Unit"},44,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.PropertyGeneratorKt","methodName":"linkCorrespondingPropertySymbol","parameters":["IrProperty"],"returnType":"Unit"},44,{"pathToFun":"org.jetbrains.kotlin.psi2ir.intermediate.AccessorPropertyLValue","methodName":"store","parameters":["IrExpression"],"returnType":"Any"},13,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.PropertyGenerator","methodName":"actuallyHasBackingField","parameters":["PropertyDescriptor","BindingContext"],"returnType":"Any"},16,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.InventNamesForLocalClasses$NameInventor","methodName":"visitField","parameters":["IrField","Data"],"returnType":"Unit"},42,{"pathToFun":"org.jetbrains.kotlin.backend.common.serialization.mangle.descriptor.DescriptorExportCheckerVisitor","methodName":"visitPropertySetterDescriptor","parameters":["PropertySetterDescriptor","SpecialDeclarationType"],"returnType":"Boolean"},14,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.PropertyGenerator","methodName":"generatePropertyDeclaration","parameters":["KtProperty"],"returnType":"IrProperty"},16,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitProperty","parameters":["IrProperty","Nothing"],"returnType":"Any"},44,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable","methodName":"declareField","parameters":["Int","Int","IrDeclarationOrigin","PropertyDescriptor","IrType","Visibility","(IrFieldSymbol) -> IrField"],"returnType":"IrField"},42,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"isDefaultValueForType","parameters":["Type","Any"],"returnType":"Boolean"},10,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.PropertyGenerator","methodName":"generateGetterIfRequired","parameters":["KtProperty","PropertyDescriptor"],"returnType":"IrSimpleFunction"},16,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitProperty","parameters":["IrProperty","D"],"returnType":"Any"},44,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LowerUtilsKt","methodName":"irBlock","parameters":["IrGeneratorWithScope","IrExpression","IrStatementOrigin","IrType","IrBlockBuilder.() -> Unit"],"returnType":"Any"},33,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.RemapObjectFieldAccesses","methodName":"visitSetField","parameters":["IrSetField"],"returnType":"IrExpression"},13,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.PropertyGenerator","methodName":"generatePropertyBackingField","parameters":["KtElement","PropertyDescriptor","(IrField) -> IrExpressionBody"],"returnType":"IrField"},42,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"coerceInnerExpression","parameters":["IrExpressionBody","KotlinType"],"returnType":"Unit"},47,{"pathToFun":"org.jetbrains.kotlin.backend.common.IrElementTransformerVoidWithContext","methodName":"visitPropertyNew","parameters":["IrProperty"],"returnType":"IrStatement"},44,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.AssignmentGenerator","methodName":"generateAssignmentReceiverForProperty","parameters":["PropertyDescriptor","IrStatementOrigin","KtExpression","ResolvedCall","Boolean"],"returnType":"AssignmentReceiver"},13,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.AssignmentGenerator","methodName":"createPropertyLValue","parameters":["KtExpression","PropertyDescriptor","CallReceiver","Map","IrStatementOrigin","ClassDescriptor"],"returnType":"PropertyLValueBase"},13,{"pathToFun":"org.jetbrains.kotlin.backend.common.IrElementVisitorVoidWithContext","methodName":"visitPropertyNew","parameters":["IrProperty"],"returnType":"Unit"},44,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmInlineClassLowering","methodName":"visitGetField","parameters":["IrGetField"],"returnType":"IrExpression"},42,{"pathToFun":"org.jetbrains.kotlin.psi2ir.intermediate.AccessorPropertyLValue","methodName":"putTypeArguments","parameters":["IrMemberAccessExpression"],"returnType":"Unit"},13,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"visitSetField","parameters":["IrSetField"],"returnType":"IrExpression"},13,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"visitField","parameters":["IrField"],"returnType":"IrStatement"},42,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.RemapObjectFieldAccesses","methodName":"visitGetField","parameters":["IrGetField"],"returnType":"IrExpression"},42,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.ConstLowering","methodName":"visitGetField","parameters":["IrGetField"],"returnType":"IrExpression"},42,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.descriptors.JvmDeclarationFactory","methodName":"getStaticBackingField","parameters":["IrProperty"],"returnType":"IrField"},42,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.PropertyGenerator","methodName":"generateSimpleProperty","parameters":["KtProperty","PropertyDescriptor"],"returnType":"IrProperty"},16,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable","methodName":"referenceField","parameters":["PropertyDescriptor"],"returnType":"Any"},42,{"pathToFun":"org.jetbrains.kotlin.ir.builders.IrBuilderKt","methodName":"irBlock","parameters":["IrGeneratorWithScope","Int","Int","IrStatementOrigin","IrType","IrBlockBuilder.() -> Unit"],"returnType":"IrExpression"},35,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitProperty","parameters":["IrProperty"],"returnType":"Any"},44,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.PropertyGenerator","methodName":"getPropertyDescriptor","parameters":["KtProperty"],"returnType":"PropertyDescriptor"},16,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.FunctionGenerator","methodName":"generateDefaultGetterBody","parameters":["PropertyGetterDescriptor","IrSimpleFunction"],"returnType":"IrBlockBody"},42,{"pathToFun":"org.jetbrains.kotlin.ir.declarations.impl.IrPropertyCommonImpl","methodName":"transformChildren","parameters":["IrElementTransformer","D"],"returnType":"Unit"},44,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable","methodName":"createFieldSymbol","parameters":["PropertyDescriptor"],"returnType":"IrFieldSymbol"},42,{"pathToFun":"org.jetbrains.kotlin.backend.common.serialization.signature.IdSignatureDescriptor$DescriptorBasedSignatureBuilder","methodName":"visitPropertySetterDescriptor","parameters":["PropertySetterDescriptor","Nothing"],"returnType":"Unit"},13,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.RemapObjectFieldAccesses","methodName":"remap","parameters":["IrField"],"returnType":"IrField"},42,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitProperty","parameters":["IrProperty","Nothing"],"returnType":"Any"},44,{"pathToFun":"org.jetbrains.kotlin.backend.common.serialization.mangle.descriptor.DescriptorMangleComputer","methodName":"visitPropertySetterDescriptor","parameters":["PropertySetterDescriptor","Boolean"],"returnType":"Unit"},13,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"getSpecializedToStringCallableMethodOrNull","parameters":["KotlinType","KotlinTypeMapper"],"returnType":"CallableMethod"},63,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"visitBinaryExpression","parameters":["KtBinaryExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},68,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.OperatorCallCheckerKt","methodName":"checkModConvention","parameters":["FunctionDescriptor","LanguageVersionSettings","DiagnosticSink","PsiElement"],"returnType":"Unit"},71,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"invokeAppend","parameters":["InstructionAdapter","KtExpression"],"returnType":"void"},61,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"createOperationArgument","parameters":["KtExpression","KotlinType","CompileTimeType"],"returnType":"OperationArgument"},70,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"isSubtypeOf","parameters":["KotlinType","KotlinType"],"returnType":"Boolean"},36,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher","methodName":"visitBinaryExpression","parameters":["KtBinaryExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},68,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"getTypeInfoForBinaryCall","parameters":["Name","ExpressionTypingContext","KtBinaryExpression"],"returnType":"KotlinTypeInfo"},43,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadResolutionResultsUtil","methodName":"getResultingType","parameters":["OverloadResolutionResults","ResolutionContext"],"returnType":"KotlinType"},49,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitBlockExpression","parameters":["KtBlockExpression","StackValue"],"returnType":"StackValue"},67,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"genInvokeAppendMethod","parameters":["InstructionAdapter","Type","KotlinType","KotlinTypeMapper"],"returnType":"void"},63,{"pathToFun":"org.jetbrains.kotlin.psi.KtLambdaExpression","methodName":"acceptChildren","parameters":["KtVisitor","D"],"returnType":"void"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"genStringBuilderConstructor","parameters":["InstructionAdapter"],"returnType":"void"},63,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"visitBinaryExpression","parameters":["KtBinaryExpression","KotlinType"],"returnType":"CompileTimeConstant"},68,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallResolver","methodName":"resolveCallWithGivenName","parameters":["ResolutionContext","Call","KtReferenceExpression","Name"],"returnType":"OverloadResolutionResults"},57,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingUtils","methodName":"safeGetExpressionReceiver","parameters":["ExpressionTypingFacade","KtExpression","ExpressionTypingContext"],"returnType":"ExpressionReceiver"},43,{"pathToFun":"org.jetbrains.kotlin.psi.psiUtil.ktPsiUtilKt","methodName":"getTrailingCommaByElementsList","parameters":["PsiElement"],"returnType":"PsiElement"},18,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher","methodName":"safeGetTypeInfo","parameters":["KtExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},69,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingUtils","methodName":"safeGetType","parameters":["KotlinTypeInfo"],"returnType":"KotlinType"},69,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"createOperationArgumentForFirstParameter","parameters":["ResolvedValueArgument","ValueParameterDescriptor"],"returnType":"OperationArgument"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"stringBuilderAppendType","parameters":["Type"],"returnType":"Type"},63,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallResolver","methodName":"resolveBinaryCall","parameters":["ExpressionTypingContext","ExpressionReceiver","KtBinaryExpression","Name"],"returnType":"OverloadResolutionResults"},49,{"pathToFun":"org.jetbrains.kotlin.psi.KtParameter","methodName":"getValueParameters","parameters":[""],"returnType":"List"},50,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorKt","methodName":"isStandaloneOnlyConstant","parameters":["CompileTimeConstant"],"returnType":"Boolean"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker","methodName":"makeCall","parameters":["ReceiverValue","KtBinaryExpression"],"returnType":"Call"},49,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.CompileTimeConstant","methodName":"getValue","parameters":["KotlinType"],"returnType":"T"},51,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"isStandaloneOnlyConstant","parameters":["KtExpression"],"returnType":"Boolean"},13,{"pathToFun":"org.jetbrains.kotlin.ir.util.IrTypeUtilsKt","methodName":"isUnsigned","parameters":["IrType"],"returnType":"Boolean"},60,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmStringConcatenationLowering","methodName":"lowerInlineClassArgument","parameters":["JvmIrBuilder","IrExpression"],"returnType":"IrExpression"},64,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrStringConcatenationImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},64,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitStringConcatenation","parameters":["IrStringConcatenation"],"returnType":"Any"},64,{"pathToFun":"org.jetbrains.kotlin.ir.util.IrTypeUtilsKt","methodName":"isTypeFromKotlinPackage","parameters":["IrType","(Name) -> Boolean"],"returnType":"Boolean"},60,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.optimizations.FoldConstantLowering","methodName":"constToString","parameters":["IrConst"],"returnType":"String"},60,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.CallGeneratorKt","methodName":"generateCall","parameters":["CallGenerator","KtElement","CallBuilder","IrStatementOrigin"],"returnType":"Any"},55,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.FlattenStringConcatenationLowering$Companion","methodName":"collectStringConcatenationArguments","parameters":["IrExpression"],"returnType":"List"},64,{"pathToFun":"org.jetbrains.kotlin.builtins.UnsignedTypes","methodName":"isShortNameOfUnsignedType","parameters":["Name"],"returnType":"Any"},60,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitStringConcatenation","parameters":["IrStringConcatenation","Nothing"],"returnType":"Any"},64,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorExpressionGenerator","methodName":"generateBinaryOperatorAsCall","parameters":["KtBinaryExpression","IrStatementOrigin"],"returnType":"IrExpression"},43,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorExpressionGenerator","methodName":"generateCall","parameters":["ResolvedCall","KtExpression","IrStatementOrigin"],"returnType":"Any"},45,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorExpressionGenerator","methodName":"isDynamicBinaryOperator","parameters":["KtBinaryExpression"],"returnType":"Boolean"},68,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrStringConcatenationImpl","methodName":"transformChildren","parameters":["IrElementTransformer","D"],"returnType":"Unit"},64,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmStringConcatenationLowering","methodName":"visitStringConcatenation","parameters":["IrStringConcatenation"],"returnType":"IrExpression"},64,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.instructions.InstructionVisitor","methodName":"visitMerge","parameters":["MergeInstruction"],"returnType":"Unit"},70,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.IntegerLiteralTypeConstructor","methodName":"toString","parameters":[""],"returnType":"String"},40,{"pathToFun":"org.jetbrains.kotlin.load.java.descriptors.JavaMethodDescriptor","methodName":"hasStableParameterNames","parameters":[""],"returnType":"boolean"},57,{"pathToFun":"org.jetbrains.kotlin.types.TypeIntersector","methodName":"isIntersectionEmpty","parameters":["KotlinType","KotlinType"],"returnType":"boolean"},61,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiUtil","methodName":"isNullConstant","parameters":["KtExpression"],"returnType":"boolean"},58,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"jumpOnFalse","parameters":["Label","KtElement","PseudoValue"],"returnType":"Unit"},62,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"numberFunctionOperandType","parameters":["Type"],"returnType":"Type"},29,{"pathToFun":"org.jetbrains.kotlin.contracts.EffectsExtractingVisitor","methodName":"visitBinaryExpression","parameters":["KtBinaryExpression","Unit"],"returnType":"Computation"},58,{"pathToFun":"org.jetbrains.kotlin.codegen.CoercionValue","methodName":"putSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"Unit"},39,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"unboxType","parameters":["Type"],"returnType":"Type"},38,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.IntegerLiteralTypeConstructor","methodName":"getDeclarationDescriptor","parameters":[""],"returnType":"ClassifierDescriptor"},37,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"merge","parameters":["KtExpression","List"],"returnType":"MergeInstruction"},70,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.IntegerLiteralTypeConstructor","methodName":"valueToString","parameters":[""],"returnType":"String"},40,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DataFlowAnalyzer","methodName":"typeHasEqualsFromAny","parameters":["KotlinType","KtElement"],"returnType":"boolean"},61,{"pathToFun":"org.jetbrains.kotlin.load.java.descriptors.utilKt","methodName":"getParameterNameAnnotation","parameters":["ValueParameterDescriptor"],"returnType":"AnnotationDescriptor"},56,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"jump","parameters":["Label","KtElement"],"returnType":"Unit"},70,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionCodegen","methodName":"generateBridge","parameters":["PsiElement","FunctionDescriptor","Method","Method","KotlinType","boolean","boolean"],"returnType":"void"},21,{"pathToFun":"org.jetbrains.kotlin.contracts.EffectsExtractingVisitor","methodName":"visitConstantExpression","parameters":["KtConstantExpression","Unit"],"returnType":"Computation"},46,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isFloat","parameters":["KotlinType"],"returnType":"boolean"},33,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadingConflictResolver","methodName":"isNonSubtypeNotLessSpecific","parameters":["KotlinType","KotlinType","KotlinType","KotlinType","KotlinType","KotlinType","KotlinType","KotlinType"],"returnType":"Boolean"},19,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"genLazyUnlessProvided","parameters":["StackValue","KtExpression","Type","KotlinType"],"returnType":"StackValue"},54,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"checkUnderscores","parameters":["KtConstantExpression","IElementType","ExpressionTypingContext"],"returnType":"void"},42,{"pathToFun":"org.jetbrains.kotlin.codegen.NumberCompare$Companion","methodName":"getNumberCompareOpcode","parameters":["IElementType"],"returnType":"Int"},31,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowUtilsKt","methodName":"getKotlinTypeForComparison","parameters":["KtExpression","BindingContext"],"returnType":"KotlinType"},25,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseIf","parameters":[""],"returnType":"void"},62,{"pathToFun":"org.jetbrains.kotlin.types.checker.TypeCheckerProcedureCallbacksImpl","methodName":"assertEqualTypes","parameters":["KotlinType","KotlinType","TypeCheckingProcedure"],"returnType":"boolean"},39,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadingConflictResolver","methodName":"isNonSubtypeNotLessSpecific","parameters":["KotlinTypeMarker","KotlinTypeMarker"],"returnType":"Boolean"},19,{"pathToFun":"org.jetbrains.kotlin.contracts.model.structure.ESConstants","methodName":"booleanValue","parameters":["Boolean"],"returnType":"Any"},62,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isCharOrNullableChar","parameters":["KotlinType"],"returnType":"boolean"},34,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.ArgumentTypeResolver","methodName":"updateResultArgumentTypeIfNotDenotable","parameters":["BindingTrace","StatementFilter","KotlinType","KotlinType","KtExpression"],"returnType":"KotlinType"},39,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"isEnumExpression","parameters":["KtExpression"],"returnType":"boolean"},51,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.IntegerLiteralTypeConstructor","methodName":"addSignedPossibleTypes","parameters":[""],"returnType":"Unit"},40,{"pathToFun":"org.jetbrains.kotlin.types.AbstractClassTypeConstructor","methodName":"areFqNamesEqual","parameters":["ClassDescriptor","ClassDescriptor"],"returnType":"boolean"},62,{"pathToFun":"org.jetbrains.kotlin.resolve.checkers.PrimitiveNumericComparisonCallChecker","methodName":"getPrimitiveTypeOrSupertype","parameters":["KotlinType"],"returnType":"KotlinType"},61,{"pathToFun":"org.jetbrains.kotlin.codegen.NumberCompare","methodName":"patchOpcode","parameters":["Int","InstructionAdapter"],"returnType":"Int"},26,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.SignatureEnhancement$SignatureParts","methodName":"extractQualifiers","parameters":["KotlinType"],"returnType":"JavaTypeQualifiers"},56,{"pathToFun":"org.jetbrains.kotlin.codegen.CoercionValue","methodName":"putReceiver","parameters":["InstructionAdapter","Boolean"],"returnType":"Unit"},39,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getLeftOperandType","parameters":["PrimitiveNumericComparisonInfo"],"returnType":"KotlinType"},51,{"pathToFun":"org.jetbrains.kotlin.psi.KtIfExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},62,{"pathToFun":"org.jetbrains.kotlin.util.OperatorChecks","methodName":"isAny","parameters":["DeclarationDescriptor"],"returnType":"Any"},52,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.IntegerLiteralTypeConstructor","methodName":"isDenotable","parameters":[""],"returnType":"Boolean"},37,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"isUnit","parameters":["KotlinTypeMarker"],"returnType":"Boolean"},15,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.IntegerLiteralTypeConstructor","methodName":"checkBoundsAndAddPossibleType","parameters":["Long","KotlinType"],"returnType":"Unit"},40,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isDouble","parameters":["KotlinType"],"returnType":"boolean"},33,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"isPrimitiveNumberOrNullableType","parameters":["KotlinType"],"returnType":"Boolean"},61,{"pathToFun":"org.jetbrains.kotlin.resolve.checkers.PrimitiveNumericComparisonCallChecker","methodName":"getStableTypesForExpression","parameters":["CallCheckerContext","KtExpression"],"returnType":"List"},58,{"pathToFun":"org.jetbrains.kotlin.load.java.descriptors.utilKt","methodName":"getDefaultValueFromAnnotation","parameters":["ValueParameterDescriptor"],"returnType":"AnnotationDefaultValue"},58,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"isByte","parameters":["KotlinType"],"returnType":"Any"},33,{"pathToFun":"org.jetbrains.kotlin.types.TypeWithEnhancementKt","methodName":"unwrapEnhancement","parameters":["KotlinType"],"returnType":"KotlinType"},56,{"pathToFun":"org.jetbrains.kotlin.load.java.descriptors.utilKt","methodName":"copyValueParameters","parameters":["Collection","Collection","CallableDescriptor"],"returnType":"List"},53,{"pathToFun":"org.jetbrains.kotlin.codegen.PrimitiveToObjectEquality$Companion","methodName":"isApplicable","parameters":["IElementType","Type","Type"],"returnType":"Any"},51,{"pathToFun":"org.jetbrains.kotlin.types.expressions.SenselessComparisonChecker","methodName":"checkSenselessComparisonWithNull","parameters":["KtBinaryExpression","KtExpression","KtExpression","ResolutionContext","(KtExpression) -> KotlinType","(DataFlowValue) -> Nullability"],"returnType":"Unit"},58,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitIfExpression","parameters":["KtIfExpression","D"],"returnType":"R"},62,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.ArgumentTypeResolver","methodName":"updateResultArgumentTypeIfNotDenotable","parameters":["ResolutionContext","KtExpression"],"returnType":"KotlinType"},39,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"getComparable","parameters":[""],"returnType":"ClassDescriptor"},33,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.PseudocodeImpl","methodName":"addMergedValues","parameters":["MergeInstruction"],"returnType":"Unit"},70,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.SignatureEnhancement","methodName":"partsForValueParameter","parameters":["CallableMemberDescriptor","ValueParameterDescriptor","LazyJavaResolverContext","(CallableMemberDescriptor) -> KotlinType"],"returnType":"Any"},58,{"pathToFun":"org.jetbrains.kotlin.builtins.jvm.JavaToKotlinClassMap","methodName":"isReadOnly","parameters":["KotlinType"],"returnType":"Boolean"},56,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.instructions.eval.MergeInstruction","methodName":"accept","parameters":["InstructionVisitor"],"returnType":"Any"},70,{"pathToFun":"org.jetbrains.kotlin.load.java.BuiltinMethodsWithSpecialGenericSignature","methodName":"getOverriddenBuiltinFunctionWithErasedValueParametersInJava","parameters":["FunctionDescriptor"],"returnType":"FunctionDescriptor"},47,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DataFlowAnalyzer","methodName":"getOverriddenDescriptorFromClass","parameters":["FunctionDescriptor"],"returnType":"FunctionDescriptor"},51,{"pathToFun":"org.jetbrains.kotlin.codegen.CondJump","methodName":"condJump","parameters":["Label","InstructionAdapter","Boolean"],"returnType":"Unit"},65,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"jumpOnFalse","parameters":["Label","KtElement","PseudoValue"],"returnType":"Unit"},62,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseCondition","parameters":[""],"returnType":"void"},62,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.CompileTimeConstantChecker","methodName":"parseChar","parameters":["KtConstantExpression"],"returnType":"Character"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.checkers.PrimitiveNumericComparisonCallChecker","methodName":"inferPrimitiveNumericComparisonType","parameters":["BindingTrace","List","List","KtExpression"],"returnType":"Unit"},61,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"rollbackOrDrop","parameters":["Marker","KtToken","String","IElementType"],"returnType":"boolean"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.ieee754Kt","methodName":"calcProperTypeForIeee754ArithmeticIfNeeded","parameters":["KtExpression","BindingContext","KotlinType","KotlinTypeMapper"],"returnType":"TypeAndNullability"},51,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isShort","parameters":["KotlinType"],"returnType":"boolean"},42,{"pathToFun":"org.jetbrains.kotlin.codegen.JvmBridgesImplKt","methodName":"needToGenerateDelegationToDefaultImpls","parameters":["FunctionDescriptor","JvmDefaultMode"],"returnType":"Boolean"},11,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.IntegerLiteralTypeConstructor","methodName":"getBuiltIns","parameters":[""],"returnType":"KotlinBuiltIns"},40,{"pathToFun":"org.jetbrains.kotlin.resolve.sam.samConstructorUtilsKt","methodName":"recreateTypeParametersAndReturnMapping","parameters":["List","DeclarationDescriptor"],"returnType":"Map"},30,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"gen","parameters":["KtElement","Type"],"returnType":"void"},63,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"isInt","parameters":["KotlinType"],"returnType":"Any"},33,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"isBoxedTypeOf","parameters":["Type","Type"],"returnType":"boolean"},35,{"pathToFun":"org.jetbrains.kotlin.resolve.sam.samConstructorUtilsKt","methodName":"createSamConstructorFunction","parameters":["DeclarationDescriptor","ClassDescriptor","SamConversionResolver","SamConversionOracle"],"returnType":"SamConstructorDescriptor"},30,{"pathToFun":"org.jetbrains.kotlin.resolve.BindingContextUtils","methodName":"updateRecordedType","parameters":["KotlinType","KtExpression","BindingTrace","boolean"],"returnType":"KotlinType"},44,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isLong","parameters":["KotlinType"],"returnType":"boolean"},35,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.PrimitiveTypeUtilKt","methodName":"maxValue","parameters":["KotlinType"],"returnType":"Long"},40,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.CharValue","methodName":"getType","parameters":["ModuleDescriptor"],"returnType":"Any"},9,{"pathToFun":"org.jetbrains.kotlin.psi.KtElementImpl","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},63,{"pathToFun":"org.jetbrains.kotlin.resolve.sam.samConstructorUtilsKt","methodName":"createSubstitutorForTypeParameters","parameters":["Map"],"returnType":"TypeSubstitutor"},30,{"pathToFun":"org.jetbrains.kotlin.types.TypeUtils","methodName":"equalTypes","parameters":["KotlinType","KotlinType"],"returnType":"boolean"},19,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"genEqualsForExpressionsPreferIeee754Arithmetic","parameters":["KtExpression","KtExpression","IElementType","Type","Type","StackValue","PrimitiveNumericComparisonInfo"],"returnType":"StackValue"},51,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isFloatOrNullableFloat","parameters":["KotlinType"],"returnType":"boolean"},33,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"isIntPrimitive","parameters":["Type"],"returnType":"boolean"},73,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"merge","parameters":["KtExpression","List"],"returnType":"MergeInstruction"},70,{"pathToFun":"org.jetbrains.kotlin.types.checker.TypeCheckingProcedure","methodName":"heterogeneousEquivalence","parameters":["KotlinType","KotlinType"],"returnType":"boolean"},52,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"visitEquality","parameters":["KtBinaryExpression","ExpressionTypingContext","KtSimpleNameExpression","KtExpression","KtExpression"],"returnType":"KotlinTypeInfo"},58,{"pathToFun":"org.jetbrains.kotlin.types.enumCompatibilityCheckerKt","methodName":"isIncompatibleEnums","parameters":["KotlinType","KotlinType"],"returnType":"Boolean"},61,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver$CollectErrorInformationForInheritedMembersStrategy","methodName":"abstractMemberNotImplemented","parameters":["CallableMemberDescriptor"],"returnType":"Unit"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"cmp","parameters":["IElementType","Type","StackValue","StackValue"],"returnType":"StackValue"},26,{"pathToFun":"org.jetbrains.kotlin.load.java.descriptors.JavaMethodDescriptor","methodName":"createSubstitutedCopy","parameters":["DeclarationDescriptor","FunctionDescriptor","Kind","Name","Annotations","SourceElement"],"returnType":"JavaMethodDescriptor"},57,{"pathToFun":"org.jetbrains.kotlin.types.checker.TypeCheckingProcedure\\$EnrichedProjectionKind","methodName":"fromVariance","parameters":["Variance"],"returnType":"EnrichedProjectionKind"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.PrimitiveTypeUtilKt","methodName":"minValue","parameters":["KotlinType"],"returnType":"Long"},40,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"isBoolean","parameters":["KotlinType"],"returnType":"Boolean"},33,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"genEqualsForExpressionsOnStack","parameters":["IElementType","StackValue","StackValue"],"returnType":"StackValue"},57,{"pathToFun":"org.jetbrains.kotlin.load.java.JavaIncompatibilityRulesOverridabilityCondition$Companion","methodName":"isPrimitiveCompareTo","parameters":["FunctionDescriptor"],"returnType":"Boolean"},52,{"pathToFun":"org.jetbrains.kotlin.parsing.ParseUtilsKt","methodName":"hasUnsignedSuffix","parameters":["String"],"returnType":"Any"},54,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.FunctionDescriptorImpl\\$CopyConfiguration","methodName":"setExtensionReceiverParameter","parameters":["ReceiverParameterDescriptor"],"returnType":"CopyConfiguration"},53,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"isLong","parameters":["KotlinType"],"returnType":"Any"},33,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateEquals","parameters":["KtExpression","KtExpression","IElementType","StackValue","KotlinType","PrimitiveNumericComparisonInfo"],"returnType":"StackValue"},58,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"createCompileTimeConstant","parameters":["Any","CompileTimeConstant.Parameters","KotlinType"],"returnType":"CompileTimeConstant"},54,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.BoxingInterpreterKt","methodName":"isUnboxingMethodName","parameters":["String"],"returnType":"Any"},33,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DataFlowAnalyzer","methodName":"extractDataFlowInfoFromCondition","parameters":["KtExpression","boolean","ExpressionTypingContext"],"returnType":"DataFlowInfo"},62,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.IntegerLiteralTypeConstructor","methodName":"getParameters","parameters":[""],"returnType":"List"},37,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.IntegerLiteralTypeConstructor","methodName":"getApproximatedType","parameters":[""],"returnType":"KotlinType"},40,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"isShort","parameters":["KotlinType"],"returnType":"Any"},33,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluator","methodName":"updateNumberType","parameters":["KotlinType","KtExpression","StatementFilter","BindingTrace"],"returnType":"Unit"},40,{"pathToFun":"org.jetbrains.kotlin.resolve.sam.samConstructorUtilsKt","methodName":"recreateAndInitializeTypeParameters","parameters":["List","DeclarationDescriptor"],"returnType":"SamConstructorTypeParameters"},30,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"isFloat","parameters":["KotlinType"],"returnType":"Any"},33,{"pathToFun":"org.jetbrains.kotlin.codegen.BranchedValue$Companion","methodName":"registerOperations","parameters":["Int","Int"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getRightOperandType","parameters":["PrimitiveNumericComparisonInfo"],"returnType":"KotlinType"},51,{"pathToFun":"org.jetbrains.kotlin.parsing.ParseUtilsKt","methodName":"parseLong","parameters":["String"],"returnType":"Long"},42,{"pathToFun":"org.jetbrains.kotlin.contracts.model.functors.EqualsFunctor","methodName":"doInvocation","parameters":["List","ESTypeSubstitution","Reducer"],"returnType":"List"},58,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitIfExpression","parameters":["KtIfExpression"],"returnType":"Unit"},62,{"pathToFun":"org.jetbrains.kotlin.types.TypeUtils","methodName":"getPrimitiveNumberType","parameters":["IntegerLiteralTypeConstructor","KotlinType"],"returnType":"KotlinType"},40,{"pathToFun":"org.jetbrains.kotlin.codegen.BranchedValue","methodName":"condJump","parameters":["Label","InstructionAdapter","Boolean"],"returnType":"Unit"},65,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseControlStructureBody","parameters":[""],"returnType":"void"},66,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionCodegen","methodName":"getBridgeReturnType","parameters":["Bridge"],"returnType":"KotlinType"},21,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"box","parameters":["Type","Type","InstructionAdapter"],"returnType":"void"},38,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitIfExpression","parameters":["KtIfExpression","Void"],"returnType":"Void"},62,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallResolver","methodName":"resolveEqualsCallWithGivenDescriptors","parameters":["ExpressionTypingContext","KtReferenceExpression","ExpressionReceiver","Call","Collection"],"returnType":"OverloadResolutionResults"},58,{"pathToFun":"org.jetbrains.kotlin.codegen.BranchedValue$Companion","methodName":"condJump","parameters":["StackValue","Label","Boolean","InstructionAdapter"],"returnType":"Unit"},65,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"getNumberType","parameters":[""],"returnType":"SimpleType"},33,{"pathToFun":"org.jetbrains.kotlin.resolve.sam.samConstructorUtilsKt","methodName":"initializeSamConstructorDescriptor","parameters":["ClassDescriptor","SimpleFunctionDescriptorImpl","List","KotlinType","SamConversionResolver","SamConversionOracle"],"returnType":"Unit"},30,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateSingleBranchIf","parameters":["StackValue","KtIfExpression","KtExpression","boolean","boolean"],"returnType":"StackValue"},58,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.MaxStackFrameSizeAndLocalsCalculator","methodName":"visitIntInsn","parameters":["int","int"],"returnType":"void"},51,{"pathToFun":"org.jetbrains.kotlin.psi.KtIfExpression","methodName":"getThen","parameters":[""],"returnType":"KtExpression"},62,{"pathToFun":"org.jetbrains.kotlin.codegen.NumberCompare$Companion","methodName":"patchOpcode","parameters":["Int","InstructionAdapter","IElementType","Type"],"returnType":"Int"},31,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.ConstantConditionEliminationMethodTransformer$ConstantConditionsOptimization","methodName":"tryRewriteBinaryComparison","parameters":["JumpInsnNode","Frame","ArrayList"],"returnType":"Unit"},32,{"pathToFun":"org.jetbrains.kotlin.psi.KtIfExpression","methodName":"getElse","parameters":[""],"returnType":"KtExpression"},62,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.KotlinToResolvedCallTransformer","methodName":"hasNecessarySafeCall","parameters":["KtExpression","BindingTrace"],"returnType":"Boolean"},41,{"pathToFun":"org.jetbrains.kotlin.load.java.JavaIncompatibilityRulesOverridabilityCondition$Companion","methodName":"mapValueParameterType","parameters":["FunctionDescriptor","ValueParameterDescriptor"],"returnType":"Any"},52,{"pathToFun":"org.jetbrains.kotlin.types.enumCompatibilityCheckerKt","methodName":"checkEnumsForCompatibility","parameters":["ExpressionTypingContext","KtElement","KotlinType","KotlinType"],"returnType":"Unit"},61,{"pathToFun":"org.jetbrains.kotlin.contracts.model.functors.EqualsFunctor","methodName":"invokeWithArguments","parameters":["Computation","Computation"],"returnType":"List"},58,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.JvmTypeFactoryImpl","methodName":"createFromString","parameters":["String"],"returnType":"JvmType"},56,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorForStatements","methodName":"visitIfExpression","parameters":["KtIfExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},58,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"isIntOrLongPrimitive","parameters":["Type"],"returnType":"boolean"},73,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.FunctionDescriptorImpl\\$CopyConfiguration","methodName":"setDropOriginalInContainingParts","parameters":[""],"returnType":"CopyConfiguration"},53,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"possibleIntegerTypes","parameters":["SimpleTypeMarker"],"returnType":"Collection"},37,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"isEmptyExpression","parameters":["KtElement"],"returnType":"boolean"},62,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"createReceiverForEquals","parameters":["KtExpression","ExpressionTypingContext"],"returnType":"ExpressionReceiver"},58,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.IntegerLiteralTypeConstructor","methodName":"isContainsOnlyUnsignedTypes","parameters":[""],"returnType":"Boolean"},33,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isBooleanOrSubtype","parameters":["KotlinType"],"returnType":"boolean"},59,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.KotlinToResolvedCallTransformer","methodName":"deparenthesizeOrGetSelector","parameters":["KtExpression","StatementFilter"],"returnType":"KtExpression"},41,{"pathToFun":"org.jetbrains.kotlin.parsing.ParseUtilsKt","methodName":"hasUnsignedLongSuffix","parameters":["String"],"returnType":"Any"},42,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"ensureBooleanResultWithCustomSubject","parameters":["KtExpression","KotlinType","String","ExpressionTypingContext"],"returnType":"boolean"},58,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowInfoImpl","methodName":"equate","parameters":["DataFlowValue","DataFlowValue","Boolean","LanguageVersionSettings"],"returnType":"DataFlowInfo"},61,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"comparisonOperandType","parameters":["Type","Type"],"returnType":"Type"},25,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateIfExpression","parameters":["KtIfExpression","boolean"],"returnType":"StackValue"},62,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"shouldUseProperIeee754Comparisons","parameters":[""],"returnType":"boolean"},51,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.IntegerLiteralTypeConstructor","methodName":"getSupertypes","parameters":[""],"returnType":"Collection"},33,{"pathToFun":"org.jetbrains.kotlin.types.KotlinTypeFactory","methodName":"integerLiteralType","parameters":["Annotations","IntegerLiteralTypeConstructor","Boolean"],"returnType":"SimpleType"},40,{"pathToFun":"org.jetbrains.kotlin.types.flexibleTypesKt","methodName":"asFlexibleType","parameters":["KotlinType"],"returnType":"FlexibleType"},59,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"jump","parameters":["Label","KtElement"],"returnType":"Unit"},70,{"pathToFun":"org.jetbrains.kotlin.parsing.ParseUtilsKt","methodName":"hasLongSuffix","parameters":["String"],"returnType":"Any"},54,{"pathToFun":"org.jetbrains.kotlin.parsing.ParseUtilsKt","methodName":"parseNumericLiteral","parameters":["String","IElementType"],"returnType":"Number"},42,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.CompileTimeConstantChecker","methodName":"checkCharValue","parameters":["ConstantValue","KotlinType","KtConstantExpression"],"returnType":"boolean"},9,{"pathToFun":"org.jetbrains.kotlin.contracts.EffectSystem","methodName":"extractDataFlowInfoFromCondition","parameters":["KtExpression","Boolean","BindingTrace","ModuleDescriptor"],"returnType":"DataFlowInfo"},62,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.IntegerValueTypeConstant","methodName":"toConstantValue","parameters":["KotlinType"],"returnType":"ConstantValue"},40,{"pathToFun":"org.jetbrains.kotlin.psi.KtFunctionLiteral","methodName":"getNameIdentifier","parameters":[""],"returnType":"PsiElement"},17,{"pathToFun":"org.jetbrains.kotlin.util.AbstractModifierChecks","methodName":"ensure","parameters":["Boolean","() -> String"],"returnType":"Any"},52,{"pathToFun":"org.jetbrains.kotlin.codegen.JvmCodegenUtil","methodName":"isOverrideOfBigArityFunctionInvoke","parameters":["DeclarationDescriptor"],"returnType":"boolean"},21,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"ensureNonemptyIntersectionOfOperandTypes","parameters":["KtBinaryExpression","ExpressionTypingContext"],"returnType":"void"},58,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.typeEnhancementKt","methodName":"enhancedNullability","parameters":["T"],"returnType":"Any"},53,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingVisitor","methodName":"checkCondition","parameters":["KtExpression","ExpressionTypingContext"],"returnType":"DataFlowInfo"},62,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.typeEnhancementKt","methodName":"compositeAnnotationsOrSingle","parameters":["List"],"returnType":"Any"},53,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingVisitor","methodName":"visitIfExpression","parameters":["KtIfExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},62,{"pathToFun":"org.jetbrains.kotlin.util.Checks","methodName":"checkAll","parameters":["FunctionDescriptor"],"returnType":"CheckResult"},56,{"pathToFun":"org.jetbrains.kotlin.types.checker.TypeCheckingProcedure","methodName":"getEffectiveProjectionKind","parameters":["TypeParameterDescriptor","TypeProjection"],"returnType":"EnrichedProjectionKind"},13,{"pathToFun":"org.jetbrains.kotlin.psi.KtNamedDeclarationNotStubbed","methodName":"getTextOffset","parameters":[""],"returnType":"int"},17,{"pathToFun":"org.jetbrains.kotlin.util.Check","methodName":"invoke","parameters":["FunctionDescriptor"],"returnType":"String"},56,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.BoxingInterpreterKt","methodName":"isBoxingMethodDescriptor","parameters":["MethodInsnNode"],"returnType":"Boolean"},38,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.CompileTimeConstantChecker\\$CharacterWithDiagnostic","methodName":"getValue","parameters":[""],"returnType":"Character"},9,{"pathToFun":"org.jetbrains.kotlin.psi.KtContainerNode","methodName":"findChildByClass","parameters":["Class"],"returnType":"T"},63,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"createIntegerCompileTimeConstant","parameters":["Long","CompileTimeConstant.Parameters","KotlinType"],"returnType":"CompileTimeConstant"},42,{"pathToFun":"org.jetbrains.kotlin.resolve.checkers.PrimitiveNumericComparisonCallChecker","methodName":"promoteIntegerTypeToIntIfRequired","parameters":["KotlinType"],"returnType":"Any"},33,{"pathToFun":"org.jetbrains.kotlin.types.model.TypeSystemContext","methodName":"hasFlexibleNullability","parameters":["KotlinTypeMarker"],"returnType":"Any"},56,{"pathToFun":"org.jetbrains.kotlin.load.java.descriptors.JavaMethodDescriptor","methodName":"enhance","parameters":["KotlinType","List","KotlinType","Pair"],"returnType":"JavaMethodDescriptor"},53,{"pathToFun":"org.jetbrains.kotlin.util.MemberKindCheck$Member","methodName":"check","parameters":["FunctionDescriptor"],"returnType":"Any"},52,{"pathToFun":"org.jetbrains.kotlin.codegen.BranchedValue$Companion","methodName":"condJump","parameters":["StackValue"],"returnType":"CondJump"},65,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"genLazy","parameters":["KtElement","Type","KotlinType"],"returnType":"StackValue"},55,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.SignatureEnhancement","methodName":"hasDefaultValueInAnnotation","parameters":["ValueParameterDescriptor","KotlinType"],"returnType":"Boolean"},58,{"pathToFun":"org.jetbrains.kotlin.resolve.checkers.PrimitiveNumericComparisonCallChecker","methodName":"leastCommonPrimitiveNumericType","parameters":["KotlinType","KotlinType"],"returnType":"KotlinType"},33,{"pathToFun":"org.jetbrains.kotlin.codegen.BranchedValue$Companion","methodName":"cmp","parameters":["IElementType","Type","StackValue","StackValue"],"returnType":"BranchedValue"},26,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"ensureBooleanResult","parameters":["KtExpression","Name","KotlinType","ExpressionTypingContext"],"returnType":"boolean"},58,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitIfExpression","parameters":["KtIfExpression"],"returnType":"void"},62,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"coercionValueForArgumentOfInlineClassConstructor","parameters":["StackValue","Type","KotlinType","KotlinType"],"returnType":"StackValue"},57,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingVisitor","methodName":"containsJumpOutOfLoop","parameters":["KtExpression","ExpressionTypingContext"],"returnType":"boolean"},62,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"isEnum","parameters":["KotlinType"],"returnType":"Boolean"},61,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isDoubleOrNullableDouble","parameters":["KotlinType"],"returnType":"boolean"},33,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.CompileTimeConstantKt","methodName":"createIntegerValueTypeConstant","parameters":["Number","ModuleDescriptor","CompileTimeConstant.Parameters","Boolean"],"returnType":"CompileTimeConstant"},40,{"pathToFun":"org.jetbrains.kotlin.types.SimpleType","methodName":"toString","parameters":[""],"returnType":"String"},40,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"findEqualsWithNullableAnyParameter","parameters":["ExpressionReceiver","KtBinaryExpression"],"returnType":"List"},58,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.KotlinToJvmSignatureMapperImpl","methodName":"mapToJvmMethodSignature","parameters":["FunctionDescriptor"],"returnType":"Any"},57,{"pathToFun":"org.jetbrains.kotlin.psi.KtIfExpression","methodName":"getCondition","parameters":[""],"returnType":"KtExpression"},62,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.IntegerValueTypeConstant","methodName":"getType","parameters":["KotlinType"],"returnType":"KotlinType"},40,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DataFlowAnalyzer","methodName":"typeHasOverriddenEquals","parameters":["KotlinType","KtElement"],"returnType":"boolean"},51,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingVisitor","methodName":"getTypeInfoWhenOnlyOneBranchIsPresent","parameters":["KtExpression","LexicalWritableScope","DataFlowInfo","DataFlowInfo","ExpressionTypingContext","KtIfExpression"],"returnType":"KotlinTypeInfo"},58,{"pathToFun":"org.jetbrains.kotlin.load.java.descriptors.JavaMethodDescriptor","methodName":"hasSynthesizedParameterNames","parameters":[""],"returnType":"boolean"},57,{"pathToFun":"org.jetbrains.kotlin.codegen.CodegenStatementVisitor","methodName":"visitIfExpression","parameters":["KtIfExpression","StackValue"],"returnType":"StackValue"},58,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.instructions.jumps.ConditionalJumpInstruction","methodName":"accept","parameters":["InstructionVisitor"],"returnType":"Unit"},62,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"calcTypeForIeee754ArithmeticIfNeeded","parameters":["KtExpression","KotlinType"],"returnType":"TypeAndNullability"},51,{"pathToFun":"org.jetbrains.kotlin.psi.KtExpressionImpl","methodName":"findExpressionUnder","parameters":["IElementType"],"returnType":"KtExpression"},63,{"pathToFun":"org.jetbrains.kotlin.codegen.PrimitiveToBoxedEquality$Companion","methodName":"isApplicable","parameters":["IElementType","Type","Type"],"returnType":"Any"},51,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.EnhancedTypeAnnotations","methodName":"isEmpty","parameters":[""],"returnType":"Any"},53,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isBooleanOrNullableBoolean","parameters":["KotlinType"],"returnType":"boolean"},34,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"isIntZero","parameters":["KtExpression","Type"],"returnType":"boolean"},55,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isByte","parameters":["KotlinType"],"returnType":"boolean"},42,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"coercion","parameters":["StackValue","Type","KotlinType"],"returnType":"StackValue"},57,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.ArgumentTypeResolver","methodName":"updateResultArgumentTypeIfNotDenotable","parameters":["BindingTrace","StatementFilter","KotlinType","KtExpression"],"returnType":"KotlinType"},51,{"pathToFun":"org.jetbrains.kotlin.codegen.BoxedToPrimitiveEquality$Companion","methodName":"isApplicable","parameters":["IElementType","Type","Type"],"returnType":"Any"},54,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.CompileTimeConstantChecker","methodName":"parseCharacter","parameters":["KtConstantExpression"],"returnType":"CharacterWithDiagnostic"},9,{"pathToFun":"org.jetbrains.kotlin.builtins.jvm.JavaToKotlinClassMap","methodName":"isMutable","parameters":["KotlinType"],"returnType":"Boolean"},56,{"pathToFun":"org.jetbrains.kotlin.resolve.checkers.PrimitiveNumericComparisonCallChecker","methodName":"findPrimitiveOrNullablePrimitiveType","parameters":["List"],"returnType":"Any"},61,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"unbox","parameters":["Type","Type","InstructionAdapter"],"returnType":"void"},31,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"mergeValues","parameters":["List","KtExpression"],"returnType":"Unit"},69,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"isDouble","parameters":["KotlinType"],"returnType":"Any"},33,{"pathToFun":"org.jetbrains.kotlin.load.java.AnnotationTypeQualifierResolver","methodName":"resolveTypeQualifierNickname","parameters":["ClassDescriptor"],"returnType":"AnnotationDescriptor"},35,{"pathToFun":"org.jetbrains.kotlin.ir.builders.IrBuilderKt","methodName":"buildStatement","parameters":["IrGeneratorWithScope","Int","Int","IrSingleStatementBuilder.() -> T"],"returnType":"Any"},62,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"createHiddenCopyIfBuiltinAlreadyAccidentallyOverridden","parameters":["SimpleFunctionDescriptor","CallableDescriptor","Collection"],"returnType":"SimpleFunctionDescriptor"},34,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.IrIntrinsicFunction","methodName":"genArg","parameters":["IrExpression","ExpressionCodegen","Int","BlockInfo"],"returnType":"Unit"},31,{"pathToFun":"org.jetbrains.kotlin.load.java.BuiltinMethodsWithDifferentJvmName","methodName":"isBuiltinFunctionWithDifferentNameInJvm","parameters":["SimpleFunctionDescriptor"],"returnType":"Boolean"},42,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitBranch","parameters":["IrBranch"],"returnType":"Any"},76,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrWhenBase","methodName":"acceptChildren","parameters":["IrElementVisitor","D"],"returnType":"Unit"},76,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.SignatureEnhancement","methodName":"extractNullability","parameters":["AnnotationDescriptor"],"returnType":"NullabilityQualifierWithMigrationStatus"},35,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.IrIntrinsicFunctionKt","methodName":"receiverAndArgs","parameters":["IrFunctionAccessExpression"],"returnType":"List"},76,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitWhen","parameters":["IrWhen","D"],"returnType":"Any"},76,{"pathToFun":"org.jetbrains.kotlin.ir.util.IrUtilsKt","methodName":"isFalseConst","parameters":["IrExpression"],"returnType":"Any"},76,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitWhen","parameters":["IrWhen","Nothing"],"returnType":"Any"},76,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.methodSignatureMappingKt","methodName":"computeJvmSignature","parameters":["CallableDescriptor"],"returnType":"String"},44,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorExpressionGenerator","methodName":"generateAsPrimitiveNumericComparisonOperand","parameters":["KtExpression","KotlinType","KotlinType"],"returnType":"Any"},58,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"createRenamedCopy","parameters":["SimpleFunctionDescriptor","Name"],"returnType":"SimpleFunctionDescriptor"},34,{"pathToFun":"org.jetbrains.kotlin.load.java.BuiltinMethodsWithDifferentJvmName","methodName":"getJvmName","parameters":["SimpleFunctionDescriptor"],"returnType":"Name"},34,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.IrIntrinsicFunction","methodName":"invoke","parameters":["InstructionAdapter","ExpressionCodegen","BlockInfo","IrFunctionAccessExpression"],"returnType":"StackValue"},34,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitBranch","parameters":["IrBranch","Nothing"],"returnType":"IrBranch"},76,{"pathToFun":"org.jetbrains.kotlin.ir.util.IrUtilsKt","methodName":"isNullConst","parameters":["IrExpression"],"returnType":"Any"},76,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorExpressionGenerator","methodName":"generateEqualityOperator","parameters":["KtBinaryExpression","IrStatementOrigin"],"returnType":"IrExpression"},58,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.SwitchGenerator","methodName":"generate","parameters":[""],"returnType":"PromisedValue"},76,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.SignatureEnhancement","methodName":"extractNullabilityFromKnownAnnotations","parameters":["AnnotationDescriptor"],"returnType":"NullabilityQualifierWithMigrationStatus"},35,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitIfExpression","parameters":["KtIfExpression","Nothing"],"returnType":"IrStatement"},62,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitBranch","parameters":["IrBranch","D"],"returnType":"IrBranch"},76,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrWhenBase","methodName":"transformChildren","parameters":["IrElementTransformer","D"],"returnType":"Unit"},76,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl$Companion","methodName":"char","parameters":["Int","Int","IrType","Char"],"returnType":"IrConstImpl"},34,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"searchMethodsInSupertypesWithoutBuiltinMagic","parameters":["Name"],"returnType":"Collection"},38,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.GeneratorKt","methodName":"getExpressionTypeWithCoercionToUnitOrFail","parameters":["Generator","KtExpression"],"returnType":"KotlinType"},70,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.PromisedValueKt","methodName":"coerceToBoolean","parameters":["PromisedValue"],"returnType":"BooleanValue"},77,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitBranch","parameters":["IrBranch"],"returnType":"Any"},76,{"pathToFun":"org.jetbrains.kotlin.resolve.OverridingUtil","methodName":"getMinimalModality","parameters":["Collection","boolean","Modality"],"returnType":"Modality"},35,{"pathToFun":"org.jetbrains.kotlin.resolve.OverridingUtil","methodName":"createWithEqualityAxioms","parameters":["TypeConstructorEquality"],"returnType":"OverridingUtil"},37,{"pathToFun":"org.jetbrains.kotlin.psi2ir.KotlinUtilsKt","methodName":"findSingleFunction","parameters":["MemberScope","Name"],"returnType":"FunctionDescriptor"},33,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorExpressionGenerator","methodName":"findConversionFunctionTo","parameters":["KotlinType","KotlinType"],"returnType":"FunctionDescriptor"},33,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.FunctionDescriptorImpl","methodName":"setInitialSignatureDescriptor","parameters":["FunctionDescriptor"],"returnType":"void"},34,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.IrBranch","methodName":"transform","parameters":["IrElementTransformer","D"],"returnType":"IrBranch"},76,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"visitWhen","parameters":["IrWhen","BlockInfo"],"returnType":"PromisedValue"},76,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitBranch","parameters":["IrBranch","D"],"returnType":"Any"},76,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"addOverriddenSpecialMethods","parameters":["Name","Collection","Collection","MutableCollection","(Name) -> Collection"],"returnType":"Unit"},39,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.CallGenerator","methodName":"generateSamConstructorCall","parameters":["CallableDescriptor","Int","Int","CallBuilder"],"returnType":"IrExpression"},29,{"pathToFun":"org.jetbrains.kotlin.load.java.AnnotationTypeQualifierResolver","methodName":"resolveTypeQualifierDefaultAnnotation","parameters":["AnnotationDescriptor"],"returnType":"TypeQualifierWithApplicability"},37,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irIfThen","parameters":["IrBuilderWithScope","IrType","IrExpression","IrExpression","IrStatementOrigin"],"returnType":"Any"},62,{"pathToFun":"org.jetbrains.kotlin.load.java.specialBuiltinMembersKt","methodName":"doesOverrideBuiltinWithDifferentJvmName","parameters":["CallableMemberDescriptor"],"returnType":"Boolean"},34,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.Not$BooleanNegation","methodName":"jumpIfFalse","parameters":["Label"],"returnType":"Any"},61,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"markLineNumber","parameters":["IrElement"],"returnType":"Any"},34,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitWhen","parameters":["IrWhen"],"returnType":"Any"},76,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.IntrinsicMethod","methodName":"invoke","parameters":["IrFunctionAccessExpression","ExpressionCodegen","BlockInfo"],"returnType":"PromisedValue"},34,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.Equals","methodName":"invoke","parameters":["IrFunctionAccessExpression","ExpressionCodegen","BlockInfo"],"returnType":"PromisedValue"},75,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.IrIntrinsicFunction$Companion","methodName":"create","parameters":["IrFunctionAccessExpression","JvmMethodSignature","JvmBackendContext","List","IrIntrinsicFunction.(InstructionAdapter) -> Unit"],"returnType":"IrIntrinsicFunction"},34,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorExpressionGenerator","methodName":"promoteToPrimitiveNumericType","parameters":["IrExpression","KotlinType","KotlinType"],"returnType":"IrExpression"},61,{"pathToFun":"org.jetbrains.kotlin.load.java.AnnotationTypeQualifierResolver","methodName":"computeTypeQualifierNickname","parameters":["ClassDescriptor"],"returnType":"AnnotationDescriptor"},35,{"pathToFun":"org.jetbrains.kotlin.ir.util.IrUtilsKt","methodName":"isIntegerConst","parameters":["IrExpression","Int"],"returnType":"Any"},29,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.GeneratorKt","methodName":"getExpressionTypeWithCoercionToUnit","parameters":["Generator","KtExpression"],"returnType":"KotlinType"},70,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"visitWhen","parameters":["IrWhen"],"returnType":"IrExpression"},68,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"put","parameters":["InstructionAdapter"],"returnType":"void"},57,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"searchMethodsByNameWithoutBuiltinMagic","parameters":["Name"],"returnType":"Collection"},38,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.FunctionDescriptorImpl\\$CopyConfiguration","methodName":"setSignatureChange","parameters":[""],"returnType":"CopyConfiguration"},34,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"obtainOverrideForBuiltInWithErasedValueParametersInJava","parameters":["SimpleFunctionDescriptor","(Name) -> Collection","Collection"],"returnType":"SimpleFunctionDescriptor"},35,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl","methodName":"acceptChildren","parameters":["IrElementVisitor","D"],"returnType":"Unit"},76,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"doesOverrideRenamedDescriptor","parameters":["SimpleFunctionDescriptor","FunctionDescriptor"],"returnType":"Boolean"},34,{"pathToFun":"org.jetbrains.kotlin.load.java.components.JavaAnnotationMapper","methodName":"mapOrResolveJavaAnnotation","parameters":["JavaAnnotation","LazyJavaResolverContext"],"returnType":"AnnotationDescriptor"},37,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorExpressionGenerator","methodName":"kotlinTypeToIrType","parameters":["KotlinType"],"returnType":"Any"},61,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitWhen","parameters":["IrWhen","D"],"returnType":"Any"},76,{"pathToFun":"org.jetbrains.kotlin.ir.builders.PrimitivesKt","methodName":"primitiveOp1","parameters":["Int","Int","IrSimpleFunctionSymbol","IrType","IrStatementOrigin","IrExpression"],"returnType":"IrExpression"},59,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"obtainOverrideForSuspend","parameters":["SimpleFunctionDescriptor","(Name) -> Collection"],"returnType":"SimpleFunctionDescriptor"},35,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl","methodName":"transformChildren","parameters":["IrElementTransformer","D"],"returnType":"Unit"},76,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadingConflictResolver","methodName":"equals","parameters":["C","C"],"returnType":"Boolean"},24,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.BranchingExpressionGenerator","methodName":"createIrWhen","parameters":["KtIfExpression","List","IrExpression","IrType"],"returnType":"IrWhen"},62,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitWhen","parameters":["IrWhen","Nothing"],"returnType":"Any"},76,{"pathToFun":"org.jetbrains.kotlin.load.java.specialBuiltinMembersKt","methodName":"getOverriddenSpecialBuiltin","parameters":["T"],"returnType":"T"},35,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitBranch","parameters":["IrBranch","Nothing"],"returnType":"Any"},76,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorExpressionGenerator","methodName":"getPrimitiveNumericComparisonInfo","parameters":["KtBinaryExpression"],"returnType":"Any"},58,{"pathToFun":"org.jetbrains.kotlin.ir.util.IrUtilsKt","methodName":"isTrueConst","parameters":["IrExpression"],"returnType":"Any"},76,{"pathToFun":"org.jetbrains.kotlin.load.java.AnnotationTypeQualifierResolver","methodName":"resolveQualifierBuiltInDefaultAnnotation","parameters":["AnnotationDescriptor"],"returnType":"NullabilityQualifierWithApplicability"},37,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.BinaryOp","methodName":"toCallable","parameters":["IrFunctionAccessExpression","JvmMethodSignature","JvmBackendContext"],"returnType":"IrIntrinsicFunction"},28,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irIfThenMaybeElse","parameters":["IrBuilderWithScope","IrType","IrExpression","IrExpression","IrExpression","IrStatementOrigin"],"returnType":"Any"},62,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.IntValue","methodName":"getType","parameters":["ModuleDescriptor"],"returnType":"Any"},42,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.IrIntrinsicFunction","methodName":"loadArguments","parameters":["ExpressionCodegen","BlockInfo"],"returnType":"Unit"},34,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.SwitchGenerator","methodName":"matchConditions","parameters":["IrExpression"],"returnType":"ArrayList"},76,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.BranchingExpressionGenerator","methodName":"generateIfExpression","parameters":["KtIfExpression"],"returnType":"IrExpression"},62,{"pathToFun":"org.jetbrains.kotlin.ir.builders.PrimitivesKt","methodName":"primitiveOp2","parameters":["Int","Int","IrSimpleFunctionSymbol","IrType","IrStatementOrigin","IrExpression","IrExpression"],"returnType":"IrExpression"},75,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitWhen","parameters":["IrWhen"],"returnType":"Any"},76,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.BooleanComparison","methodName":"jumpIfTrue","parameters":["Label"],"returnType":"Unit"},30,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.BinaryOp","methodName":"shift","parameters":[""],"returnType":"Boolean"},28,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.SwitchGenerator","methodName":"areConstComparisons","parameters":["List"],"returnType":"Boolean"},68,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.IrIntrinsicFunction","methodName":"genInvokeInstructionWithResult","parameters":["InstructionAdapter"],"returnType":"Type"},34,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.Not","methodName":"invoke","parameters":["IrFunctionAccessExpression","ExpressionCodegen","BlockInfo"],"returnType":"Any"},61,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrWhenBase","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},76,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.IrBranch","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},76,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.contextKt","methodName":"extractDefaultNullabilityQualifier","parameters":["LazyJavaResolverContext","AnnotationDescriptor"],"returnType":"NullabilityQualifierWithApplicability"},37,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassDescriptor","methodName":"getModality","parameters":[""],"returnType":"Any"},44,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.FunctionDescriptorImpl\\$CopyConfiguration","methodName":"setName","parameters":["Name"],"returnType":"CopyConfiguration"},34,{"pathToFun":"org.jetbrains.kotlin.load.java.AnnotationTypeQualifierResolver","methodName":"resolveTypeQualifierAnnotation","parameters":["AnnotationDescriptor"],"returnType":"AnnotationDescriptor"},35,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"obtainOverrideForBuiltinWithDifferentJvmName","parameters":["SimpleFunctionDescriptor","(Name) -> Collection","Name","Collection"],"returnType":"SimpleFunctionDescriptor"},35,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"doesOverride","parameters":["CallableDescriptor","CallableDescriptor"],"returnType":"Boolean"},34,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintIncorporatorKt","methodName":"getNestedArguments","parameters":["TypeSystemInferenceExtensionContext","KotlinTypeMarker"],"returnType":"List"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyCodegen","methodName":"generatePrimaryConstructorProperty","parameters":["PropertyDescriptor"],"returnType":"void"},30,{"pathToFun":"org.jetbrains.kotlin.psi.KtBinaryExpressionWithTypeRHS","methodName":"getOperationReference","parameters":[""],"returnType":"KtSimpleNameExpression"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$ThisOuter","methodName":"putSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"void"},15,{"pathToFun":"org.jetbrains.kotlin.resolve.InlineClassDescriptorResolver","methodName":"createConversionFunctionDescriptor","parameters":["Boolean","ClassDescriptor"],"returnType":"SimpleFunctionDescriptor"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.RedundantNullCheckMethodTransformer$TransformerPass$NullabilityAssumptionsBuilder","methodName":"addDependentCheck","parameters":["AbstractInsnNode","VarInsnNode"],"returnType":"Unit"},62,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"addFunctionFromAnyIfNeeded","parameters":["MutableCollection","Name","List"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.psi.KtBinaryExpressionWithTypeRHS","methodName":"getLeft","parameters":[""],"returnType":"KtExpression"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.ObservableBindingTrace","methodName":"report","parameters":["Diagnostic"],"returnType":"void"},15,{"pathToFun":"org.jetbrains.kotlin.parsing.TruncatedSemanticWhitespaceAwarePsiBuilder","methodName":"isOffsetBeyondEof","parameters":["int"],"returnType":"boolean"},11,{"pathToFun":"org.jetbrains.kotlin.resolve.inlineClassesUtilsKt","methodName":"underlyingRepresentation","parameters":["ClassDescriptor"],"returnType":"ValueParameterDescriptor"},26,{"pathToFun":"org.jetbrains.kotlin.parsing.TruncatedSemanticWhitespaceAwarePsiBuilder","methodName":"rawLookAhead","parameters":["int"],"returnType":"int"},11,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionsFromAnyGeneratorImpl","methodName":"visitEndForAnnotationVisitor","parameters":["AnnotationVisitor"],"returnType":"void"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionsFromAnyGeneratorImpl","methodName":"getToStringDesc","parameters":[""],"returnType":"String"},22,{"pathToFun":"org.jetbrains.kotlin.types.AbstractTypeCheckerContext$SupertypesPolicy$UpperIfFlexible","methodName":"transformType","parameters":["AbstractTypeCheckerContext","KotlinTypeMarker"],"returnType":"Any"},19,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitPrimaryConstructor","parameters":["KtPrimaryConstructor","Void"],"returnType":"Void"},32,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.TypeParameterMappings","methodName":"addParameterMappingForFurtherReification","parameters":["String","KT","ReificationArgument","Boolean"],"returnType":"Unit"},12,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitBinaryWithTypeRHSExpression","parameters":["KtBinaryExpressionWithTypeRHS","Void"],"returnType":"Void"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.TrivialConstraintTypeInferenceOracle","methodName":"isGeneratedConstraintTrivial","parameters":["Constraint","Constraint","KotlinTypeMarker","Boolean"],"returnType":"Boolean"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.TrivialConstraintTypeInferenceOracle","methodName":"containsOnlyNonNullableNothing","parameters":["KotlinTypeMarker"],"returnType":"Boolean"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"mapSignatureForBoxMethodOfInlineClass","parameters":["FunctionDescriptor"],"returnType":"JvmMethodGenericSignature"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.TypeVariableTypeConstructor","methodName":"getSupertypes","parameters":[""],"returnType":"Collection"},10,{"pathToFun":"org.jetbrains.kotlin.psi.KtConstructor","methodName":"getNameIdentifier","parameters":[""],"returnType":"Any"},32,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionsFromAnyGeneratorImpl","methodName":"getEqualsDesc","parameters":[""],"returnType":"String"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"underlyingValueOfInlineClass","parameters":["Type","KotlinType","StackValue"],"returnType":"UnderlyingValueOfInlineClass"},22,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractClassDescriptor","methodName":"getMemberScope","parameters":["List"],"returnType":"MemberScope"},22,{"pathToFun":"org.jetbrains.kotlin.types.CastDiagnosticsUtil","methodName":"checkExactTypeForUselessCast","parameters":["KtBinaryExpressionWithTypeRHS"],"returnType":"Boolean"},16,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitBinaryWithTypeRHSExpression","parameters":["KtBinaryExpressionWithTypeRHS"],"returnType":"void"},16,{"pathToFun":"org.jetbrains.kotlin.diagnostics.PositioningStrategyKt","methodName":"markRange","parameters":["TextRange"],"returnType":"List"},12,{"pathToFun":"org.jetbrains.kotlin.resolve.InlineClassDescriptorResolver","methodName":"createBoxFunctionDescriptor","parameters":["ClassDescriptor"],"returnType":"SimpleFunctionDescriptor"},22,{"pathToFun":"org.jetbrains.kotlin.types.model.TypeSystemContext","methodName":"isCapturedType","parameters":["KotlinTypeMarker"],"returnType":"Any"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.ShadowedExtensionChecker","methodName":"checkShadowedExtensionFunction","parameters":["KtDeclaration","FunctionDescriptor","DiagnosticSink"],"returnType":"Unit"},11,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.TrivialConstraintTypeInferenceOracle","methodName":"isNothingOrNullableNothing","parameters":["KotlinTypeMarker"],"returnType":"Boolean"},9,{"pathToFun":"org.jetbrains.kotlin.types.CastDiagnosticsUtil","methodName":"mapToPlatformIndependentClasses","parameters":["KotlinType","PlatformToKotlinClassMap"],"returnType":"List"},15,{"pathToFun":"org.jetbrains.kotlin.types.TypeReconstructionResult","methodName":"isAllArgumentsInferred","parameters":[""],"returnType":"boolean"},18,{"pathToFun":"org.jetbrains.kotlin.types.TypeUtils","methodName":"isReifiedTypeParameter","parameters":["KotlinType"],"returnType":"boolean"},18,{"pathToFun":"org.jetbrains.kotlin.renderer.ClassifierNamePolicy$SHORT","methodName":"renderClassifier","parameters":["ClassifierDescriptor","DescriptorRenderer"],"returnType":"String"},12,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.RenderingContext$Impl","methodName":"get","parameters":["Key"],"returnType":"T"},12,{"pathToFun":"org.jetbrains.kotlin.resolve.InlineClassDescriptorResolver","methodName":"createValueParameter","parameters":["FunctionDescriptor","ValueParameterDescriptor","Name","Int"],"returnType":"ValueParameterDescriptorImpl"},22,{"pathToFun":"org.jetbrains.kotlin.parsing.TruncatedSemanticWhitespaceAwarePsiBuilder","methodName":"getTokenText","parameters":[""],"returnType":"String"},11,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DataFlowAnalyzer","methodName":"getAllPossibleTypes","parameters":["KotlinType","ResolutionContext","DataFlowValue","LanguageVersionSettings"],"returnType":"Collection"},18,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"isUnboxedInlineClass","parameters":["KotlinType","Type"],"returnType":"boolean"},25,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"genHashCode","parameters":["MethodVisitor","InstructionAdapter","Type","JvmTarget"],"returnType":"void"},22,{"pathToFun":"org.jetbrains.kotlin.diagnostics.PositioningStrategies","methodName":"mark","parameters":["KtBinaryExpressionWithTypeRHS"],"returnType":"List"},12,{"pathToFun":"org.jetbrains.kotlin.diagnostics.DiagnosticWithParameters2","methodName":"getB","parameters":[""],"returnType":"B"},13,{"pathToFun":"org.jetbrains.kotlin.psi.psiUtil.ktPsiUtilKt","methodName":"getBinaryWithTypeParent","parameters":["KtExpression"],"returnType":"KtBinaryExpressionWithTypeRHS"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxingInterpreter$Companion","methodName":"isSafeCast","parameters":["BoxedBasicValue","String"],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper$Companion","methodName":"getPredefinedTypeForClass","parameters":["ClassDescriptor"],"returnType":"Type"},24,{"pathToFun":"org.jetbrains.kotlin.codegen.state.inlineClassManglingUtilsKt","methodName":"getSignatureElementForMangling","parameters":["KotlinType"],"returnType":"String"},16,{"pathToFun":"org.jetbrains.kotlin.types.CastDiagnosticsUtil","methodName":"isCastPossible","parameters":["KotlinType","KotlinType","PlatformToKotlinClassMap"],"returnType":"Boolean"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateInstanceReceiver","parameters":["ClassDescriptor","boolean","boolean"],"returnType":"StackValue"},14,{"pathToFun":"org.jetbrains.kotlin.resolve.inlineClassesUtilsKt","methodName":"isGetterOfUnderlyingPropertyOfInlineClass","parameters":["CallableDescriptor"],"returnType":"Any"},22,{"pathToFun":"org.jetbrains.kotlin.types.expressions.TypeReconstructionUtil","methodName":"reconstructBareType","parameters":["KtTypeReference","PossiblyBareType","KotlinType","BindingTrace","KotlinBuiltIns"],"returnType":"KotlinType"},18,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.ResolvedAtomCompleter","methodName":"completeSubCallArgument","parameters":["ResolvedSubCallArgument"],"returnType":"Unit"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"unboxInlineClass","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"void"},23,{"pathToFun":"org.jetbrains.kotlin.psi.KtConstructor","methodName":"getValueParameters","parameters":[""],"returnType":"Any"},32,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper$Companion","methodName":"preprocessType","parameters":["KotlinType"],"returnType":"KotlinType"},26,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.TypeMappingMode","methodName":"wrapInlineClassesMode","parameters":[""],"returnType":"TypeMappingMode"},26,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowInfoImplKt","methodName":"put","parameters":["ImmutableMultimap","K","V"],"returnType":"ImmutableMultimap"},27,{"pathToFun":"org.jetbrains.kotlin.codegen.ErasedInlineClassBodyCodegen","methodName":"generateDeclaration","parameters":[""],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.UninitializedStoresProcessor$UninitializedNewValueMarkerInterpreter","methodName":"merge","parameters":["BasicValue","BasicValue"],"returnType":"BasicValue"},65,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl","methodName":"buildCurrentSubstitutor","parameters":[""],"returnType":"TypeSubstitutorMarker"},34,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.RedundantNullCheckMethodTransformer$TransformerPass$NullabilityAssumptionsBuilder","methodName":"injectAssumptionsForInstanceOfCheck","parameters":["NullabilityAssumptions","Int","AbstractInsnNode"],"returnType":"Unit"},53,{"pathToFun":"org.jetbrains.kotlin.diagnostics.DiagnosticWithParameters2","methodName":"getA","parameters":[""],"returnType":"A"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"getVariableNames","parameters":[""],"returnType":"Any"},23,{"pathToFun":"org.jetbrains.kotlin.types.CastDiagnosticsUtil","methodName":"shouldCheckForExactType","parameters":["KtBinaryExpressionWithTypeRHS","KotlinType"],"returnType":"Boolean"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.FunctionsFromAny","methodName":"shouldAddHashCode","parameters":["Name","Collection","List"],"returnType":"Boolean"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"invokeAppendForEntries","parameters":["InstructionAdapter","List"],"returnType":"void"},43,{"pathToFun":"org.jetbrains.kotlin.types.AbstractNullabilityChecker","methodName":"isApplicableAsEndNode","parameters":["AbstractTypeCheckerContext","SimpleTypeMarker","TypeConstructorMarker"],"returnType":"Boolean"},17,{"pathToFun":"org.jetbrains.kotlin.psi.psiUtil.ktPsiUtilKt","methodName":"modifierFromTokenSet","parameters":["KtModifierListOwner","TokenSet"],"returnType":"Any"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.InlineClassDescriptorResolver","methodName":"createUnboxFunctionDescriptor","parameters":["ClassDescriptor"],"returnType":"SimpleFunctionDescriptor"},22,{"pathToFun":"org.jetbrains.kotlin.psi.KtBinaryExpressionWithTypeRHS","methodName":"getRight","parameters":[""],"returnType":"KtTypeReference"},16,{"pathToFun":"org.jetbrains.kotlin.types.TypeReconstructionResult","methodName":"getResultingType","parameters":[""],"returnType":"KotlinType"},18,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkConstructorDeclaration","parameters":["ClassConstructorDescriptor","KtConstructor"],"returnType":"Unit"},32,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitBinaryWithTypeRHSExpression","parameters":["KtBinaryExpressionWithTypeRHS"],"returnType":"Unit"},16,{"pathToFun":"org.jetbrains.kotlin.types.AbstractNullabilityChecker","methodName":"hasPathByNotMarkedNullableNodes","parameters":["AbstractTypeCheckerContext","SimpleTypeMarker","TypeConstructorMarker"],"returnType":"Any"},17,{"pathToFun":"org.jetbrains.kotlin.types.CastDiagnosticsUtil","methodName":"castIsUseless","parameters":["KtBinaryExpressionWithTypeRHS","ExpressionTypingContext","KotlinType","KotlinType"],"returnType":"Boolean"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"getClassifierNames","parameters":[""],"returnType":"Any"},25,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionCodegen","methodName":"generateDelegateToStaticErasedVersion","parameters":["MethodVisitor","Method","Type","String","Type"],"returnType":"void"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintIncorporator","methodName":"addNewConstraint","parameters":["Context","TypeVariableMarker","Constraint","TypeVariableMarker","Constraint","KotlinTypeMarker","Boolean"],"returnType":"Unit"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.FunctionsFromAny","methodName":"createEqualsFunctionDescriptor","parameters":["ClassDescriptor"],"returnType":"SimpleFunctionDescriptor"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"boxInlineClass","parameters":["KotlinType","InstructionAdapter"],"returnType":"void"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.pseudoInsns.PseudoInsn","methodName":"emit","parameters":["InstructionAdapter"],"returnType":"Unit"},63,{"pathToFun":"org.jetbrains.kotlin.psi.KtConstructor","methodName":"getTypeParameters","parameters":[""],"returnType":"Any"},32,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkExpectedClassConstructor","parameters":["ClassConstructorDescriptor","KtConstructor"],"returnType":"Unit"},32,{"pathToFun":"org.jetbrains.kotlin.types.CastDiagnosticsUtil","methodName":"isUpcast","parameters":["KotlinType","KotlinType"],"returnType":"Boolean"},10,{"pathToFun":"org.jetbrains.kotlin.parsing.SemanticWhitespaceAwarePsiBuilderAdapter","methodName":"disableJoiningComplexTokens","parameters":[""],"returnType":"void"},11,{"pathToFun":"org.jetbrains.kotlin.psi.KtBinaryExpressionWithTypeRHS","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"mapSignatureForSpecializedEqualsOfInlineClass","parameters":["FunctionDescriptor"],"returnType":"JvmMethodGenericSignature"},22,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"visitBinaryWithTypeRHSExpression","parameters":["KtBinaryExpressionWithTypeRHS","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},16,{"pathToFun":"org.jetbrains.kotlin.parsing.SemanticWhitespaceAwarePsiBuilderAdapter","methodName":"isWhitespaceOrComment","parameters":["IElementType"],"returnType":"boolean"},11,{"pathToFun":"org.jetbrains.kotlin.types.CastDiagnosticsUtil","methodName":"isRelated","parameters":["KotlinType","KotlinType","PlatformToKotlinClassMap"],"returnType":"Boolean"},15,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowInfoImpl","methodName":"or","parameters":["DataFlowInfo"],"returnType":"DataFlowInfo"},19,{"pathToFun":"org.jetbrains.kotlin.resolve.inlineClassesUtilsKt","methodName":"isRecursiveInlineClassTypeInner","parameters":["KotlinType","HashSet"],"returnType":"Boolean"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.inlineClassesUtilsKt","methodName":"isRecursiveInlineClassType","parameters":["KotlinType"],"returnType":"Any"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.receivers.ImplicitClassReceiver","methodName":"equals","parameters":["Any"],"returnType":"Any"},14,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.ConstantConditionEliminationMethodTransformer$ConstantPropagationInterpreter","methodName":"merge","parameters":["BasicValue","BasicValue"],"returnType":"BasicValue"},65,{"pathToFun":"org.jetbrains.kotlin.resolve.FunctionsFromAny","methodName":"shouldAddFunctionFromAny","parameters":["Collection   ","List","(FunctionDescriptor) -> Boolean"],"returnType":"Boolean"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.checkers.InlineClassDeclarationChecker","methodName":"isParameterAcceptableForInlineClass","parameters":["KtParameter"],"returnType":"Boolean"},22,{"pathToFun":"org.jetbrains.kotlin.psi.KtConstructor","methodName":"getTypeParameterList","parameters":[""],"returnType":"Any"},32,{"pathToFun":"org.jetbrains.kotlin.resolve.FunctionsFromAny","methodName":"doCreateFunctionFromAny","parameters":["ClassDescriptor","Name"],"returnType":"SimpleFunctionDescriptor"},22,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitStringTemplateEntryWithExpression","parameters":["KtStringTemplateEntryWithExpression","D"],"returnType":"R"},43,{"pathToFun":"org.jetbrains.kotlin.resolve.TopDownAnalysisContext","methodName":"getPrimaryConstructorParameterProperties","parameters":[""],"returnType":"Map"},30,{"pathToFun":"org.jetbrains.kotlin.resolve.FunctionsFromAny","methodName":"createHashCodeFunctionDescriptor","parameters":["ClassDescriptor"],"returnType":"SimpleFunctionDescriptor"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.ErasedInlineClassBodyCodegen","methodName":"done","parameters":[""],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.psi.psiUtil.ktPsiUtilKt","methodName":"modalityModifier","parameters":["KtDeclaration"],"returnType":"Any"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.FunctionsFromAny","methodName":"shouldAddToString","parameters":["Name","Collection","List"],"returnType":"Boolean"},22,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.inlineClassMappingKt","methodName":"computeExpandedTypeForInlineClass","parameters":["TypeSystemCommonBackendContext","KotlinTypeMarker"],"returnType":"KotlinTypeMarker"},26,{"pathToFun":"org.jetbrains.kotlin.psi.KtConstructor","methodName":"getConstructorKeyword","parameters":[""],"returnType":"PsiElement"},32,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"checkBinaryWithTypeRHS","parameters":["KtBinaryExpressionWithTypeRHS","ExpressionTypingContext","KotlinType","KotlinType"],"returnType":"void"},16,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitSimpleNameStringTemplateEntry","parameters":["KtSimpleNameStringTemplateEntry"],"returnType":"void"},41,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.SimpleDiagnosticRenderer","methodName":"render","parameters":["Diagnostic"],"returnType":"String"},10,{"pathToFun":"org.jetbrains.kotlin.psi.KtClassOrObject","methodName":"getAnonymousInitializers","parameters":[""],"returnType":"List"},22,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"create","parameters":["SemanticWhitespaceAwarePsiBuilder"],"returnType":"KotlinParsing"},11,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionsFromAnyGeneratorImpl","methodName":"generateToStringMethod","parameters":["FunctionDescriptor","List"],"returnType":"void"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper$Companion","methodName":"mapInlineClassType","parameters":["KotlinType","TypeMappingMode","TypeMappingConfiguration"],"returnType":"Type"},26,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.SmartTypeRenderer","methodName":"render","parameters":["KotlinType","RenderingContext"],"returnType":"String"},12,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitPrimaryConstructor","parameters":["KtPrimaryConstructor","D"],"returnType":"R"},32,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper$Companion","methodName":"mapInlineClassTypeAsDeclaration","parameters":["KotlinType"],"returnType":"Type"},24,{"pathToFun":"org.jetbrains.kotlin.psi.KtConstructor","methodName":"getReceiverTypeReference","parameters":[""],"returnType":"Any"},32,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionCodegen","methodName":"needIndexForVar","parameters":["JvmMethodParameterKind"],"returnType":"boolean"},15,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitSimpleNameStringTemplateEntry","parameters":["KtSimpleNameStringTemplateEntry","D"],"returnType":"R"},41,{"pathToFun":"org.jetbrains.kotlin.resolve.PossiblyBareType","methodName":"reconstruct","parameters":["KotlinType"],"returnType":"TypeReconstructionResult"},18,{"pathToFun":"org.jetbrains.kotlin.psi.KtConstructor","methodName":"getValueParameterList","parameters":[""],"returnType":"Any"},32,{"pathToFun":"org.jetbrains.kotlin.resolve.InlineClassDescriptorResolver","methodName":"createValueParameterForBoxing","parameters":["FunctionDescriptor","ValueParameterDescriptor"],"returnType":"ValueParameterDescriptorImpl"},22,{"pathToFun":"org.jetbrains.kotlin.psi.KtConstructor","methodName":"getName","parameters":[""],"returnType":"String"},32,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.OptimizationBasicInterpreter","methodName":"isReference","parameters":["BasicValue"],"returnType":"boolean"},61,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.ValueParameterDescriptorImpl","methodName":"copy","parameters":["CallableDescriptor","Name","Int"],"returnType":"ValueParameterDescriptor"},38,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiUtil","methodName":"isSafeCast","parameters":["KtBinaryExpressionWithTypeRHS"],"returnType":"boolean"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.SimpleArgumentsChecksKt","methodName":"checkSubCallArgument","parameters":["ConstraintSystemBuilder","SubKotlinCallArgument","UnwrappedType","KotlinDiagnosticsHolder","ReceiverInfo","InferenceSession"],"returnType":"ResolvedAtom"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowInfoImpl","methodName":"establishSubtyping","parameters":["DataFlowValue","KotlinType","LanguageVersionSettings"],"returnType":"DataFlowInfo"},18,{"pathToFun":"org.jetbrains.kotlin.codegen.state.inlineClassManglingUtilsKt","methodName":"collectSignatureForMangling","parameters":["CallableMemberDescriptor"],"returnType":"String"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionsFromAnyGeneratorImpl","methodName":"generateBasicChecksAndStoreTarget","parameters":["InstructionAdapter","Label","Label"],"returnType":"int"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.codegenUtilKt","methodName":"generateAsCast","parameters":["InstructionAdapter","KotlinType","Type","Boolean","LanguageVersionSettings"],"returnType":"Unit"},16,{"pathToFun":"org.jetbrains.kotlin.types.checker.NewKotlinTypeCheckerKt","methodName":"hasSupertypeWithGivenTypeConstructor","parameters":["UnwrappedType","TypeConstructor"],"returnType":"Any"},20,{"pathToFun":"org.jetbrains.kotlin.diagnostics.PositioningStrategyKt","methodName":"markRange","parameters":["PsiElement","PsiElement"],"returnType":"List"},12,{"pathToFun":"org.jetbrains.kotlin.psi.KtConstructor","methodName":"hasConstructorKeyword","parameters":[""],"returnType":"Boolean"},32,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateThisOrOuter","parameters":["ClassDescriptor","boolean","boolean"],"returnType":"StackValue"},17,{"pathToFun":"org.jetbrains.kotlin.lexer._JetLexer","methodName":"yypushback","parameters":["int"],"returnType":"void"},43,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.RedundantNullCheckMethodTransformer$TransformerPass$NullabilityAssumptions","methodName":"synthetic","parameters":["T"],"returnType":"T"},62,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"visitStringTemplateEntryWithExpression","parameters":["KtStringTemplateEntryWithExpression","Nothing"],"returnType":"TypedCompileTimeConstant"},43,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitStringTemplateEntryWithExpression","parameters":["KtStringTemplateEntryWithExpression"],"returnType":"void"},43,{"pathToFun":"org.jetbrains.kotlin.codegen.state.inlineClassManglingUtilsKt","methodName":"md5base64","parameters":["String"],"returnType":"String"},25,{"pathToFun":"org.jetbrains.kotlin.parsing.TruncatedSemanticWhitespaceAwarePsiBuilder","methodName":"eof","parameters":[""],"returnType":"boolean"},11,{"pathToFun":"org.jetbrains.kotlin.psi.KtSimpleNameStringTemplateEntry","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},41,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.NullabilityInterpreter","methodName":"merge","parameters":["BasicValue","BasicValue"],"returnType":"BasicValue"},62,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateThisOrOuter","parameters":["ClassDescriptor","boolean"],"returnType":"StackValue"},17,{"pathToFun":"org.jetbrains.kotlin.diagnostics.DiagnosticFactory2","methodName":"on","parameters":["E","A","B"],"returnType":"ParametrizedDiagnostic"},14,{"pathToFun":"org.jetbrains.kotlin.resolve.checkers.InlineClassDeclarationChecker","methodName":"isGenericArrayOfTypeParameter","parameters":["KotlinType"],"returnType":"Boolean"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"genTotalOrderEqualsForExpressionOnStack","parameters":["StackValue","StackValue","Type"],"returnType":"BranchedValue"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.StrictBasicValue","methodName":"equals","parameters":["Any"],"returnType":"Boolean"},65,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher","methodName":"visitBinaryWithTypeRHSExpression","parameters":["KtBinaryExpressionWithTypeRHS","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},16,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.adaptiveClassifierNamePolicyKt","methodName":"collectClassifiersFqNames","parameters":["Collection"],"returnType":"Set"},12,{"pathToFun":"org.jetbrains.kotlin.codegen.ErasedInlineClassBodyCodegen","methodName":"generateFunctionsFromAny","parameters":[""],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalScopeStorage","methodName":"functionsByName","parameters":["Name","Int"],"returnType":"List"},25,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalScopeStorage","methodName":"getContributedFunctions","parameters":["Name","LookupLocation"],"returnType":"Any"},25,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionsFromAnyGeneratorImpl","methodName":"genOrLoadOnStack","parameters":["InstructionAdapter","MethodContext","PropertyDescriptor","int"],"returnType":"JvmKotlinType"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.BoxingInterpreter","methodName":"merge","parameters":["BasicValue","BasicValue"],"returnType":"Any"},65,{"pathToFun":"org.jetbrains.kotlin.resolve.jvm.inlineClassManglingRulesKt","methodName":"isDontMangleClass","parameters":["ClassDescriptor"],"returnType":"Any"},20,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.TypeVariableTypeConstructor","methodName":"isDenotable","parameters":[""],"returnType":"Boolean"},11,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$UnderlyingValueOfInlineClass","methodName":"putSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"void"},22,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractClassDescriptor","methodName":"getMemberScope","parameters":["List","KotlinTypeRefiner"],"returnType":"MemberScope"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.ConstantConditionEliminationMethodTransformer$IConstValue","methodName":"equals","parameters":["Any"],"returnType":"Boolean"},55,{"pathToFun":"org.jetbrains.kotlin.diagnostics.SimpleDiagnostic","methodName":"getFactory","parameters":[""],"returnType":"DiagnosticFactory0"},11,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionsFromAnyGeneratorImpl","methodName":"generateEqualsMethod","parameters":["FunctionDescriptor","List"],"returnType":"void"},22,{"pathToFun":"org.jetbrains.kotlin.psi.psiUtil.ktPsiUtilKt","methodName":"visibilityModifier","parameters":["KtModifierListOwner"],"returnType":"Any"},32,{"pathToFun":"org.jetbrains.kotlin.types.CastDiagnosticsUtil","methodName":"isRefinementUseless","parameters":["Collection","KotlinType","Boolean"],"returnType":"Boolean"},18,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DataFlowAnalyzer","methodName":"getAllPossibleTypes","parameters":["KtExpression","KotlinType","ResolutionContext"],"returnType":"Collection"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowValueKindUtilsKt","methodName":"isInvisibleFromOtherModules","parameters":["DeclarationDescriptorWithVisibility"],"returnType":"Boolean"},29,{"pathToFun":"org.jetbrains.kotlin.resolve.inlineClassesUtilsKt","methodName":"unsubstitutedUnderlyingType","parameters":["KotlinType"],"returnType":"KotlinType"},26,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"genInvokeAppendMethod","parameters":["InstructionAdapter","Type","KotlinType"],"returnType":"void"},49,{"pathToFun":"org.jetbrains.kotlin.codegen.ErasedInlineClassBodyCodegen","methodName":"generateKotlinMetadataAnnotation","parameters":[""],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"isInlineClass","parameters":["TypeConstructorMarker"],"returnType":"Boolean"},26,{"pathToFun":"org.jetbrains.kotlin.resolve.InlineClassDescriptorResolver","methodName":"createValueParametersForSpecializedEquals","parameters":["FunctionDescriptor","ValueParameterDescriptor"],"returnType":"List"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkConstructorVisibility","parameters":["ClassConstructorDescriptor","KtDeclaration"],"returnType":"Unit"},32,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateThisOrOuterFromContext","parameters":["ClassDescriptor","boolean","boolean"],"returnType":"StackValue"},17,{"pathToFun":"org.jetbrains.kotlin.parsing.TruncatedSemanticWhitespaceAwarePsiBuilder","methodName":"lookAhead","parameters":["int"],"returnType":"IElementType"},11,{"pathToFun":"org.jetbrains.kotlin.codegen.ErasedInlineClassBodyCodegen","methodName":"generateConstructors","parameters":[""],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.FunctionsFromAny","methodName":"createToStringFunctionDescriptor","parameters":["ClassDescriptor"],"returnType":"SimpleFunctionDescriptor"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.receivers.ImplicitClassReceiver","methodName":"hashCode","parameters":[""],"returnType":"Any"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.OptimizationBasicInterpreter","methodName":"merge","parameters":["BasicValue","BasicValue"],"returnType":"BasicValue"},65,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintIncorporator","methodName":"getNestedTypeVariables","parameters":["Context","KotlinTypeMarker"],"returnType":"List"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.ErasedInlineClassBodyCodegen","methodName":"generateSyntheticPartsAfterBody","parameters":[""],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.psi.KtParameter","methodName":"getTypeParameterList","parameters":[""],"returnType":"KtTypeParameterList"},31,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionsFromAnyGeneratorImpl","methodName":"generateHashCodeMethod","parameters":["FunctionDescriptor","List"],"returnType":"void"},22,{"pathToFun":"org.jetbrains.kotlin.parsing.SemanticWhitespaceAwarePsiBuilderAdapter","methodName":"restoreJoiningComplexTokensState","parameters":[""],"returnType":"void"},11,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"getFunctionNames","parameters":[""],"returnType":"Any"},23,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"getSubstitutedUnderlyingType","parameters":["KotlinTypeMarker"],"returnType":"KotlinTypeMarker"},26,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintIncorporator","methodName":"generateNewConstraint","parameters":["Context","TypeVariableMarker","Constraint","TypeVariableMarker","Constraint"],"returnType":"Unit"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.AbstractFilteringTrace","methodName":"report","parameters":["Diagnostic"],"returnType":"Unit"},14,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitBinaryWithTypeRHSExpression","parameters":["KtBinaryExpressionWithTypeRHS","D"],"returnType":"R"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintIncorporator","methodName":"containsConstrainingTypeWithoutProjection","parameters":["Context","KotlinTypeMarker","Constraint"],"returnType":"Boolean"},9,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"nullableAnyType","parameters":[""],"returnType":"SimpleTypeMarker"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.BranchedValue","methodName":"putSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.psi.KtConstructor","methodName":"getTypeReference","parameters":[""],"returnType":"Any"},32,{"pathToFun":"org.jetbrains.kotlin.psi.KtPrimaryConstructor","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"Any"},32,{"pathToFun":"org.jetbrains.kotlin.parsing.TruncatedSemanticWhitespaceAwarePsiBuilder","methodName":"getTokenType","parameters":[""],"returnType":"IElementType"},11,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"intoWrapperForErasedInlineClass","parameters":["ClassDescriptor","GenerationState"],"returnType":"ClassContext"},22,{"pathToFun":"org.jetbrains.kotlin.diagnostics.PositioningStrategies","methodName":"mark","parameters":["PsiElement"],"returnType":"List"},24,{"pathToFun":"org.jetbrains.kotlin.psi.KtStringTemplateEntry","methodName":"getExpression","parameters":[""],"returnType":"KtExpression"},43,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintIncorporator","methodName":"isPotentialUsefulNullabilityConstraint","parameters":["Context","KotlinTypeMarker","KotlinTypeMarker","ConstraintKind"],"returnType":"Boolean"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.JvmBackendClassResolverForModuleWithDependencies","methodName":"resolveToClassDescriptors","parameters":["Type"],"returnType":"List"},24,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitorKt","methodName":"withInstructionAdapter","parameters":["InstructionAdapter.() -> Unit"],"returnType":"InsnList"},62,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.ConstantConditionEliminationMethodTransformer$ConstantConditionsOptimization","methodName":"tryRewriteComparisonWithZero","parameters":["JumpInsnNode","Frame","ArrayList"],"returnType":"Unit"},66,{"pathToFun":"org.jetbrains.kotlin.resolve.inlineClassesUtilsKt","methodName":"unsubstitutedUnderlyingParameter","parameters":["KotlinType"],"returnType":"ValueParameterDescriptor"},26,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.AdaptiveClassifierNamePolicy","methodName":"renderClassifier","parameters":["ClassifierDescriptor","DescriptorRenderer"],"returnType":"String"},12,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.LazyDeclarationResolver","methodName":"getClassDescriptorIfAny","parameters":["KtClassOrObject","LookupLocation"],"returnType":"ClassDescriptor"},30,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"getDataClassRelatedFunctionNames","parameters":[""],"returnType":"Collection"},23,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.BoxedBasicValueKt","methodName":"unboxedTypeOfInlineClass","parameters":["Type","GenerationState"],"returnType":"Type"},24,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyCodegen","methodName":"areAccessorsNeededForPrimaryConstructorProperty","parameters":["PropertyDescriptor","OwnerKind"],"returnType":"boolean"},30,{"pathToFun":"org.jetbrains.kotlin.psi.KtParameter","methodName":"isVarArg","parameters":[""],"returnType":"boolean"},22,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.adaptiveClassifierNamePolicyKt","methodName":"compute","parameters":["Collection"],"returnType":"ClassifierNamePolicy"},12,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitPrimaryConstructor","parameters":["KtPrimaryConstructor"],"returnType":"void"},32,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"thisOrOuter","parameters":["ExpressionCodegen","ClassDescriptor","boolean","boolean"],"returnType":"StackValue"},15,{"pathToFun":"org.jetbrains.kotlin.diagnostics.DiagnosticWithParameters2","methodName":"getFactory","parameters":[""],"returnType":"DiagnosticFactory2"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"definitelyDoesNotContainName","parameters":["Name"],"returnType":"Boolean"},25,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isString","parameters":["KotlinType"],"returnType":"boolean"},23,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitSimpleNameStringTemplateEntry","parameters":["KtSimpleNameStringTemplateEntry","Void"],"returnType":"Void"},41,{"pathToFun":"org.jetbrains.kotlin.psi.psiUtil.ktPsiUtilKt","methodName":"topParenthesizedParentOrMe","parameters":["KtExpression"],"returnType":"KtExpression"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitBinaryWithTypeRHSExpression","parameters":["KtBinaryExpressionWithTypeRHS","StackValue"],"returnType":"StackValue"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"resolvePrimaryConstructorParameterToAProperty","parameters":["ClassDescriptor","ValueParameterDescriptor","LexicalScope","KtParameter","BindingTrace"],"returnType":"PropertyDescriptor"},30,{"pathToFun":"org.jetbrains.kotlin.resolve.checkers.InlineClassDeclarationChecker","methodName":"isInapplicableParameterType","parameters":["KotlinType"],"returnType":"Any"},22,{"pathToFun":"org.jetbrains.kotlin.psi.psiUtil.ktPsiUtilKt","methodName":"modifierFromTokenSet","parameters":["KtModifierList","TokenSet"],"returnType":"PsiElement"},22,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.DiagnosticWithParameters2Renderer","methodName":"renderParameters","parameters":["DiagnosticWithParameters2"],"returnType":"Array"},13,{"pathToFun":"org.jetbrains.kotlin.psi.KtConstructor","methodName":"getBodyExpression","parameters":[""],"returnType":"KtBlockExpression"},32,{"pathToFun":"org.jetbrains.kotlin.resolve.FunctionsFromAny","methodName":"shouldAddEquals","parameters":["Name","Collection","List"],"returnType":"Boolean"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.ObservableBindingTrace","methodName":"recordType","parameters":["KtExpression","KotlinType"],"returnType":"void"},21,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionsFromAnyGeneratorImpl","methodName":"getFirstParameterDesc","parameters":[""],"returnType":"String"},22,{"pathToFun":"org.jetbrains.kotlin.types.CastDiagnosticsUtil","methodName":"isCastErased","parameters":["KotlinType","KotlinType","KotlinTypeChecker"],"returnType":"Boolean"},18,{"pathToFun":"org.jetbrains.kotlin.parsing.AbstractKotlinParsing","methodName":"createTruncatedBuilder","parameters":["int"],"returnType":"KotlinParsing"},11,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.SamTypeConversions","methodName":"isJavaParameterCanBeConverted","parameters":["KotlinResolutionCandidate","UnwrappedType"],"returnType":"Boolean"},20,{"pathToFun":"org.jetbrains.kotlin.diagnostics.DiagnosticFactory0","methodName":"on","parameters":["E"],"returnType":"SimpleDiagnostic"},11,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionsFromAnyGeneratorImpl","methodName":"getHashCodeDesc","parameters":[""],"returnType":"String"},22,{"pathToFun":"org.jetbrains.kotlin.diagnostics.PositioningStrategy","methodName":"mark","parameters":["E"],"returnType":"List"},23,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.inlineClassMappingKt","methodName":"computeExpandedTypeInner","parameters":["TypeSystemCommonBackendContext","KotlinTypeMarker","HashSet"],"returnType":"KotlinTypeMarker"},26,{"pathToFun":"org.jetbrains.kotlin.codegen.pseudoInsns.PseudoInsnsKt","methodName":"asNotNull","parameters":["InstructionAdapter"],"returnType":"Unit"},62,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"invokeUnboxMethod","parameters":["InstructionAdapter","Type","Type"],"returnType":"void"},23,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionsFromAnyGeneratorImpl","methodName":"getAccess","parameters":[""],"returnType":"int"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionsFromAnyGeneratorImpl","methodName":"mapFunctionName","parameters":["FunctionDescriptor"],"returnType":"String"},22,{"pathToFun":"org.jetbrains.kotlin.psi.KtConstructor","methodName":"hasBody","parameters":[""],"returnType":"Any"},32,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.RedundantNullCheckMethodTransformer$TransformerPass$NullabilityAssumptionsBuilder","methodName":"injectAssumptionsForInsn","parameters":["NullabilityAssumptions","Int","AbstractInsnNode"],"returnType":"Unit"},62,{"pathToFun":"org.jetbrains.kotlin.resolve.inlineClassesUtilsKt","methodName":"substitutedUnderlyingType","parameters":["KotlinType"],"returnType":"KotlinType"},26,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintIncorporator","methodName":"approximateIfNeededAndAddNewConstraint","parameters":["Context","Constraint","KotlinTypeMarker","TypeVariableMarker","TypeVariableMarker","Constraint","Boolean"],"returnType":"Unit"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.ErasedInlineClassBodyCodegen","methodName":"generateSpecializedEqualsStub","parameters":[""],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"invokeBoxMethod","parameters":["InstructionAdapter","Type","Type"],"returnType":"void"},22,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitStringTemplateEntryWithExpression","parameters":["KtStringTemplateEntryWithExpression","Void"],"returnType":"Void"},43,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.adaptiveClassifierNamePolicyKt","methodName":"collectMentionedClassifiersFqNames","parameters":["Iterable","MutableSet"],"returnType":"Unit"},12,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"checkForCastImpossibilityOrRedundancy","parameters":["KtBinaryExpressionWithTypeRHS","KotlinType","KotlinType","ExpressionTypingContext"],"returnType":"void"},16,{"pathToFun":"org.jetbrains.kotlin.codegen.ErasedInlineClassBodyCodegen","methodName":"generateUnboxMethod","parameters":[""],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionCodegen","methodName":"generateMethodInsideInlineClassWrapper","parameters":["JvmDeclarationOrigin","FunctionDescriptor","ClassDescriptor","MethodVisitor","KotlinTypeMapper"],"returnType":"void"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.RedundantNullCheckMethodTransformer$TransformerPass$NullabilityAssumptions","methodName":"listOfSynthetics","parameters":["InstructionAdapter.() -> Unit"],"returnType":"InsnList"},62,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"mapSignatureForInlineErasedClassSkipGeneric","parameters":["FunctionDescriptor"],"returnType":"JvmMethodSignature"},24,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.AdaptiveClassifierNamePolicy","methodName":"hasUniqueName","parameters":["ClassifierDescriptor"],"returnType":"Boolean"},12,{"pathToFun":"org.jetbrains.kotlin.types.TypeUtils","methodName":"isNonReifiedTypeParameter","parameters":["KotlinType"],"returnType":"boolean"},18,{"pathToFun":"org.jetbrains.kotlin.psi.KtConstructor","methodName":"getTextOffset","parameters":[""],"returnType":"Int"},32,{"pathToFun":"org.jetbrains.kotlin.psi.KtParameter","methodName":"getValueParameterList","parameters":[""],"returnType":"KtParameterList"},31,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper$Companion","methodName":"mapUnderlyingTypeOfInlineClassType","parameters":["KotlinType"],"returnType":"Type"},26,{"pathToFun":"org.jetbrains.kotlin.parsing.SemanticWhitespaceAwarePsiBuilderImpl","methodName":"isWhitespaceOrComment","parameters":["IElementType"],"returnType":"boolean"},11,{"pathToFun":"org.jetbrains.kotlin.resolve.DataClassDescriptorResolver","methodName":"isComponentLike","parameters":["Name"],"returnType":"Boolean"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.InlineClassDescriptorResolver","methodName":"createSpecializedEqualsDescriptor","parameters":["ClassDescriptor"],"returnType":"SimpleFunctionDescriptor"},22,{"pathToFun":"org.jetbrains.kotlin.psi.KtParameter","methodName":"isMutable","parameters":[""],"returnType":"boolean"},30,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.receivers.ImplicitClassReceiver","methodName":"getOriginal","parameters":[""],"returnType":"Any"},14,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintIncorporator","methodName":"substitute","parameters":["KotlinTypeMarker","Context","TypeVariableMarker","KotlinTypeMarker"],"returnType":"KotlinTypeMarker"},9,{"pathToFun":"org.jetbrains.kotlin.psi.KtPrimaryConstructor","methodName":"getContainingClassOrObject","parameters":[""],"returnType":"Any"},32,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"resolveParameterType","parameters":["LexicalScope","KtParameter","BindingTrace"],"returnType":"KotlinType"},34,{"pathToFun":"org.jetbrains.kotlin.resolve.DataClassDescriptorResolver","methodName":"isComponentLike","parameters":["String"],"returnType":"Boolean"},22,{"pathToFun":"org.jetbrains.kotlin.ir.util.KotlinUtilsKt","methodName":"findFirstFunction","parameters":["ClassDescriptor","String","(CallableMemberDescriptor) -> Boolean"],"returnType":"Any"},22,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitStringConcatenation","parameters":["IrStringConcatenation","Nothing"],"returnType":"Any"},46,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrThrowImpl","methodName":"acceptChildren","parameters":["IrElementVisitor","D"],"returnType":"Unit"},35,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irAs","parameters":["IrBuilderWithScope","IrExpression","IrType"],"returnType":"Any"},23,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitThrow","parameters":["IrThrow","Nothing"],"returnType":"Any"},35,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.DataClassMembersGenerator$MyDataClassMethodGenerator","methodName":"generateSyntheticFunctionParameterDeclarations","parameters":["IrFunction"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LowerUtilsKt","methodName":"irBlockBody","parameters":["IrGeneratorWithScope","IrElement","IrBlockBodyBuilder.() -> Unit"],"returnType":"Any"},28,{"pathToFun":"org.jetbrains.kotlin.ir.builders.IrBuilderKt","methodName":"irBlockBody","parameters":["IrGeneratorWithScope","Int","Int","IrBlockBodyBuilder.() -> Unit"],"returnType":"IrBlockBody"},28,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.PromisedValueKt","methodName":"materialize","parameters":["PromisedValue"],"returnType":"Unit"},40,{"pathToFun":"org.jetbrains.kotlin.ir.util.DataClassMembersGenerator$MemberFunctionBuilder","methodName":"getHashCodeOf","parameters":["PropertyDescriptor","IrExpression"],"returnType":"IrExpression"},22,{"pathToFun":"org.jetbrains.kotlin.ir.util.DataClassMembersGenerator$MemberFunctionBuilder","methodName":"generateToStringMethodBody","parameters":["List"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.ClassDescriptorImpl","methodName":"isCompanionObject","parameters":[""],"returnType":"boolean"},7,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LowerUtilsKt","methodName":"irThrow","parameters":["IrBuilderWithScope","IrExpression"],"returnType":"Any"},23,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irNotEquals","parameters":["IrBuilderWithScope","IrExpression","IrExpression"],"returnType":"Any"},23,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.inlineclasses.MemoizedInlineClassReplacements","methodName":"buildReplacement","parameters":["IrFunction","IrDeclarationOrigin","Boolean","IrFunctionImpl.() -> Unit"],"returnType":"Any"},26,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.RedundantNullCheckMethodTransformerKt","methodName":"popReferenceValueBefore","parameters":["InsnList","AbstractInsnNode"],"returnType":"Unit"},37,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.SwitchGenerator","methodName":"checkTypeSpecifics","parameters":["List","(IrType) -> Boolean","(IrConst"],"returnType":"Boolean"},30,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrStringConcatenationImpl","methodName":"acceptChildren","parameters":["IrElementVisitor","D"],"returnType":"Unit"},46,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.TypeOperatorLowering","methodName":"lowerCast","parameters":["IrExpression","IrType"],"returnType":"IrExpression"},28,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irReturnFalse","parameters":["IrBuilderWithScope"],"returnType":"Any"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"pushDefaultValueOnStack","parameters":["Type","InstructionAdapter"],"returnType":"void"},28,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ClassGenerator","methodName":"generateAdditionalMembersForInlineClasses","parameters":["IrClass","KtClassOrObject"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.types.AbstractTypeCheckerContext","methodName":"refineType","parameters":["KotlinTypeMarker"],"returnType":"KotlinTypeMarker"},20,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitThrow","parameters":["IrThrow","D"],"returnType":"Any"},35,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irNotIs","parameters":["IrBuilderWithScope","IrExpression","IrType"],"returnType":"Any"},22,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"asCapturedType","parameters":["SimpleTypeMarker"],"returnType":"CapturedTypeMarker"},20,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irSetField","parameters":["IrBuilderWithScope","IrExpression","IrField","IrExpression"],"returnType":"Any"},46,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmInlineClassLowering","methodName":"buildUnboxFunction","parameters":["IrClass"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.ClassDescriptorImpl","methodName":"isFun","parameters":[""],"returnType":"boolean"},7,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitStringConcatenation","parameters":["IrStringConcatenation"],"returnType":"Any"},46,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmInlineClassLowering","methodName":"buildSpecializedEqualsMethod","parameters":["IrClass"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irLetS","parameters":["IrBuilderWithScope","IrExpression","IrStatementOrigin","String","(IrValueSymbol) -> IrExpression"],"returnType":"IrExpression"},24,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmInlineClassLowering","methodName":"createBridgeBody","parameters":["IrSimpleFunction","IrSimpleFunction"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.UnsafeCoerce","methodName":"invoke","parameters":["IrFunctionAccessExpression","ExpressionCodegen","BlockInfo"],"returnType":"PromisedValue"},22,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.IrElseBranch","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},56,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitStringTemplateEntryWithExpression","parameters":["KtStringTemplateEntryWithExpression","Nothing"],"returnType":"IrStatement"},43,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.inlineclasses.InlineClassAbi","methodName":"mangledNameFor","parameters":["IrFunction","Boolean"],"returnType":"Name"},26,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irTrue","parameters":["IrBuilderWithScope"],"returnType":"Any"},55,{"pathToFun":"org.jetbrains.kotlin.ir.util.KotlinUtilsKt","methodName":"findFirstFunction","parameters":["MemberScope","String","(CallableMemberDescriptor) -> Boolean"],"returnType":"Any"},22,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmStringConcatenationLowering","methodName":"typeToAppendFunction","parameters":["IrType"],"returnType":"IrSimpleFunction"},33,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmInlineClassLowering","methodName":"createBridgeDeclaration","parameters":["IrSimpleFunction","Name"],"returnType":"Any"},22,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irIfThenReturnFalse","parameters":["IrBuilderWithScope","IrExpression"],"returnType":"Any"},22,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitSetVariable","parameters":["IrSetVariable","D"],"returnType":"Any"},9,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irElseBranch","parameters":["IrBuilderWithScope","IrExpression"],"returnType":"Any"},55,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmInlineClassLowering","methodName":"typedArgumentList","parameters":["IrFunction","IrMemberAccessExpression"],"returnType":"Any"},26,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ClosureAnnotator$ClosureBuilder","methodName":"addPotentiallyCapturedTypeParameter","parameters":["IrTypeParameter"],"returnType":"Unit"},12,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.PolymorphicSignatureLowering","methodName":"isCast","parameters":["IrTypeOperatorCall"],"returnType":"Boolean"},30,{"pathToFun":"org.jetbrains.kotlin.backend.common.ir.IrUtilsKt","methodName":"createDispatchReceiverParameter","parameters":["IrFunction","IrDeclarationOrigin"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable$ScopedSymbolTable","methodName":"introduceLocal","parameters":["D","S"],"returnType":"Unit"},30,{"pathToFun":"org.jetbrains.kotlin.ir.util.DataClassMembersGenerator","methodName":"buildWithScope","parameters":["T","(T) -> Unit"],"returnType":"T"},22,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.FunctionGenerator","methodName":"generateSyntheticFunctionParameterDeclarations","parameters":["IrFunction"],"returnType":"Unit"},30,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.SwitchGenerator","methodName":"areConstStringComparisons","parameters":["List"],"returnType":"Boolean"},27,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmInlineClassLowering","methodName":"buildReplacement","parameters":["IrMemberAccessExpression","IrFunction","IrMemberAccessExpression","IrSimpleFunction"],"returnType":"Unit"},26,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.inlineclasses.MemoizedInlineClassReplacements","methodName":"getSpecializedEqualsMethod","parameters":["IrClass","IrBuiltIns"],"returnType":"IrSimpleFunction"},22,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitElseBranch","parameters":["IrElseBranch","D"],"returnType":"IrElseBranch"},56,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitElseBranch","parameters":["IrElseBranch","D"],"returnType":"Any"},56,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitElseBranch","parameters":["IrElseBranch"],"returnType":"Any"},56,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.DataClassMembersGenerator","methodName":"generateInlineClassMembers","parameters":["KtClassOrObject","IrClass"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.ir.util.RenderIrElementVisitor","methodName":"renderType","parameters":["IrType"],"returnType":"Any"},23,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irIfNull","parameters":["IrBuilderWithScope","IrType","IrExpression","IrExpression","IrExpression"],"returnType":"Any"},27,{"pathToFun":"org.jetbrains.kotlin.ir.util.DataClassMembersGenerator","methodName":"getHashCodeFunction","parameters":["PropertyDescriptor","(FunctionDescriptor) -> IrSimpleFunctionSymbol"],"returnType":"IrSimpleFunctionSymbol"},22,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.inlineclasses.InlineClassAbi","methodName":"getUnderlyingType","parameters":["IrClass"],"returnType":"IrType"},26,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrThrowImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},35,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitBinaryWithTypeRHSExpression","parameters":["KtBinaryExpressionWithTypeRHS","Nothing"],"returnType":"IrStatement"},16,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"visitThrow","parameters":["IrThrow","BlockInfo"],"returnType":"PromisedValue"},35,{"pathToFun":"org.jetbrains.kotlin.ir.util.DataClassMembersGenerator$MemberFunctionBuilder","methodName":"addToClass","parameters":["MemberFunctionBuilder.(IrFunction) -> Unit"],"returnType":"IrFunction"},22,{"pathToFun":"org.jetbrains.kotlin.ir.util.DataClassMembersGenerator$MemberFunctionBuilder","methodName":"generateHashCodeMethodBody","parameters":["List"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmInlineClassLowering","methodName":"buildBoxFunction","parameters":["IrClass"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.IrElseBranch","methodName":"transform","parameters":["IrElementTransformer","D"],"returnType":"IrElseBranch"},56,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrStringConcatenationImpl","methodName":"addArgument","parameters":["IrExpression"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"defaultValueOpcode","parameters":["Type"],"returnType":"int"},29,{"pathToFun":"org.jetbrains.kotlin.ir.util.DataClassMembersGenerator","methodName":"generateEqualsMethod","parameters":["FunctionDescriptor","List"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.NullabilityInterpreter","methodName":"isReferenceType","parameters":["Type?"],"returnType":"Any"},62,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.DataClassMembersGenerator$MyDataClassMethodGenerator","methodName":"generateToStringMethod","parameters":["FunctionDescriptor","List"],"returnType":"Any"},22,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irNull","parameters":["IrBuilderWithScope"],"returnType":"Any"},27,{"pathToFun":"org.jetbrains.kotlin.ir.util.DataClassMembersGenerator","methodName":"getHashCodeFunction","parameters":["KotlinType"],"returnType":"FunctionDescriptor"},22,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irFalse","parameters":["IrBuilderWithScope"],"returnType":"Any"},51,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.inlineclasses.MemoizedInlineClassReplacements","methodName":"createStaticReplacement","parameters":["IrFunction"],"returnType":"IrSimpleFunction"},24,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irEqualsNull","parameters":["IrBuilderWithScope","IrExpression"],"returnType":"Any"},27,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irComposite","parameters":["IrBuilderWithScope","Int","Int","IrStatementOrigin","IrType","IrBlockBuilder.() -> Unit"],"returnType":"IrExpression"},21,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmStringConcatenationLowering","methodName":"normalizeArgument","parameters":["IrBuilderWithScope","IrExpression"],"returnType":"IrExpression"},34,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.GeneratorContext","methodName":"commitSubstituted","parameters":["IrDeclarationReference","CallableDescriptor"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.BooleanValue","methodName":"materializeAt","parameters":["Type","IrType"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.DataClassMembersGenerator$MyDataClassMethodGenerator","methodName":"generateEqualsMethod","parameters":["FunctionDescriptor","List"],"returnType":"Any"},22,{"pathToFun":"org.jetbrains.kotlin.ir.util.DataClassMembersGenerator","methodName":"generateToStringMethod","parameters":["FunctionDescriptor","List"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irEquals","parameters":["IrBuilderWithScope","IrExpression","IrExpression","IrStatementOrigin"],"returnType":"Any"},53,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irChar","parameters":["IrBuilderWithScope","Char"],"returnType":"Any"},25,{"pathToFun":"org.jetbrains.kotlin.ir.util.DataClassMembersGenerator$MemberFunctionBuilder","methodName":"generateEqualsMethodBody","parameters":["List"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.ir.util.InlineClassesKt","methodName":"getInlineClassBackingField","parameters":["IrClass"],"returnType":"IrField"},22,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irIfThenElse","parameters":["IrBuilderWithScope","IrType","IrExpression","IrExpression","IrExpression","IrStatementOrigin"],"returnType":"Any"},55,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeCheckerContext","methodName":"areEqualTypeConstructors","parameters":["TypeConstructorMarker","TypeConstructorMarker"],"returnType":"Any"},20,{"pathToFun":"org.jetbrains.kotlin.types.AbstractTypeCheckerContext","methodName":"prepareType","parameters":["KotlinTypeMarker"],"returnType":"KotlinTypeMarker"},20,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LowerUtilsKt","methodName":"irNot","parameters":["IrBuilderWithScope","IrExpression"],"returnType":"Any"},24,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.ClassDescriptorImpl","methodName":"isData","parameters":[""],"returnType":"boolean"},7,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"visitSetVariable","parameters":["IrSetVariable","BlockInfo"],"returnType":"PromisedValue"},9,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"isAnyConstructor","parameters":["TypeConstructorMarker"],"returnType":"Boolean"},26,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irIs","parameters":["IrBuilderWithScope","IrExpression","IrType"],"returnType":"Any"},52,{"pathToFun":"org.jetbrains.kotlin.ir.util.DataClassMembersGenerator$MemberFunctionBuilder","methodName":"irOther","parameters":[""],"returnType":"IrExpression"},22,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitElseBranch","parameters":["IrElseBranch","Nothing"],"returnType":"Any"},56,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"getSubstitutedUnderlyingType","parameters":["KotlinTypeMarker"],"returnType":"KotlinTypeMarker"},26,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmInlineClassLowering","methodName":"addBindingsFor","parameters":["IrFunction","IrFunction"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.DataClassMembersGenerator$MyDataClassMethodGenerator","methodName":"generateHashCodeMethod","parameters":["FunctionDescriptor","List"],"returnType":"Any"},22,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitThrow","parameters":["IrThrow"],"returnType":"Any"},35,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.ClassDescriptorImpl","methodName":"getAnnotations","parameters":[""],"returnType":"Annotations"},26,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.ClosureAnnotator$ClosureBuilder","methodName":"isExternal","parameters":["IrTypeParameter"],"returnType":"Boolean"},15,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.StaticLambdaLowering","methodName":"visitTypeOperator","parameters":["IrTypeOperatorCall"],"returnType":"Unit"},26,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.BooleanConstant","methodName":"materializeAt","parameters":["Type","IrType"],"returnType":"Unit"},52,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.BooleanComparison","methodName":"jumpIfFalse","parameters":["Label"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.ir.util.DataClassMembersGenerator$MemberFunctionBuilder","methodName":"getHashCodeOfProperty","parameters":["PropertyDescriptor"],"returnType":"IrExpression"},22,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.SwitchGenerator","methodName":"areConstIntComparisons","parameters":["List"],"returnType":"Boolean"},30,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"typeOperator","parameters":["IrBuilderWithScope","IrType","IrExpression","IrTypeOperator","IrType"],"returnType":"Any"},52,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitThrow","parameters":["IrThrow","D"],"returnType":"Any"},35,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.TypeOperatorLowering","methodName":"transformVoid","parameters":["IrExpression"],"returnType":"Any"},64,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.PropertyGenerator","methodName":"generatePropertyForPrimaryConstructorParameter","parameters":["KtParameter","IrValueParameter"],"returnType":"IrDeclaration"},30,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irBoolean","parameters":["IrBuilderWithScope","Boolean"],"returnType":"Any"},55,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.TypeOperatorLowering","methodName":"lowerInstanceOf","parameters":["IrExpression","IrType"],"returnType":"Any"},52,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitThrow","parameters":["IrThrow","Nothing"],"returnType":"Any"},35,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.RedundantNullCheckMethodTransformer$TransformerPass","methodName":"transformTrivialNullJump","parameters":["JumpInsnNode","Boolean"],"returnType":"Unit"},37,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitStringConcatenation","parameters":["IrStringConcatenation","D"],"returnType":"Any"},46,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"isEqualTypeConstructors","parameters":["TypeConstructorMarker","TypeConstructorMarker"],"returnType":"Any"},20,{"pathToFun":"org.jetbrains.kotlin.backend.common.ir.IrUtilsKt","methodName":"passTypeArgumentsFrom","parameters":["IrFunctionAccessExpression","IrTypeParametersContainer","Int"],"returnType":"Unit"},33,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irReturn","parameters":["IrBuilderWithScope","IrExpression"],"returnType":"Any"},45,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.PromisedValueKt","methodName":"materializeAt","parameters":["PromisedValue","IrType"],"returnType":"Unit"},54,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"asFlexibleType","parameters":["KotlinTypeMarker"],"returnType":"Any"},20,{"pathToFun":"org.jetbrains.kotlin.ir.util.DataClassMembersGenerator","methodName":"getHashCodeFunction","parameters":["KotlinType","(FunctionDescriptor) -> IrSimpleFunctionSymbol"],"returnType":"IrSimpleFunctionSymbol"},22,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ArgumentsGenerationUtilsKt","methodName":"shouldGenerateReceiverAsSingletonReference","parameters":["StatementGenerator","ClassDescriptor"],"returnType":"Boolean"},14,{"pathToFun":"org.jetbrains.kotlin.backend.common.CheckIrElementVisitor","methodName":"visitStringConcatenation","parameters":["IrStringConcatenation"],"returnType":"Unit"},46,{"pathToFun":"org.jetbrains.kotlin.types.ClassTypeConstructorImpl","methodName":"isDenotable","parameters":[""],"returnType":"boolean"},7,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.DataClassMembersGenerator","methodName":"declareSimpleFunction","parameters":["Int","Int","IrDeclarationOrigin","FunctionDescriptor"],"returnType":"Any"},22,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorConventionsKt","methodName":"getIrTypeOperator","parameters":["IElementType"],"returnType":"IrTypeOperator"},18,{"pathToFun":"org.jetbrains.kotlin.ir.util.DataClassMembersGenerator$MemberFunctionBuilder","methodName":"build","parameters":["MemberFunctionBuilder.(IrFunction) -> Unit"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"isIntersection","parameters":["TypeConstructorMarker"],"returnType":"Any"},20,{"pathToFun":"org.jetbrains.kotlin.ir.util.DataClassMembersGenerator","methodName":"generateHashCodeMethod","parameters":["FunctionDescriptor","List"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.RedundantNullCheckMethodTransformer$TransformerPass$NullabilityAssumptionsBuilder","methodName":"injectAssumptionsForNullCheck","parameters":["NullabilityAssumptions","Int","JumpInsnNode"],"returnType":"Unit"},40,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"isStubType","parameters":["SimpleTypeMarker"],"returnType":"Any"},20,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitElseBranch","parameters":["IrElseBranch","Nothing"],"returnType":"IrElseBranch"},56,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"hasSameLineNumber","parameters":["IrElement","IrElement"],"returnType":"Boolean"},7,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.DataClassMembersGenerator$MyDataClassMethodGenerator","methodName":"commitSubstituted","parameters":["IrMemberAccessExpression","CallableDescriptor"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.backend.common.CheckIrElementVisitor","methodName":"visitThrow","parameters":["IrThrow"],"returnType":"Unit"},35,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.inlineclasses.InlineClassAbi","methodName":"eraseToString","parameters":["IrType"],"returnType":"Any"},25,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.Equals$BooleanNullCheck","methodName":"jumpIfFalse","parameters":["Label"],"returnType":"Any"},27,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrThrowImpl","methodName":"transformChildren","parameters":["IrElementTransformer","D"],"returnType":"Unit"},35,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.DataClassMembersGenerator$MyDataClassMethodGenerator","methodName":"declareSimpleFunction","parameters":["Int","Int","FunctionDescriptor"],"returnType":"IrFunction"},22,{"pathToFun":"org.jetbrains.kotlin.ir.util.DataClassMembersGenerator","methodName":"buildMember","parameters":["FunctionDescriptor","Int","Int","MemberFunctionBuilder.(IrFunction) -> Unit"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irConcat","parameters":["IrBuilderWithScope"],"returnType":"Any"},22,{"pathToFun":"org.jetbrains.kotlin.types.KotlinTypeKt","methodName":"isNullable","parameters":["KotlinType"],"returnType":"Boolean"},22,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.DataClassMembersGenerator","methodName":"commitSubstituted","parameters":["IrMemberAccessExpression","CallableDescriptor"],"returnType":"Any"},22,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.FunctionGenerator","methodName":"generateDefaultAccessorForPrimaryConstructorParameter","parameters":["PropertyAccessorDescriptor","KtParameter"],"returnType":"IrSimpleFunction"},30,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"isIntegerLiteralTypeConstructor","parameters":["TypeConstructorMarker"],"returnType":"Any"},20,{"pathToFun":"org.jetbrains.kotlin.ir.util.RenderIrElementKt","methodName":"render","parameters":["IrType"],"returnType":"Any"},23,{"pathToFun":"org.jetbrains.kotlin.ir.util.DataClassMembersGenerator$MemberFunctionBuilder","methodName":"irThis","parameters":[""],"returnType":"IrExpression"},22,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmInlineClassLowering","methodName":"buildPrimaryInlineClassConstructor","parameters":["IrClass","IrConstructor"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irReturnTrue","parameters":["IrBuilderWithScope"],"returnType":"Any"},22,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.inlineclasses.InlineClassAbi","methodName":"hashSuffix","parameters":["IrFunction"],"returnType":"Any"},16,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"isError","parameters":["KotlinTypeMarker"],"returnType":"Any"},20,{"pathToFun":"org.jetbrains.kotlin.ir.types.irTypePredicatesKt","methodName":"isNullableString","parameters":["IrType"],"returnType":"Boolean"},27,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"handleIntVariableSpecialCases","parameters":["IrSetVariable"],"returnType":"Boolean"},9,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeUtilsKt","methodName":"isSubtypeOf","parameters":["IrType","IrType","IrBuiltIns"],"returnType":"Boolean"},20,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.HashCode","methodName":"invoke","parameters":["IrFunctionAccessExpression","ExpressionCodegen","BlockInfo"],"returnType":"Any"},6,{"pathToFun":"org.jetbrains.kotlin.ir.util.DataClassMembersGenerator","methodName":"getBackingField","parameters":["PropertyDescriptor"],"returnType":"IrField"},22,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"isCommonFinalClassConstructor","parameters":["TypeConstructorMarker"],"returnType":"Boolean"},20,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorExpressionGenerator","methodName":"generateCastExpression","parameters":["KtBinaryExpressionWithTypeRHS"],"returnType":"IrExpression"},16,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irNull","parameters":["IrBuilderWithScope","IrType"],"returnType":"Any"},27,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSubstitutor","methodName":"substitute","parameters":["IrType"],"returnType":"IrType"},26,{"pathToFun":"org.jetbrains.kotlin.ir.util.DataClassMembersGenerator","methodName":"findHashCodeFunctionOrNull","parameters":["MemberScope"],"returnType":"Any"},22,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmInlineClassLowering","methodName":"transformSimpleFunctionFlat","parameters":["IrSimpleFunction","IrSimpleFunction"],"returnType":"List"},22,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitThrow","parameters":["IrThrow"],"returnType":"Any"},35,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmInlineClassLowering","methodName":"coerceInlineClasses","parameters":["IrExpression","IrType","IrType"],"returnType":"Any"},22,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"isInlineClass","parameters":["TypeConstructorMarker"],"returnType":"Boolean"},26,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitElseBranch","parameters":["IrElseBranch"],"returnType":"Any"},56,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable","methodName":"introduceValueParameter","parameters":["IrValueParameter"],"returnType":"Unit"},30,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitArrayAccessExpression","parameters":["KtArrayAccessExpression"],"returnType":"Unit"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver$Companion","methodName":"checkOverridesForMember","parameters":["CallableMemberDescriptor","Collection","CheckOverrideReportStrategy"],"returnType":"Unit"},20,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver$Companion","methodName":"checkOverridesForMemberMarkedOverride","parameters":["CallableMemberDescriptor","KotlinTypeRefiner","CheckOverrideReportForDeclaredMemberStrategy"],"returnType":"Unit"},20,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver","methodName":"checkNameAndDefaultForDeclaredParameter","parameters":["ValueParameterDescriptor","Boolean"],"returnType":"Unit"},13,{"pathToFun":"org.jetbrains.kotlin.codegen.BranchedValue","methodName":"patchOpcode","parameters":["Int","InstructionAdapter"],"returnType":"Int"},53,{"pathToFun":"org.jetbrains.kotlin.types.checker.TypeCheckingProcedure","methodName":"capture","parameters":["TypeProjection","TypeProjection","TypeParameterDescriptor"],"returnType":"boolean"},4,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseInnerExpressions","parameters":["String"],"returnType":"void"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker","methodName":"makeCallWithExpressions","parameters":["KtElement","Receiver","ASTNode","KtExpression","List","CallType"],"returnType":"Call"},7,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"getTypeInfo","parameters":["KtExpression","ExpressionTypingInternals","ExpressionTypingContext","boolean"],"returnType":"KotlinTypeInfo"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"genAreEqualCall","parameters":["InstructionAdapter","IElementType"],"returnType":"Unit"},44,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseArrayAccess","parameters":[""],"returnType":"void"},7,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitArrayAccessExpression","parameters":["KtArrayAccessExpression","D"],"returnType":"R"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.BoxingInterpreterKt","methodName":"areSameTypedPrimitiveBoxedValues","parameters":["List"],"returnType":"Boolean"},60,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker$Companion","methodName":"isImplementingMethodOfAny","parameters":["CallableMemberDescriptor"],"returnType":"Boolean"},11,{"pathToFun":"org.jetbrains.kotlin.psi.KtArrayAccessExpression","methodName":"getArrayExpression","parameters":[""],"returnType":"KtExpression"},7,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitArrayAccessExpression","parameters":["KtArrayAccessExpression"],"returnType":"void"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver$Companion","methodName":"isReturnTypeOkForOverride","parameters":["CallableDescriptor","CallableDescriptor"],"returnType":"Boolean"},21,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"computeAccumulatedInfoForArrayAccessExpression","parameters":["KotlinTypeInfo","List","KtExpression","boolean","ExpressionTypingContext","ExpressionTypingInternals"],"returnType":"KotlinTypeInfo"},7,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseAsCollectionLiteralExpression","parameters":["IElementType","boolean","String"],"returnType":"void"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"boxType","parameters":["Type","KotlinType","KotlinTypeMapper"],"returnType":"Type"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.OverridingUtil","methodName":"areTypeParametersEquivalent","parameters":["TypeParameterDescriptor","TypeParameterDescriptor","KotlinTypeChecker"],"returnType":"boolean"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtArrayAccessExpression","methodName":"getTrailingComma","parameters":[""],"returnType":"PsiElement"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.ReifiedTypeParameterSubstitutionChecker","methodName":"checkTypeArgument","parameters":["PsiElement","CallCheckerContext","KotlinType","ClassifierDescriptor","boolean"],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtArrayAccessExpression","methodName":"getIndicesNode","parameters":[""],"returnType":"KtContainerNode"},7,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"visitArrayAccessExpression","parameters":["KtArrayAccessExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},7,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"resolveArrayAccessGetMethod","parameters":["KtArrayAccessExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},7,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"generateArrayAccess","parameters":["KtArrayAccessExpression","ResolvedCall"],"returnType":"Unit"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver$Companion","methodName":"prepareTypeSubstitutor","parameters":["CallableDescriptor","CallableDescriptor"],"returnType":"TypeSubstitutor"},21,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"visitKtElement","parameters":["KtElement","KotlinType"],"returnType":"CompileTimeConstant"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"genLazy","parameters":["KtElement","Type"],"returnType":"StackValue"},12,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher","methodName":"visitArrayAccessExpression","parameters":["KtArrayAccessExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},7,{"pathToFun":"org.jetbrains.kotlin.psi.KtArrayAccessExpression","methodName":"getIndexExpressions","parameters":[""],"returnType":"List"},7,{"pathToFun":"org.jetbrains.kotlin.psi.KtContainerNode","methodName":"findChildByType","parameters":["IElementType"],"returnType":"T"},7,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"resolveArrayAccessSpecialMethod","parameters":["KtArrayAccessExpression","KtExpression","ExpressionTypingContext","BindingTrace","boolean","boolean"],"returnType":"KotlinTypeInfo"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$ArrayElement","methodName":"putSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"void"},7,{"pathToFun":"org.jetbrains.kotlin.psi.KtArrayAccessExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},7,{"pathToFun":"org.jetbrains.kotlin.psi.KtArrayAccessExpression","methodName":"getRightBracket","parameters":[""],"returnType":"PsiElement"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver$Companion","methodName":"checkPropertyKind","parameters":["CallableMemberDescriptor","Boolean"],"returnType":"Boolean"},20,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"genInvertBoolean","parameters":["InstructionAdapter"],"returnType":"void"},33,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"cannotBeReified","parameters":["KotlinType"],"returnType":"Boolean"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"genAreEqualCall","parameters":["InstructionAdapter"],"returnType":"void"},60,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"visitArrayAccessExpression","parameters":["KtArrayAccessExpression"],"returnType":"void"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitArrayAccessExpression","parameters":["KtArrayAccessExpression","StackValue"],"returnType":"StackValue"},7,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitArrayAccessExpression","parameters":["KtArrayAccessExpression","Void"],"returnType":"Void"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorEquivalenceForOverrides","methodName":"areTypeParametersEquivalent","parameters":["TypeParameterDescriptor","TypeParameterDescriptor","Boolean","(DeclarationDescriptor"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker","methodName":"makeArrayGetCall","parameters":["ReceiverValue","KtArrayAccessExpression","CallType"],"returnType":"Call"},7,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitArrayAccessExpression","parameters":["KtArrayAccessExpression","Nothing"],"returnType":"IrStatement"},7,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"lt","parameters":[""],"returnType":"Any"},6,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"gt","parameters":[""],"returnType":"Any"},6,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.ArrayGet","methodName":"invoke","parameters":["IrFunctionAccessExpression","ExpressionCodegen","BlockInfo"],"returnType":"PromisedValue"},8,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"appendTypeProjections","parameters":["StringBuilder","List"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.types.TypeIntersector\\$TypeUnifier","methodName":"mayBeEqual","parameters":["KotlinType","KotlinType"],"returnType":"boolean"},13,{"pathToFun":"org.jetbrains.kotlin.codegen.NumberLikeCompare","methodName":"patchOpcode","parameters":["Int","InstructionAdapter"],"returnType":"Int"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.PossiblyBareType","methodName":"makeNullable","parameters":[""],"returnType":"PossiblyBareType"},19,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitNullableType","parameters":["KtNullableType","D"],"returnType":"R"},19,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemBuilderImpl","methodName":"registerTypeVariables","parameters":["CallHandle","Collection","Boolean"],"returnType":"TypeSubstitutor"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemBuilderImpl","methodName":"doAddConstraint","parameters":["ConstraintKind","KotlinType","KotlinType","ConstraintContext","TypeCheckingProcedure"],"returnType":"Unit"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemImpl","methodName":"getParameterToInferredValueMap","parameters":["Map","(TypeVariable) -> KotlinType","Boolean"],"returnType":"Map"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"visitUnaryExpression","parameters":["KtUnaryExpression","KotlinType"],"returnType":"CompileTimeConstant"},9,{"pathToFun":"org.jetbrains.kotlin.types.DelegatedTypeSubstitution","methodName":"approximateContravariantCapturedTypes","parameters":[""],"returnType":"Any"},14,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitNullableType","parameters":["KtNullableType"],"returnType":"void"},19,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.NullabilityInterpreter","methodName":"mergeNotNullValuesOfSameKind","parameters":["StrictBasicValue","StrictBasicValue"],"returnType":"Any"},41,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.constraintPosition.ConstraintPositionKind","methodName":"position","parameters":[""],"returnType":"ConstraintPosition"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemImpl","methodName":"hasUnknownParameters","parameters":[""],"returnType":"Any"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemBuilderImpl","methodName":"simplifyType","parameters":["KotlinType","Boolean"],"returnType":"KotlinType"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemImpl","methodName":"hasConflictingConstraints","parameters":[""],"returnType":"Any"},13,{"pathToFun":"org.jetbrains.kotlin.codegen.BoxedToPrimitiveEquality$Companion","methodName":"create","parameters":["IElementType","StackValue","Type","StackValue","Type","FrameMap"],"returnType":"BranchedValue"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.NotNullBasicValue","methodName":"equals","parameters":["Any"],"returnType":"Boolean"},46,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemBuilderImpl","methodName":"addConstraint","parameters":["ConstraintKind","KotlinType","KotlinType","ConstraintContext"],"returnType":"Unit"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemBuilderImpl","methodName":"storeSubstitutor","parameters":["CallHandle","TypeSubstitutor"],"returnType":"TypeSubstitutor"},13,{"pathToFun":"org.jetbrains.kotlin.psi.KtNullableType","methodName":"getTypeArgumentsAsTypes","parameters":[""],"returnType":"List"},19,{"pathToFun":"org.jetbrains.kotlin.codegen.BoxedToPrimitiveEquality","methodName":"doJump","parameters":["InstructionAdapter","Label","Boolean","() -> Unit","() -> Unit"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.diagnostics.rendering.LanguageFeatureMessageRenderer","methodName":"render","parameters":["Pair","RenderingContext"],"returnType":"String"},14,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"dup","parameters":["InstructionAdapter","int"],"returnType":"void"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.Invert","methodName":"condJump","parameters":["Label","InstructionAdapter","Boolean"],"returnType":"Unit"},8,{"pathToFun":"org.jetbrains.kotlin.types.TypeIntersector\\$TypeUnifier","methodName":"processAllTypeParameters","parameters":["KotlinType","Variance","Function1","Function1"],"returnType":"void"},13,{"pathToFun":"org.jetbrains.kotlin.codegen.BoxedToPrimitiveEquality","methodName":"condJump","parameters":["Label","InstructionAdapter","Boolean"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemImpl","methodName":"hasContradiction","parameters":[""],"returnType":"Any"},13,{"pathToFun":"org.jetbrains.kotlin.psi.KtNullableType","methodName":"getModifierList","parameters":[""],"returnType":"KtModifierList"},19,{"pathToFun":"org.jetbrains.kotlin.resolve.PossiblyBareType","methodName":"isNullable","parameters":[""],"returnType":"boolean"},20,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemImpl","methodName":"getSubstitutor","parameters":["Boolean","(TypeVariable) -> KotlinType"],"returnType":"TypeSubstitutor"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemBuilderImpl","methodName":"isErrorOrSpecialType","parameters":["KotlinType","ConstraintPosition"],"returnType":"Boolean"},13,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitNullableType","parameters":["KtNullableType","Void"],"returnType":"Void"},19,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.RedundantNullCheckMethodTransformer$TransformerPass$NullabilityAssumptionsBuilder","methodName":"injectAssumptionsForNotNullAssertion","parameters":["NullabilityAssumptions","Int","AbstractInsnNode"],"returnType":"Unit"},29,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"genLazyUnlessProvided","parameters":["StackValue","KtExpression","Type"],"returnType":"StackValue"},4,{"pathToFun":"org.jetbrains.kotlin.contracts.EffectsExtractingVisitor","methodName":"visitUnaryExpression","parameters":["KtUnaryExpression","Unit"],"returnType":"Computation"},8,{"pathToFun":"org.jetbrains.kotlin.types.DelegatedTypeSubstitution","methodName":"prepareTopLevelType","parameters":["KotlinType","Variance"],"returnType":"Any"},14,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemImpl","methodName":"hasParameterConstraintError","parameters":[""],"returnType":"Any"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemImpl$SubstitutionWithCapturedTypeApproximation","methodName":"approximateCapturedTypes","parameters":[""],"returnType":"Any"},13,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"dup","parameters":["InstructionAdapter","Type"],"returnType":"void"},9,{"pathToFun":"org.jetbrains.kotlin.psi.KtNullableType","methodName":"getInnerType","parameters":[""],"returnType":"KtTypeElement"},19,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemBuilderImpl","methodName":"addSubtypeConstraint","parameters":["KotlinType","KotlinType","ConstraintPosition"],"returnType":"Unit"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemImpl","methodName":"hasCannotCaptureTypesError","parameters":[""],"returnType":"Any"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemBuilderImpl","methodName":"isMyTypeVariable","parameters":["KotlinType"],"returnType":"Boolean"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemImpl","methodName":"hasTypeParameterWithUnsatisfiedOnlyInputTypesError","parameters":[""],"returnType":"Any"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemImpl","methodName":"satisfyInitialConstraints","parameters":[""],"returnType":"Boolean"},13,{"pathToFun":"org.jetbrains.kotlin.types.TypeIntersector\\$TypeUnifier","methodName":"unify","parameters":["KotlinType","KotlinType"],"returnType":"boolean"},13,{"pathToFun":"org.jetbrains.kotlin.types.DelegatedTypeSubstitution","methodName":"isEmpty","parameters":[""],"returnType":"Any"},14,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemBuilderImpl","methodName":"getMyTypeVariable","parameters":["KotlinType"],"returnType":"TypeVariable"},13,{"pathToFun":"org.jetbrains.kotlin.psi.KtNullableType","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},19,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemBuilderImpl","methodName":"storeInitialConstraint","parameters":["ConstraintKind","KotlinType","KotlinType","ConstraintPosition"],"returnType":"Unit"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemImpl","methodName":"isSuccessful","parameters":[""],"returnType":"Any"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemBuilderImpl","methodName":"build","parameters":[""],"returnType":"ConstraintSystem"},13,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.PrimitiveToObjectComparison","methodName":"jumpIfTrue","parameters":["Label"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.inlineclasses.InlineClassAbi","methodName":"returnHashSuffix","parameters":["IrFunction"],"returnType":"Any"},17,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.inlineclasses.MemoizedInlineClassReplacements","methodName":"createMethodReplacement","parameters":["IrFunction"],"returnType":"IrSimpleFunction"},13,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.CallGeneratorKt","methodName":"hasNoSideEffects","parameters":["IrExpression"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"createAndRecordPrimaryConstructorForObject","parameters":["KtPureClassOrObject","ClassDescriptor","BindingTrace"],"returnType":"ClassConstructorDescriptorImpl"},11,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowInformationProvider","methodName":"checkForLocalClassOrObjectMode","parameters":[""],"returnType":"Unit"},8,{"pathToFun":"org.jetbrains.kotlin.cfg.WhenOnEnumExhaustivenessChecker","methodName":"isApplicable","parameters":["KotlinType"],"returnType":"Boolean"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionCodegen","methodName":"genDelegate","parameters":["FunctionDescriptor","FunctionDescriptor","JvmDeclarationOrigin","ClassDescriptor","StackValue","boolean"],"returnType":"void"},35,{"pathToFun":"org.jetbrains.kotlin.types.expressions.PatternMatchingTypingVisitor","methodName":"inferTypeForWhenExpression","parameters":["KtWhenExpression","Subject","ExpressionTypingContext","ExpressionTypingContext","List"],"returnType":"KotlinType"},3,{"pathToFun":"org.jetbrains.kotlin.frontend.di.injectionKt","methodName":"createContainerForLazyLocalClassifierAnalyzer","parameters":["ModuleContext","BindingTrace","TargetPlatform","LookupTracker","LanguageVersionSettings","StatementFilter","LocalClassDescriptorHolder","PlatformDependentAnalyzerServices"],"returnType":"StorageComponentContainer"},8,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowInformationProvider","methodName":"checkImplicitCastOnConditionalExpression","parameters":["KtExpression"],"returnType":"Unit"},8,{"pathToFun":"org.jetbrains.kotlin.psi.KtObjectDeclaration","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},11,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.LabelNormalizationMethodTransformer$TransformerForMethod","methodName":"rewriteLabels","parameters":["TableSwitchInsnNode"],"returnType":"AbstractInsnNode"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CallableReferenceResolutionKt","methodName":"extractInputOutputTypesFromCallableReferenceExpectedType","parameters":["UnwrappedType"],"returnType":"InputOutputTypes"},19,{"pathToFun":"org.jetbrains.kotlin.psi.KtObjectLiteralExpression","methodName":"getObjectDeclaration","parameters":[""],"returnType":"KtObjectDeclaration"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.MethodAnalyzer","methodName":"visitTableSwitchInsnNode","parameters":["TableSwitchInsnNode","Frame","Int"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CallableReferencesCandidateFactory","methodName":"buildReflectionType","parameters":["CallableDescriptor","CallableReceiver","CallableReceiver","UnwrappedType","KotlinBuiltIns"],"returnType":"Pair"},20,{"pathToFun":"org.jetbrains.kotlin.cfg.WhenOnSealedExhaustivenessChecker","methodName":"isApplicable","parameters":["KotlinType"],"returnType":"Boolean"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.data.KtObjectInfo","methodName":"getClassKind","parameters":[""],"returnType":"ClassKind"},11,{"pathToFun":"org.jetbrains.kotlin.codegen.when.SwitchCodegen","methodName":"putTransitionOnce","parameters":["Int","Label"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitWhenEntry","parameters":["KtWhenEntry","D"],"returnType":"R"},3,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseAnnotationsList","parameters":["AnnotationParsingMode","TokenSet"],"returnType":"boolean"},3,{"pathToFun":"org.jetbrains.kotlin.cfg.WhenChecker","methodName":"whenSubjectTypeWithoutSmartCasts","parameters":["KtWhenExpression","BindingContext"],"returnType":"KotlinType"},3,{"pathToFun":"org.jetbrains.kotlin.descriptors.typeParameterUtilsKt","methodName":"capturedCopyForInnerDeclaration","parameters":["TypeParameterDescriptor","DeclarationDescriptor","Int"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtWhenExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.ResolvedAtomCompleter","methodName":"completeCallableReference","parameters":["ResolvedCallableReferenceAtom"],"returnType":"Unit"},20,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher","methodName":"visitBlockExpression","parameters":["KtBlockExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},13,{"pathToFun":"org.jetbrains.kotlin.psi.KtWhenEntry","methodName":"getConditions","parameters":[""],"returnType":"KtWhenCondition[]"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.PostponeArgumentsChecksKt","methodName":"preprocessCallableReference","parameters":["ConstraintSystemBuilder","CallableReferenceKotlinCallArgument","UnwrappedType","KotlinDiagnosticsHolder"],"returnType":"ResolvedAtom"},20,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.ScopeTowerProcessorsKt","methodName":"createCallableReferenceProcessor","parameters":["ImplicitScopeTower","Name","CandidateFactory","DetailedReceiver"],"returnType":"SimpleScopeTowerProcessor"},20,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitObjectLiteralExpression","parameters":["KtObjectLiteralExpression","StackValue"],"returnType":"StackValue"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.SamType","methodName":"getKotlinFunctionType","parameters":[""],"returnType":"KotlinType"},35,{"pathToFun":"org.jetbrains.kotlin.types.expressions.PatternMatchingTypingVisitor","methodName":"visitWhenExpression","parameters":["KtWhenExpression","ExpressionTypingContext"],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitWhenExpression","parameters":["KtWhenExpression"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.when.SwitchCodegen","methodName":"generateEntries","parameters":[""],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.types.expressions.PatternMatchingTypingVisitor","methodName":"checkTypeForExpressionCondition","parameters":["ExpressionTypingContext","KtExpression","Subject"],"returnType":"ConditionalDataFlowInfo"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.when.SwitchCodegenProvider","methodName":"buildAppropriateSwitchCodegenIfPossible","parameters":["KtWhenExpression","Boolean","Boolean"],"returnType":"SwitchCodegen"},3,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseWhenEntry","parameters":[""],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenBinding","methodName":"asmTypeForAnonymousClassOrNull","parameters":["BindingContext","KtElement"],"returnType":"Type"},8,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"visitBlockExpression","parameters":["KtBlockExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},13,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingUtils","methodName":"createIndependentDataFlowInfoForArgumentsForCall","parameters":["DataFlowInfo","Map"],"returnType":"MutableDataFlowInfoForArguments"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl","methodName":"getProperSuperTypeConstructors","parameters":["KotlinTypeMarker"],"returnType":"List"},20,{"pathToFun":"org.jetbrains.kotlin.psi.KtWhenConditionWithExpression","methodName":"getExpression","parameters":[""],"returnType":"KtExpression"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtWhenEntry","methodName":"getTrailingComma","parameters":[""],"returnType":"PsiElement"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitWhenConditionWithExpression","parameters":["KtWhenConditionWithExpression","D"],"returnType":"R"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CallableReferencesCandidateFactory","methodName":"createCandidate","parameters":["CandidateWithBoundDispatchReceiver","ExplicitReceiverKind","ReceiverValueWithSmartCastInfo"],"returnType":"CallableReferenceCandidate"},20,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallableReferenceAtom","methodName":"setAnalyzedResults","parameters":["CallableReferenceCandidate","List"],"returnType":"Unit"},20,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"field","parameters":["Type","Type","String","boolean","StackValue"],"returnType":"Field"},36,{"pathToFun":"org.jetbrains.kotlin.psi.psiUtil.ReservedCheckingKt","methodName":"checkReservedPrefixWord","parameters":["DiagnosticSink","PsiElement","String","String"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.ArgumentTypeResolver","methodName":"getCallableReferenceExpressionIfAny","parameters":["KtExpression","ResolutionContext"],"returnType":"KtCallableReferenceExpression"},13,{"pathToFun":"org.jetbrains.kotlin.psi.KtWhenEntry","methodName":"isElse","parameters":[""],"returnType":"boolean"},3,{"pathToFun":"org.jetbrains.kotlin.cfg.WhenChecker","methodName":"checkReservedPrefix","parameters":["BindingTrace","KtWhenExpression"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.MaxStackFrameSizeAndLocalsCalculator","methodName":"visitTableSwitchInsn","parameters":["int","int","Label","Label..."],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.ResolvedAtomCompleter","methodName":"recordArgumentAdaptationForCallableReference","parameters":["ResolvedCallImpl","CallableReferenceAdaptation"],"returnType":"Unit"},20,{"pathToFun":"org.jetbrains.kotlin.codegen.SamWrapperCodegen","methodName":"generateConstructor","parameters":["Type","Type","ClassBuilder"],"returnType":"void"},35,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowInfoImpl","methodName":"intersectConsideringNothing","parameters":["ImmutableSet","ImmutableSet"],"returnType":"Any"},5,{"pathToFun":"org.jetbrains.kotlin.builtins.functionTypesKt","methodName":"extractParameterNameFromFunctionTypeArgument","parameters":["KotlinType"],"returnType":"Name"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.PostponeArgumentsChecksKt","methodName":"requireIs","parameters":["Any"],"returnType":"T"},20,{"pathToFun":"org.jetbrains.kotlin.types.expressions.PatternMatchingTypingVisitor","methodName":"joinWhenExpressionBranches","parameters":["KtWhenExpression","ExpressionTypingContext","KotlinType","Boolean","DataFlowValue"],"returnType":"KotlinTypeInfo"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CallableReferenceResolutionKt","methodName":"checkCallableReference","parameters":["ConstraintSystemOperation","CallableReferenceKotlinCallArgument","CallableReceiver","CallableReceiver","CallableDescriptor","UnwrappedType","UnwrappedType","DeclarationDescriptor"],"returnType":"Pair"},20,{"pathToFun":"org.jetbrains.kotlin.codegen.SamWrapperCodegen","methodName":"generateGetFunctionDelegate","parameters":["ClassBuilder","Type","Type"],"returnType":"void"},30,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"setStatusToSuccess","parameters":[""],"returnType":"void"},20,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitObjectDeclaration","parameters":["KtObjectDeclaration","Void"],"returnType":"Void"},11,{"pathToFun":"org.jetbrains.kotlin.codegen.ObjectSuperCallArgumentGenerator","methodName":"generate","parameters":["List","List","CallableDescriptor"],"returnType":"DefaultCallArgs"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.when.SwitchCodegen","methodName":"prepareConfiguration","parameters":[""],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.builtins.ReflectionTypes$Companion","methodName":"hasKCallableTypeFqName","parameters":["KotlinType"],"returnType":"Boolean"},19,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.PSICallResolver","methodName":"createCallableReferenceKotlinCallArgument","parameters":["BasicCallResolutionContext","KtCallableReferenceExpression","DataFlowInfo","ValueArgument","Name","BasicCallResolutionContext"],"returnType":"CallableReferenceKotlinCallArgumentImpl"},20,{"pathToFun":"org.jetbrains.kotlin.builtins.ReflectionTypes$Companion","methodName":"isPossibleExpectedCallableType","parameters":["TypeConstructor"],"returnType":"Boolean"},20,{"pathToFun":"org.jetbrains.kotlin.types.expressions.PatternMatchingTypingVisitor","methodName":"analyzeConditionsInWhenEntries","parameters":["KtWhenExpression","ExpressionTypingContext","Subject"],"returnType":"ArrayList"},3,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.FunctionDescriptorImpl\\$CopyConfiguration","methodName":"setHasSynthesizedParameterNames","parameters":["boolean"],"returnType":"CopyConfiguration"},15,{"pathToFun":"org.jetbrains.kotlin.builtins.ReflectionTypes$Companion","methodName":"hasKMutablePropertyTypeFqName","parameters":["KotlinType"],"returnType":"Boolean"},19,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"visitObjectLiteralExpression","parameters":["KtObjectLiteralExpression"],"returnType":"void"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitWhenExpression","parameters":["KtWhenExpression","StackValue"],"returnType":"StackValue"},3,{"pathToFun":"org.jetbrains.kotlin.descriptors.CapturedTypeParameterDescriptor","methodName":"isCapturedFromOuterDeclaration","parameters":[""],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.SamWrapperCodegen","methodName":"generateHashCode","parameters":["ClassBuilder","Type","Type"],"returnType":"void"},30,{"pathToFun":"org.jetbrains.kotlin.types.expressions.LocalClassifierAnalyzer","methodName":"processClassOrObject","parameters":["LexicalWritableScope","ExpressionTypingContext","DeclarationDescriptor","KtClassOrObject"],"returnType":"Unit"},8,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CallableReferencesCandidateFactory","methodName":"createCallableProcessor","parameters":["DetailedReceiver"],"returnType":"Any"},20,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CallableReferenceResolutionKt","methodName":"createCallableReferenceProcessor","parameters":["CallableReferencesCandidateFactory"],"returnType":"ScopeTowerProcessor"},20,{"pathToFun":"org.jetbrains.kotlin.codegen.SamWrapperClasses","methodName":"getSamWrapperClass","parameters":["SamType","KtFile","ExpressionCodegen","CallableMemberDescriptor"],"returnType":"Type"},35,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingUtils","methodName":"createDataFlowInfoForArgumentsOfWhenCall","parameters":["Call","DataFlowInfo","List"],"returnType":"MutableDataFlowInfoForArguments"},3,{"pathToFun":"org.jetbrains.kotlin.types.AbstractTypeCheckerContext","methodName":"getLowerCapturedTypePolicy","parameters":["SimpleTypeMarker","CapturedTypeMarker"],"returnType":"LowerCapturedTypePolicy"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.callUtil.callUtilKt","methodName":"createLookupLocation","parameters":["KtExpression"],"returnType":"KotlinLookupLocation"},20,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseWhen","parameters":[""],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.types.expressions.PatternMatchingTypingVisitor","methodName":"analyzeWhenEntryConditions","parameters":["KtWhenEntry","ExpressionTypingContext","Subject"],"returnType":"ConditionalDataFlowInfo"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionCodegen","methodName":"genSamDelegate","parameters":["FunctionDescriptor","FunctionDescriptor","StackValue"],"returnType":"void"},35,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitWhenExpression","parameters":["KtWhenExpression"],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowInfoImpl","methodName":"containsNothing","parameters":["ImmutableSet"],"returnType":"Any"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CallableReferenceResolver","methodName":"buildResolvedKtArgument","parameters":["LHSResult"],"returnType":"ResolvedAtom"},20,{"pathToFun":"org.jetbrains.kotlin.codegen.when.SwitchCodegen","methodName":"generateSwitchInstructionByTransitionsTable","parameters":[""],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"field","parameters":["Type","KotlinType","Type","String","boolean","StackValue"],"returnType":"Field"},40,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.ResolvedAtomCompleter","methodName":"isCallableReferenceWithImplicitConversion","parameters":["ResolvedCall","CallableReferenceAdaptation"],"returnType":"Boolean"},19,{"pathToFun":"org.jetbrains.kotlin.codegen.when.SwitchCodegen","methodName":"generate","parameters":[""],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitObjectLiteralExpression","parameters":["KtObjectLiteralExpression","Void"],"returnType":"Void"},8,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitObjectLiteralExpression","parameters":["KtObjectLiteralExpression"],"returnType":"Unit"},8,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.KotlinResolutionStatelessCallbacksImpl","methodName":"isHiddenInResolution","parameters":["DeclarationDescriptor","KotlinCallArgument","KotlinResolutionCallbacks"],"returnType":"Boolean"},20,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher","methodName":"visitObjectLiteralExpression","parameters":["KtObjectLiteralExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},8,{"pathToFun":"org.jetbrains.kotlin.cfg.WhenChecker","methodName":"getMissingCases","parameters":["KtWhenExpression","BindingContext"],"returnType":"List"},3,{"pathToFun":"org.jetbrains.kotlin.builtins.ReflectionTypes$Companion","methodName":"hasKPropertyTypeFqName","parameters":["KotlinType"],"returnType":"Boolean"},19,{"pathToFun":"org.jetbrains.kotlin.contracts.EffectSystem","methodName":"getDataFlowInfoWhenEquals","parameters":["KtExpression","KtExpression","BindingTrace","ModuleDescriptor"],"returnType":"ConditionalDataFlowInfo"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CallableReferencesCandidateFactory","methodName":"getCallableReferenceAdaptation","parameters":["FunctionDescriptor","UnwrappedType","Int","KotlinBuiltIns"],"returnType":"CallableReferenceAdaptation"},19,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowInformationProvider$Companion","methodName":"collectResultingExpressionsOfConditionalExpressionRec","parameters":["KtExpression","MutableList"],"returnType":"Unit"},8,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitWhenEntry","parameters":["KtWhenEntry"],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.SamWrapperClasses","methodName":"isInsideInlineLambdaContext","parameters":["CodegenContext","GenerationState"],"returnType":"Boolean"},34,{"pathToFun":"org.jetbrains.kotlin.contracts.ESDataFlowValue","methodName":"dataFlowEquals","parameters":["Any"],"returnType":"Boolean"},15,{"pathToFun":"org.jetbrains.kotlin.psi.KtObjectDeclaration","methodName":"isCompanion","parameters":[""],"returnType":"Boolean"},11,{"pathToFun":"org.jetbrains.kotlin.codegen.when.SwitchCodegenProvider","methodName":"getAllConstants","parameters":["KtWhenExpression"],"returnType":"Iterable"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtObjectDeclaration","methodName":"getName","parameters":[""],"returnType":"String"},11,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CallableReferenceResolutionKt","methodName":"extractInputOutputTypesFromFunctionType","parameters":["UnwrappedType"],"returnType":"InputOutputTypes"},19,{"pathToFun":"org.jetbrains.kotlin.codegen.ObjectSuperCallArgumentGenerator","methodName":"reorderArgumentsIfNeeded","parameters":["List"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.builtins.ReflectionTypes$Companion","methodName":"isBaseTypeForNumberedReferenceTypes","parameters":["KotlinType"],"returnType":"Boolean"},19,{"pathToFun":"org.jetbrains.kotlin.types.expressions.LocalClassDescriptorHolder","methodName":"getClassDescriptor","parameters":["KtClassOrObject","DeclarationScopeProvider"],"returnType":"ClassDescriptor"},8,{"pathToFun":"org.jetbrains.kotlin.psi.KtWhenEntry","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},3,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowInformationProvider$Companion","methodName":"collectResultingExpressionsOfConditionalExpression","parameters":["KtExpression"],"returnType":"List"},8,{"pathToFun":"org.jetbrains.kotlin.parsing.AbstractKotlinParsing","methodName":"advanceAt","parameters":["IElementType"],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.when.SwitchCodegenProvider","methodName":"addConstantsFromConditions","parameters":["ArrayList","KtWhenEntry"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiFactory","methodName":"wrapInABlockWrapper","parameters":["KtExpression"],"returnType":"KtBlockExpression"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CallableReferenceResolutionKt","methodName":"addReceiverConstraint","parameters":["ConstraintSystemOperation","FreshVariableNewTypeSubstitutor","CallableReceiver","ReceiverParameterDescriptor","ArgumentConstraintPosition"],"returnType":"Unit"},20,{"pathToFun":"org.jetbrains.kotlin.types.expressions.LocalClassDescriptorHolder","methodName":"isMyClass","parameters":["PsiElement"],"returnType":"Boolean"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenBinding","methodName":"asmTypeForAnonymousClass","parameters":["BindingContext","KtElement"],"returnType":"Type"},8,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher","methodName":"visitWhenExpression","parameters":["KtWhenExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},3,{"pathToFun":"org.jetbrains.kotlin.descriptors.EffectiveVisibility$Local","methodName":"relation","parameters":["EffectiveVisibility"],"returnType":"Any"},9,{"pathToFun":"org.jetbrains.kotlin.types.expressions.PatternMatchingTypingVisitor","methodName":"wrapWhenEntryExpressionsAsSpecialCallArguments","parameters":["KtWhenExpression"],"returnType":"List"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiFactory","methodName":"createFunction","parameters":["String"],"returnType":"KtNamedFunction"},8,{"pathToFun":"org.jetbrains.kotlin.contracts.ESVariableWithDataFlowValue","methodName":"equals","parameters":["Any"],"returnType":"Boolean"},15,{"pathToFun":"org.jetbrains.kotlin.codegen.when.SwitchCodegenProvider","methodName":"isIntegralConstantsSwitch","parameters":["KtWhenExpression","Type"],"returnType":"Boolean"},3,{"pathToFun":"org.jetbrains.kotlin.cfg.WhenChecker","methodName":"checkDeprecatedWhenSyntax","parameters":["BindingTrace","KtWhenExpression"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingServices","methodName":"getStatementFilter","parameters":[""],"returnType":"StatementFilter"},20,{"pathToFun":"org.jetbrains.kotlin.util.javaslang.javaslangAdaptersKt","methodName":"getOrNull","parameters":["Option"],"returnType":"T"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"isWhenWithEnums","parameters":["KtWhenExpression"],"returnType":"boolean"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.ConditionalDataFlowInfo","methodName":"and","parameters":["ConditionalDataFlowInfo"],"returnType":"ConditionalDataFlowInfo"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtWhenConditionWithExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},3,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"getSubjectExpression","parameters":["KtWhenCondition"],"returnType":"KtExpression"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.when.IntegralConstantsSwitchCodegen","methodName":"generateSubjectValueToIndex","parameters":[""],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.KotlinResolutionStatelessCallbacksImpl","methodName":"getScopeTowerForCallableReferenceArgument","parameters":["CallableReferenceKotlinCallArgument"],"returnType":"ImplicitScopeTower"},20,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitWhenEntry","parameters":["KtWhenEntry","Void"],"returnType":"Void"},3,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"createAnonymousObject","parameters":["KtObjectLiteralExpression"],"returnType":"Any"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.SamWrapperCodegen","methodName":"genWrapper","parameters":["KtFile","CallableMemberDescriptor"],"returnType":"Type"},35,{"pathToFun":"org.jetbrains.kotlin.codegen.when.SwitchCodegenProvider","methodName":"checkAllItemsAreConstantsSatisfying","parameters":["KtWhenExpression","Function1"],"returnType":"Boolean"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getDefaultFunctionTypeForSamInterface","parameters":[""],"returnType":"SimpleType"},30,{"pathToFun":"org.jetbrains.kotlin.codegen.SamWrapperCodegen","methodName":"generateEquals","parameters":["ClassBuilder","Type","Type","Type"],"returnType":"void"},30,{"pathToFun":"org.jetbrains.kotlin.cfg.WhenChecker","methodName":"getClassIdForTypeIfEnum","parameters":["KotlinType"],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.LabelNormalizationMethodTransformer$TransformerForMethod","methodName":"rewriteTableSwitchInsn","parameters":["TableSwitchInsnNode"],"returnType":"AbstractInsnNode"},4,{"pathToFun":"org.jetbrains.kotlin.cfg.WhenChecker","methodName":"checkDuplicatedLabels","parameters":["KtWhenExpression","BindingTrace"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateObjectLiteral","parameters":["KtObjectLiteralExpression"],"returnType":"ObjectLiteralResult"},8,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitObjectDeclaration","parameters":["KtObjectDeclaration"],"returnType":"void"},11,{"pathToFun":"org.jetbrains.kotlin.psi.KtObjectDeclaration","methodName":"getTextOffset","parameters":[""],"returnType":"Int"},11,{"pathToFun":"org.jetbrains.kotlin.types.expressions.PatternMatchingTypingVisitor$Subject","methodName":"getCalleeExpressionForSpecialCall","parameters":[""],"returnType":"KtExpression"},3,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitWhenConditionWithExpression","parameters":["KtWhenConditionWithExpression"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"setResultingSubstitutor","parameters":["TypeSubstitutor"],"returnType":"void"},20,{"pathToFun":"org.jetbrains.kotlin.builtins.functions.FunctionInvokeDescriptor","methodName":"replaceParameterNames","parameters":["List"],"returnType":"FunctionDescriptor"},15,{"pathToFun":"org.jetbrains.kotlin.codegen.SamWrapperCodegen","methodName":"getWrapperName","parameters":["KtFile","CallableMemberDescriptor"],"returnType":"FqName"},35,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.MaxStackFrameSizeAndLocalsCalculator","methodName":"visitSwitchInsn","parameters":["Label","Label[]"],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.cfg.WhenChecker","methodName":"getClassIdForEnumSubject","parameters":["KtWhenExpression","BindingContext"],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"createAnonymousObject","parameters":["KtObjectLiteralExpression"],"returnType":"InstructionWithValue"},8,{"pathToFun":"org.jetbrains.kotlin.cfg.WhenOnBooleanExhaustivenessChecker","methodName":"isApplicable","parameters":["KotlinType"],"returnType":"Boolean"},3,{"pathToFun":"org.jetbrains.kotlin.types.expressions.PatternMatchingTypingVisitor$Subject","methodName":"initDataFlowValue","parameters":["ExpressionTypingContext","KotlinBuiltIns"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.types.expressions.PatternMatchingTypingVisitor","methodName":"noChange","parameters":["ExpressionTypingContext"],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiFactory$BlockWrapper","methodName":"getBaseExpression","parameters":[""],"returnType":"KtExpression"},8,{"pathToFun":"org.jetbrains.kotlin.cfg.WhenChecker","methodName":"isWhenExhaustive","parameters":["KtWhenExpression","BindingTrace"],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtWhenEntry","methodName":"getExpression","parameters":[""],"returnType":"KtExpression"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.SamePriorityCompositeScopeTowerProcessor","methodName":"recordLookups","parameters":["Collection","Name"],"returnType":"Unit"},20,{"pathToFun":"org.jetbrains.kotlin.context.contextKt","methodName":"withModule","parameters":["ProjectContext","ModuleDescriptor"],"returnType":"ModuleContext"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"addReifiedParametersFromSignature","parameters":["MemberCodegen","ClassDescriptor"],"returnType":"void"},8,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiFactoryKt","methodName":"KtPsiFactory","parameters":["PsiElement","Boolean"],"returnType":"KtPsiFactory"},12,{"pathToFun":"org.jetbrains.kotlin.psi.KtWhenEntry","methodName":"getArrow","parameters":[""],"returnType":"PsiElement"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtObjectDeclaration","methodName":"isObjectLiteral","parameters":[""],"returnType":"Boolean"},11,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseWhenCondition","parameters":[""],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"visitObjectLiteralExpression","parameters":["KtObjectLiteralExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},8,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.ClassDescriptorImpl","methodName":"getCompanionObjectDescriptor","parameters":[""],"returnType":"ClassDescriptor"},35,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorFactory","methodName":"createPrimaryConstructorForObject","parameters":["ClassDescriptor","SourceElement"],"returnType":"ClassConstructorDescriptorImpl"},11,{"pathToFun":"org.jetbrains.kotlin.types.expressions.PatternMatchingTypingVisitor$Subject$Expression","methodName":"createDataFlowValue","parameters":["ExpressionTypingContext","KotlinBuiltIns"],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"intoAnonymousClass","parameters":["ClassDescriptor","ExpressionCodegen","OwnerKind"],"returnType":"ClassContext"},9,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseWhenEntryNotElse","parameters":[""],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitWhenConditionWithExpression","parameters":["KtWhenConditionWithExpression","Void"],"returnType":"Void"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiFactory$BlockWrapper","methodName":"getStatements","parameters":[""],"returnType":"List"},8,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitWhenExpression","parameters":["KtWhenExpression","Void"],"returnType":"Void"},3,{"pathToFun":"org.jetbrains.kotlin.types.expressions.PatternMatchingTypingVisitor","methodName":"checkSmartCastsInSubjectIfRequired","parameters":["KtWhenExpression","ExpressionTypingContext","KotlinType","Set"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.when.SwitchCodegen","methodName":"generateSubjectValue","parameters":[""],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionCodegen","methodName":"endVisit","parameters":["MethodVisitor","String"],"returnType":"void"},35,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowInfoImpl","methodName":"approximateDefinitelyNotNullableTypes","parameters":["ImmutableSet"],"returnType":"ImmutableSet"},5,{"pathToFun":"org.jetbrains.kotlin.cfg.WhenChecker","methodName":"getClassDescriptorOfTypeIfEnum","parameters":["KotlinType"],"returnType":"ClassDescriptor"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtWhenExpression","methodName":"getSubjectVariable","parameters":[""],"returnType":"KtProperty"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtWhenExpression","methodName":"getWhenKeyword","parameters":[""],"returnType":"PsiElement"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.RedundantNullCheckMethodTransformer$TransformerPass","methodName":"transformInstanceOf","parameters":["TypeInsnNode","Nullability","StrictBasicValue"],"returnType":"Unit"},30,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.data.KtObjectInfo","methodName":"getTypeParameterList","parameters":[""],"returnType":"KtTypeParameterList"},11,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CallableReferenceResolver","methodName":"runRHSResolution","parameters":["ImplicitScopeTower","CallableReferenceKotlinCallArgument","UnwrappedType","ConstraintSystemBuilder","KotlinResolutionCallbacks","((ConstraintSystemOperation) -> Unit) -> Unit"],"returnType":"Set"},20,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiUtil","methodName":"getExpressionOrLastStatementInBlock","parameters":["KtExpression"],"returnType":"KtExpression"},8,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowInformationProvider$Companion","methodName":"getResultingExpression","parameters":["KtExpression"],"returnType":"KtExpression"},8,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.ResolvedAtomCompleter","methodName":"toOldSubstitution","parameters":["NewTypeSubstitutor"],"returnType":"TypeSubstitution"},20,{"pathToFun":"org.jetbrains.kotlin.psi.KtWhenEntry","methodName":"getElseKeyword","parameters":[""],"returnType":"PsiElement"},3,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DeclarationScopeProviderForLocalClassifierAnalyzer","methodName":"getResolutionScopeForDeclaration","parameters":["PsiElement"],"returnType":"LexicalScope"},8,{"pathToFun":"org.jetbrains.kotlin.builtins.ReflectionTypes$Companion","methodName":"hasFqName","parameters":["ClassDescriptor","FqNameUnsafe"],"returnType":"Boolean"},20,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CallableReferencesCandidateFactory","methodName":"hasNonTrivialAdaptation","parameters":["CallableReferenceAdaptation"],"returnType":"Any"},19,{"pathToFun":"org.jetbrains.kotlin.types.CastDiagnosticsUtil","methodName":"isExactTypeCast","parameters":["KotlinType","KotlinType"],"returnType":"Boolean"},10,{"pathToFun":"org.jetbrains.kotlin.psi.KtWhenExpression","methodName":"getElseExpression","parameters":[""],"returnType":"KtExpression"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"visitWhenExpression","parameters":["KtWhenExpression"],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CallableReferencesCandidateFactory","methodName":"needCompatibilityResolveForCallableReference","parameters":["CallableReferenceAdaptation","CallableDescriptor"],"returnType":"Boolean"},20,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitWhenConditionWithExpression","parameters":["KtWhenConditionWithExpression"],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.IntegerValueTypeConstant","methodName":"hashCode","parameters":[""],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.when.SwitchCodegenProvider","methodName":"getConstantsFromEntry","parameters":["KtWhenEntry"],"returnType":"Iterable"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkObject","parameters":["KtObjectDeclaration","ClassDescriptorWithResolutionScopes"],"returnType":"Unit"},11,{"pathToFun":"org.jetbrains.kotlin.cfg.WhenChecker","methodName":"whenSubjectType","parameters":["KtWhenExpression","BindingContext"],"returnType":"KotlinType"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitObjectDeclaration","parameters":["KtObjectDeclaration","D"],"returnType":"R"},11,{"pathToFun":"org.jetbrains.kotlin.context.contextKt","methodName":"withProject","parameters":["GlobalContext","Project"],"returnType":"ProjectContext"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.serialization.JvmCodegenStringTable","methodName":"getLocalClassIdReplacement","parameters":["ClassifierDescriptorWithTypeParameters"],"returnType":"ClassId"},8,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.ResolveSession","methodName":"getSamConversionResolver","parameters":[""],"returnType":"SamConversionResolver"},30,{"pathToFun":"org.jetbrains.kotlin.codegen.SamWrapperCodegen","methodName":"generateMethod","parameters":["Type","Type","SimpleFunctionDescriptor","KotlinType","FunctionCodegen"],"returnType":"void"},35,{"pathToFun":"org.jetbrains.kotlin.psi.KtObjectLiteralExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},8,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingUtils\\$ControlStructureDataFlowInfo","methodName":"updateInfo","parameters":["ValueArgument","DataFlowInfo"],"returnType":"void"},13,{"pathToFun":"org.jetbrains.kotlin.codegen.SamType","methodName":"hashCode","parameters":[""],"returnType":"int"},35,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitObjectLiteralExpression","parameters":["KtObjectLiteralExpression"],"returnType":"void"},8,{"pathToFun":"org.jetbrains.kotlin.psi.KtObjectDeclaration","methodName":"getObjectKeyword","parameters":[""],"returnType":"PsiElement"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.ClassBuilderFactories\\$BinaryClassWriter","methodName":"getCommonSuperClass","parameters":["String","String"],"returnType":"String"},26,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingUtils\\$ControlStructureDataFlowInfo","methodName":"getInfo","parameters":["ValueArgument"],"returnType":"DataFlowInfo"},13,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.SamePriorityCompositeScopeTowerProcessor","methodName":"simpleProcess","parameters":["TowerData"],"returnType":"Collection"},20,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CallableReferencesCandidateFactory","methodName":"createFakeArgumentsForReference","parameters":["FunctionDescriptor","Int","InputOutputTypes","Int"],"returnType":"List"},19,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitWhenExpression","parameters":["KtWhenExpression","D"],"returnType":"R"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateWhenExpression","parameters":["KtWhenExpression","boolean"],"returnType":"StackValue"},3,{"pathToFun":"org.jetbrains.kotlin.psi.psiUtil.psiUtilsKt","methodName":"getStrictParentOfType","parameters":["PsiElement"],"returnType":"T"},4,{"pathToFun":"org.jetbrains.kotlin.types.expressions.LocalLazyDeclarationResolver","methodName":"getClassDescriptor","parameters":["KtClassOrObject","LookupLocation"],"returnType":"ClassDescriptor"},8,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitObjectDeclaration","parameters":["KtObjectDeclaration"],"returnType":"Unit"},11,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseObjectLiteral","parameters":[""],"returnType":"void"},8,{"pathToFun":"org.jetbrains.kotlin.types.expressions.LocalClassDescriptorHolder","methodName":"getResolutionScopeForClass","parameters":["KtClassOrObject"],"returnType":"LexicalScope"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.when.SwitchCodegenProvider","methodName":"isThereConstantEntriesButNulls","parameters":["KtWhenExpression"],"returnType":"Boolean"},3,{"pathToFun":"org.jetbrains.kotlin.types.expressions.PatternMatchingTypingVisitor","methodName":"visitWhenExpression","parameters":["KtWhenExpression","ExpressionTypingContext","Boolean"],"returnType":"KotlinTypeInfo"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.when.IntegralConstantsSwitchCodegen","methodName":"processConstant","parameters":["ConstantValue","Label","KtWhenEntry"],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.when.SwitchCodegen$Companion","methodName":"preferLookupOverSwitch","parameters":["Int","Long"],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractTypeParameterDescriptor\\$TypeParameterTypeConstructor","methodName":"getBuiltIns","parameters":[""],"returnType":"KotlinBuiltIns"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.AbstractTypeCheckerContextForConstraintSystem","methodName":"getLowerCapturedTypePolicy","parameters":["SimpleTypeMarker","CapturedTypeMarker"],"returnType":"LowerCapturedTypePolicy"},10,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowInfoImpl","methodName":"intersect","parameters":["ImmutableSet","ImmutableSet"],"returnType":"ImmutableSet"},5,{"pathToFun":"org.jetbrains.kotlin.psi.KtWhenExpression","methodName":"getEntries","parameters":[""],"returnType":"List"},3,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseObject","parameters":["NameParsingMode","boolean"],"returnType":"void"},11,{"pathToFun":"org.jetbrains.kotlin.psi.KtWhenExpression","methodName":"getSubjectExpression","parameters":[""],"returnType":"KtExpression"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CallableReferenceResolver","methodName":"processCallableReferenceArgument","parameters":["ConstraintSystemBuilder","ResolvedCallableReferenceAtom","KotlinDiagnosticsHolder","KotlinResolutionCallbacks"],"returnType":"Unit"},20,{"pathToFun":"org.jetbrains.kotlin.builtins.ReflectionTypes$Companion","methodName":"hasFqName","parameters":["TypeConstructor","FqNameUnsafe"],"returnType":"Boolean"},19,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitObjectLiteralExpression","parameters":["KtObjectLiteralExpression","D"],"returnType":"R"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenBinding","methodName":"getAsmType","parameters":["BindingContext","ClassDescriptor"],"returnType":"Type"},8,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiFactory$BlockWrapper","methodName":"getParent","parameters":[""],"returnType":"PsiElement"},8,{"pathToFun":"org.jetbrains.kotlin.types.expressions.PatternMatchingTypingVisitor","methodName":"checkTypeCompatibility","parameters":["ExpressionTypingContext","KotlinType","KotlinType","KtElement"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.types.expressions.PatternMatchingTypingVisitor","methodName":"checkWhenCondition","parameters":["Subject","KtWhenCondition","ExpressionTypingContext"],"returnType":"ConditionalDataFlowInfo"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.data.KtObjectInfo","methodName":"isCompanionObject","parameters":[""],"returnType":"boolean"},11,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"visitContainerExpression","parameters":["IrContainerExpression"],"returnType":"IrExpression"},22,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.BranchingExpressionGenerator","methodName":"generateWhenBody","parameters":["KtWhenExpression","IrVariable","IrWhen"],"returnType":"IrExpression"},3,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.BranchingExpressionGenerator","methodName":"generateEqualsCondition","parameters":["IrVariable","KtWhenConditionWithExpression"],"returnType":"IrExpression"},3,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitObjectLiteralExpression","parameters":["KtObjectLiteralExpression","Nothing"],"returnType":"IrStatement"},8,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FunctionReferenceLowering$FunctionReferenceBuilder","methodName":"generateSamEqualsHashCodeMethods","parameters":["JvmIrBuilder","IrVariable"],"returnType":"Unit"},15,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.IntegerZeroComparison","methodName":"jumpIfFalse","parameters":["Label"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.SamEqualsHashCodeMethodsGenerator","methodName":"generateEquals","parameters":[""],"returnType":"Unit"},30,{"pathToFun":"org.jetbrains.kotlin.ir.util.IrUtilsKt","methodName":"irCall","parameters":["IrFunctionAccessExpression","IrFunction","Boolean","Boolean","IrClassSymbol"],"returnType":"IrCall"},32,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.SamEqualsHashCodeMethodsGenerator","methodName":"generateGetFunctionDelegate","parameters":[""],"returnType":"Unit"},30,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl$Companion","methodName":"boolean","parameters":["Int","Int","IrType","Boolean"],"returnType":"IrConstImpl"},16,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.SamEqualsHashCodeMethodsGenerator","methodName":"generate","parameters":[""],"returnType":"Unit"},30,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitWhenExpression","parameters":["KtWhenExpression","Nothing"],"returnType":"IrStatement"},3,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.BranchingExpressionGenerator","methodName":"elseBranch","parameters":["IrExpression"],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.psi2ir.intermediate.IrUtilsKt","methodName":"defaultLoad","parameters":["IrVariable"],"returnType":"IrExpression"},3,{"pathToFun":"org.jetbrains.kotlin.ir.types.irTypesKt","methodName":"typeWith","parameters":["IrClass","IrType"],"returnType":"Any"},30,{"pathToFun":"org.jetbrains.kotlin.ir.util.IrUtilsKt","methodName":"irCall","parameters":["IrFunctionAccessExpression","IrFunctionSymbol","Boolean","Boolean","IrClassSymbol"],"returnType":"IrCall"},32,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorExpressionGenerator","methodName":"generateEquality","parameters":["Int","Int","IrStatementOrigin","IrExpression","IrExpression","PrimitiveNumericComparisonInfo"],"returnType":"IrExpression"},3,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irCallConstructor","parameters":["IrBuilderWithScope","IrConstructorSymbol","List"],"returnType":"IrConstructorCall"},15,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.BranchingExpressionGenerator","methodName":"generateWhenSubject","parameters":["KtWhenExpression"],"returnType":"IrVariable"},3,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.SwitchGenerator$Switch","methodName":"genOptimizedIfEnoughCases","parameters":[""],"returnType":"PromisedValue"},5,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.BranchingExpressionGenerator","methodName":"generateWhenConditionWithSubject","parameters":["KtWhenCondition","IrVariable"],"returnType":"IrExpression"},3,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.BranchingExpressionGenerator","methodName":"generateWhenExpression","parameters":["KtWhenExpression"],"returnType":"IrExpression"},3,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.SamEqualsHashCodeMethodsGenerator","methodName":"generateHashCode","parameters":[""],"returnType":"Unit"},30,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.SwitchGenerator$IntSwitch","methodName":"shouldOptimize","parameters":[""],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.LocalClassGenerator","methodName":"generateObjectLiteral","parameters":["KtObjectLiteralExpression"],"returnType":"IrStatement"},8,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.BranchingExpressionGenerator","methodName":"addElseBranchForExhaustiveWhenIfNeeded","parameters":["IrWhen","KtWhenExpression"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"visitParenthesizedExpression","parameters":["KtParenthesizedExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},6,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitParenthesizedExpression","parameters":["KtParenthesizedExpression"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.contracts.EffectsExtractingVisitor","methodName":"visitParenthesizedExpression","parameters":["KtParenthesizedExpression","Unit"],"returnType":"Computation"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.codegenUtilKt","methodName":"generateNullCheckForNonSafeAs","parameters":["InstructionAdapter","KotlinType","LanguageVersionSettings"],"returnType":"Unit"},10,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitParenthesizedExpression","parameters":["KtParenthesizedExpression","Void"],"returnType":"Void"},6,{"pathToFun":"org.jetbrains.kotlin.psi.KtParenthesizedExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"visitBinaryWithTypeRHSExpression","parameters":["KtBinaryExpressionWithTypeRHS","KotlinType"],"returnType":"CompileTimeConstant"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"visitParenthesizedExpression","parameters":["KtParenthesizedExpression","KotlinType"],"returnType":"CompileTimeConstant"},4,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher","methodName":"visitParenthesizedExpression","parameters":["KtParenthesizedExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},6,{"pathToFun":"org.jetbrains.kotlin.types.CastDiagnosticsUtil","methodName":"allParametersReified","parameters":["KotlinType"],"returnType":"Any"},9,{"pathToFun":"org.jetbrains.kotlin.renderer.ClassifierNamePolicy$SOURCE_CODE_QUALIFIED","methodName":"qualifierName","parameters":["DeclarationDescriptor"],"returnType":"String"},8,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseParenthesizedExpression","parameters":[""],"returnType":"void"},6,{"pathToFun":"org.jetbrains.kotlin.renderer.ClassifierNamePolicy$SOURCE_CODE_QUALIFIED","methodName":"renderClassifier","parameters":["ClassifierDescriptor","DescriptorRenderer"],"returnType":"String"},10,{"pathToFun":"org.jetbrains.kotlin.renderer.RenderingUtilsKt","methodName":"render","parameters":["FqNameUnsafe"],"returnType":"String"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitParenthesizedExpression","parameters":["KtParenthesizedExpression","StackValue"],"returnType":"StackValue"},6,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitParenthesizedExpression","parameters":["KtParenthesizedExpression","D"],"returnType":"R"},6,{"pathToFun":"org.jetbrains.kotlin.renderer.ClassifierNamePolicy$SOURCE_CODE_QUALIFIED","methodName":"qualifiedNameForSourceCode","parameters":["ClassifierDescriptor"],"returnType":"String"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"genThrow","parameters":["InstructionAdapter","String","String"],"returnType":"void"},11,{"pathToFun":"org.jetbrains.kotlin.psi.KtParenthesizedExpression","methodName":"getExpression","parameters":[""],"returnType":"KtExpression"},6,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitParenthesizedExpression","parameters":["KtParenthesizedExpression"],"returnType":"void"},6,{"pathToFun":"org.jetbrains.kotlin.contracts.model.visitors.InfoCollector","methodName":"visitEqual","parameters":["ESEqual"],"returnType":"MutableContextInfo"},12,{"pathToFun":"org.jetbrains.kotlin.contracts.model.structure.ESVariable","methodName":"accept","parameters":["ESExpressionVisitor"],"returnType":"T"},13,{"pathToFun":"org.jetbrains.kotlin.contracts.model.visitors.Reducer","methodName":"visitVariable","parameters":["ESVariable"],"returnType":"ESVariable"},13,{"pathToFun":"org.jetbrains.kotlin.contracts.ContextInfoToDataFlowInfoKt","methodName":"toDataFlowValue","parameters":["ESValue","KotlinBuiltIns"],"returnType":"DataFlowValue"},13,{"pathToFun":"org.jetbrains.kotlin.contracts.model.structure.ESReturns","methodName":"isImplies","parameters":["ESEffect"],"returnType":"Boolean"},13,{"pathToFun":"org.jetbrains.kotlin.contracts.model.MutableContextInfo","methodName":"notEqual","parameters":["ESValue","ESValue"],"returnType":"Any"},12,{"pathToFun":"org.jetbrains.kotlin.contracts.model.structure.ESEqual","methodName":"accept","parameters":["ESExpressionVisitor"],"returnType":"T"},12,{"pathToFun":"org.jetbrains.kotlin.contracts.ESVariableWithDataFlowValue","methodName":"hashCode","parameters":[""],"returnType":"Int"},13,{"pathToFun":"org.jetbrains.kotlin.contracts.model.visitors.Reducer","methodName":"visitEqual","parameters":["ESEqual"],"returnType":"ESExpression"},12,{"pathToFun":"org.jetbrains.kotlin.contracts.model.MutableContextInfo","methodName":"initAndAdd","parameters":["MutableMap","ESValue","D"],"returnType":"Unit"},13,{"pathToFun":"org.jetbrains.kotlin.contracts.model.functors.EqualsFunctor","methodName":"equateValues","parameters":["ESValue","ESValue"],"returnType":"List"},12,{"pathToFun":"org.jetbrains.kotlin.contracts.model.structure.ESConstant","methodName":"equals","parameters":["Any"],"returnType":"Boolean"},13,{"pathToFun":"org.jetbrains.kotlin.contracts.model.MutableContextInfo","methodName":"equal","parameters":["ESValue","ESValue"],"returnType":"Any"},12,{"pathToFun":"org.jetbrains.kotlin.codegen.SamType","methodName":"equals","parameters":["Object"],"returnType":"boolean"},13,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitBlockExpression","parameters":["KtBlockExpression","Nothing"],"returnType":"IrStatement"},8,{"pathToFun":"org.jetbrains.kotlin.cfg.ConstructorConsistencyChecker","methodName":"safeReferenceUsage","parameters":["KtReferenceExpression"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"getEnclosingClassContext","parameters":[""],"returnType":"CodegenContext"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassMemberScope","methodName":"getScopeForInitializerResolution","parameters":["KtDeclaration"],"returnType":"LexicalScope"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"getEnclosingClass","parameters":[""],"returnType":"ClassDescriptor"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalChainedScope","methodName":"definitelyDoesNotContainName","parameters":["Name"],"returnType":"Boolean"},11,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext\\$AccessorKey","methodName":"hashCode","parameters":[""],"returnType":"int"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"isContextWithUninitializedThis","parameters":[""],"returnType":"boolean"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"generateSyntheticAccessor","parameters":["AccessorForCallableDescriptor"],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.InnerClassesScopeWrapper","methodName":"recordLookup","parameters":["Name","LookupLocation"],"returnType":"Unit"},9,{"pathToFun":"org.jetbrains.kotlin.descriptors.Visibilities","methodName":"hasContainingSourceFile","parameters":["DeclarationDescriptor"],"returnType":"boolean"},9,{"pathToFun":"org.jetbrains.kotlin.descriptors.EffectiveVisibility$Private","methodName":"relation","parameters":["EffectiveVisibility"],"returnType":"Any"},14,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkMemberProperty","parameters":["KtProperty","PropertyDescriptor","ClassDescriptor"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.syntheticAccessorUtilKt","methodName":"getAccessorNameSuffix","parameters":["CallableMemberDescriptor","ClassDescriptor","AccessorKind"],"returnType":"String"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"getEnclosingThisContext","parameters":[""],"returnType":"CodegenContext"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.context.ClassContext","methodName":"computeOuterExpression","parameters":[""],"returnType":"Field"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"getAccessor","parameters":["D","AccessorKind","KotlinType","ClassDescriptor","boolean","boolean"],"returnType":"D"},4,{"pathToFun":"org.jetbrains.kotlin.descriptors.Visibilities","methodName":"inSameFile","parameters":["DeclarationDescriptor","DeclarationDescriptor"],"returnType":"boolean"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.InnerClassesScopeWrapper","methodName":"definitelyDoesNotContainName","parameters":["Name"],"returnType":"Any"},11,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext\\$AccessorKey","methodName":"equals","parameters":["Object"],"returnType":"boolean"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"generateMethodCallTo","parameters":["FunctionDescriptor","FunctionDescriptor","InstructionAdapter"],"returnType":"StackValue"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorUtils","methodName":"getContainingSourceFile","parameters":["DeclarationDescriptor"],"returnType":"SourceFile"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.ModifierCheckerCore","methodName":"checkCompatibility","parameters":["BindingTrace","ASTNode","ASTNode","PsiElement","MutableSet"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.AnnotationChecker$Companion$TargetLists","methodName":"T_MEMBER_PROPERTY","parameters":["Boolean","Boolean"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.FileScopeFactory$DummyContainerDescriptor","methodName":"getSource","parameters":[""],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.source.PsiSourceFile","methodName":"equals","parameters":["Any"],"returnType":"Boolean"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.ModifierCheckerCore","methodName":"compatibility","parameters":["KtModifierKeywordToken","KtModifierKeywordToken"],"returnType":"Compatibility"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper$Companion","methodName":"getPartSimpleNameForMangling","parameters":["CallableMemberDescriptor"],"returnType":"String"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.syntheticAccessorUtilKt","methodName":"getJvmName","parameters":["CallableMemberDescriptor"],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalChainedScope","methodName":"recordLookup","parameters":["Name","LookupLocation"],"returnType":"Unit"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"getOuterExpression","parameters":["StackValue","boolean","boolean"],"returnType":"StackValue"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"getAccessor","parameters":["D","AccessorKind","KotlinType","ClassDescriptor"],"returnType":"D"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtModifierList","methodName":"getOwner","parameters":[""],"returnType":"PsiElement"},1,{"pathToFun":"org.jetbrains.kotlin.cfg.ConstructorConsistencyChecker","methodName":"insideLValue","parameters":["KtReferenceExpression"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"getAccessor","parameters":["D","ClassDescriptor"],"returnType":"D"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.AbstractAccessorForFunctionDescriptor","methodName":"copyValueParameters","parameters":["FunctionDescriptor"],"returnType":"List"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.AbstractAccessorForFunctionDescriptor","methodName":"copyTypeParameters","parameters":["FunctionDescriptor"],"returnType":"List"},4,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper","methodName":"getReferencedValue","parameters":["IrValueSymbol"],"returnType":"IrValueSymbol"},12,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols","methodName":"visitSetField","parameters":["IrSetField"],"returnType":"IrSetField"},11,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper","methodName":"getReferencedClassOrNull","parameters":["IrClassSymbol"],"returnType":"IrClassSymbol"},11,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols","methodName":"transform","parameters":["T"],"returnType":"Any"},11,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmPropertiesLowering","methodName":"substituteGetter","parameters":["IrBuilderWithScope","IrProperty","IrCall"],"returnType":"IrExpression"},2,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols","methodName":"visitComposite","parameters":["IrComposite"],"returnType":"IrComposite"},2,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols","methodName":"visitGetField","parameters":["IrGetField"],"returnType":"IrGetField"},2,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper","methodName":"getReferencedField","parameters":["IrFieldSymbol"],"returnType":"IrFieldSymbol"},11,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols","methodName":"transformValueArguments","parameters":["T","T"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols","methodName":"copyRemappedTypeArgumentsFrom","parameters":["IrMemberAccessExpression","IrMemberAccessExpression"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper","methodName":"getReferencedFunction","parameters":["IrFunctionSymbol"],"returnType":"IrFunctionSymbol"},2,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols","methodName":"visitCall","parameters":["IrCall"],"returnType":"IrCall"},2,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols","methodName":"shallowCopyCall","parameters":["IrCall"],"returnType":"IrCall"},2,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols","methodName":"visitGetValue","parameters":["IrGetValue"],"returnType":"IrGetValue"},12,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols","methodName":"transformReceiverArguments","parameters":["T","T"],"returnType":"T"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.CallableReferencesCandidateFactory","methodName":"toCallableReceiver","parameters":["ReceiverValueWithSmartCastInfo","Boolean"],"returnType":"CallableReceiver"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.MutableClosure","methodName":"getCapturedReceiverFieldName","parameters":["BindingContext","LanguageVersionSettings"],"returnType":"String"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.FakeValueArgumentForLeftCallableReference","methodName":"getArgumentExpression","parameters":[""],"returnType":"Any"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionReferenceGenerationStrategy","methodName":"receiverParameterStackValue","parameters":["JvmMethodSignature","ExpressionCodegen"],"returnType":"StackValue"},7,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiFactoryKt","methodName":"KtPsiFactory","parameters":["Project","Boolean"],"returnType":"KtPsiFactory"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.ResolvedAtomCompleter","methodName":"updateReceiverValue","parameters":["ReceiverValue","TypeSubstitutor"],"returnType":"ReceiverValue"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorFactory","methodName":"createDefaultSetter","parameters":["PropertyDescriptor","Annotations","Annotations"],"returnType":"PropertySetterDescriptorImpl"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.DefaultParameterValueSubstitutor","methodName":"hasSecondaryConstructorsWithNoParameters","parameters":["KtClass"],"returnType":"Any"},10,{"pathToFun":"org.jetbrains.kotlin.codegen.callableReferenceUtilKt","methodName":"capturedBoundReferenceReceiver","parameters":["Type","Type","KotlinType","Boolean"],"returnType":"StackValue"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.MutableClosure","methodName":"setCustomCapturedReceiverType","parameters":["KotlinType"],"returnType":"void"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.callableReferenceUtilKt","methodName":"loadBoundReferenceReceiverParameter","parameters":["InstructionAdapter","Int","Type","KotlinType"],"returnType":"Unit"},8,{"pathToFun":"org.jetbrains.kotlin.psi2ir.intermediate.IntermediateValue","methodName":"loadIfExists","parameters":[""],"returnType":"IrExpression"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"genCmpWithZero","parameters":["KtExpression","IElementType","StackValue"],"returnType":"StackValue"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.CompileTimeConstantChecker","methodName":"checkIntegerValue","parameters":["ConstantValue","KotlinType","KtConstantExpression"],"returnType":"boolean"},6,{"pathToFun":"org.jetbrains.kotlin.types.checker.TypeCheckingProcedure","methodName":"findCorrespondingSupertype","parameters":["KotlinType","KotlinType"],"returnType":"KotlinType"},2,{"pathToFun":"org.jetbrains.kotlin.types.TypeUnifier","methodName":"doUnify","parameters":["TypeProjection","TypeProjection","Predicate","UnificationResultImpl"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.types.TypeUnifier","methodName":"unify","parameters":["TypeProjection","TypeProjection","Predicate"],"returnType":"UnificationResult"},2,{"pathToFun":"org.jetbrains.kotlin.types.TypeUnifier\\$UnificationResultImpl","methodName":"put","parameters":["TypeConstructor","TypeProjection"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.types.checker.TypeCheckerProcedureCallbacksImpl","methodName":"assertEqualTypeConstructors","parameters":["TypeConstructor","TypeConstructor"],"returnType":"boolean"},3,{"pathToFun":"org.jetbrains.kotlin.types.TypeUnifier\\$UnificationResultImpl","methodName":"getSubstitution","parameters":[""],"returnType":"Map"},2,{"pathToFun":"org.jetbrains.kotlin.types.CastDiagnosticsUtil","methodName":"findStaticallyKnownSubtype","parameters":["KotlinType","TypeConstructor"],"returnType":"TypeReconstructionResult"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.ConstantValueFactory","methodName":"createIntegerConstantValue","parameters":["Long","KotlinType","Boolean"],"returnType":"ConstantValue"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"compareIntWithZero","parameters":["StackValue","int"],"returnType":"StackValue"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.IntegerZeroComparison","methodName":"jumpIfTrue","parameters":["Label"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"complexWriteReadReceiver","parameters":["StackValue"],"returnType":"StackValue"},8,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.ManyCandidates","methodName":"getResultingCalls","parameters":[""],"returnType":"Collection"},6,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorForStatements","methodName":"checkAssignmentType","parameters":["KotlinType","KtBinaryExpression","ExpressionTypingContext"],"returnType":"KotlinType"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tasks.TracingStrategyImpl","methodName":"unresolvedReferenceWrongReceiver","parameters":["BindingTrace","Collection"],"returnType":"void"},6,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"captureStatus","parameters":["CapturedTypeMarker"],"returnType":"CaptureStatus"},7,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractTypeAliasDescriptor","methodName":"isInner","parameters":[""],"returnType":"Boolean"},22,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractTypeAliasDescriptor","methodName":"initialize","parameters":["List"],"returnType":"Unit"},22,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractTypeAliasDescriptor","methodName":"getDeclaredTypeParameters","parameters":[""],"returnType":"List"},22,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractTypeAliasDescriptor","methodName":"getDeclarationDescriptor","parameters":[""],"returnType":"TypeAliasDescriptor"},22,{"pathToFun":"org.jetbrains.kotlin.types.SpecialTypesKt","methodName":"withAbbreviation","parameters":["SimpleType","SimpleType"],"returnType":"SimpleType"},22,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractTypeAliasDescriptor","methodName":"isExpect","parameters":[""],"returnType":"Boolean"},22,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractTypeAliasDescriptor","methodName":"getParameters","parameters":[""],"returnType":"List"},22,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.PSICallResolver","methodName":"areAllFailedWithInapplicableWrongReceiver","parameters":["Collection"],"returnType":"Any"},6,{"pathToFun":"org.jetbrains.kotlin.descriptors.findClassInModuleKt","methodName":"findTypeAliasAcrossModuleDependencies","parameters":["ModuleDescriptor","ClassId"],"returnType":"TypeAliasDescriptor"},11,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.ArgumentTypeResolver","methodName":"isFunctionLiteralOrCallableReference","parameters":["KtExpression","StatementFilter"],"returnType":"boolean"},12,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"getValueAsFunction","parameters":["PseudoValue"],"returnType":"Any"},8,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.PSICallResolver","methodName":"transformManyCandidatesAndRecordTrace","parameters":["ManyCandidatesCallDiagnostic","TracingStrategy","BindingTrace","BasicCallResolutionContext"],"returnType":"ManyCandidates"},6,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorForStatements","methodName":"visitAssignmentOperation","parameters":["KtBinaryExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},6,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassDescriptor","methodName":"getConstructors","parameters":[""],"returnType":"Any"},27,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$DelegatedForComplexReceiver","methodName":"putSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"void"},8,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tasks.TracingStrategyImpl","methodName":"isFunctionExpectedError","parameters":["Collection"],"returnType":"VariableDescriptor"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$DelegatedForComplexReceiver","methodName":"store","parameters":["StackValue","InstructionAdapter","boolean"],"returnType":"void"},8,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorForStatements","methodName":"atLeastOneOperation","parameters":["Collection","Name"],"returnType":"boolean"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"complexReceiver","parameters":["StackValue","boolean..."],"returnType":"StackValue"},8,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"createDefaultConstructor","parameters":[""],"returnType":"ClassConstructorDescriptor"},18,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.PSICallResolver","methodName":"areAllFailed","parameters":["Collection"],"returnType":"Any"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateAugmentedAssignment","parameters":["KtBinaryExpression"],"returnType":"StackValue"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.KotlinToResolvedCallTransformer","methodName":"onlyTransform","parameters":["ResolvedCallAtom","Collection"],"returnType":"ResolvedCall"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.ArgumentTypeResolver","methodName":"isFunctionLiteralOrCallableReference","parameters":["KtExpression","ResolutionContext"],"returnType":"boolean"},12,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tasks.TracingStrategyImpl","methodName":"variableIfFunctionExpectedError","parameters":["ResolvedCall"],"returnType":"VariableDescriptor"},6,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractTypeAliasDescriptor","methodName":"computeDefaultType","parameters":[""],"returnType":"SimpleType"},22,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractTypeAliasDescriptor","methodName":"getTypeConstructor","parameters":[""],"returnType":"TypeConstructor"},22,{"pathToFun":"org.jetbrains.kotlin.types.error.ErrorSimpleFunctionDescriptorImpl","methodName":"createSubstitutedCopy","parameters":["DeclarationDescriptor","FunctionDescriptor","Kind","Name","Annotations","SourceElement"],"returnType":"FunctionDescriptorImpl"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$DelegatedForComplexReceiver","methodName":"bothReceiverStatic","parameters":["StackValueWithSimpleReceiver"],"returnType":"boolean"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"putCallAugAssignMethod","parameters":["KtBinaryExpression","ResolvedCall","Callable","KotlinType","JvmKotlinType","boolean"],"returnType":"void"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.ManyCandidates","methodName":"getResultCode","parameters":[""],"returnType":"Any"},6,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractTypeAliasDescriptor","methodName":"getTypeAliasConstructors","parameters":[""],"returnType":"Collection"},22,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrBlockImplKt","methodName":"addIfNotNull","parameters":["IrBlockImpl","IrStatement"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.psi2ir.intermediate.CallBuilderKt","methodName":"setExplicitReceiverValue","parameters":["CallBuilder","IntermediateValue"],"returnType":"Unit"},8,{"pathToFun":"org.jetbrains.kotlin.psi2ir.intermediate.AccessorPropertyLValue","methodName":"withReceiver","parameters":["VariableLValue","VariableLValue"],"returnType":"PropertyLValueBase"},3,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.AssignmentGenerator","methodName":"generateAugmentedAssignment","parameters":["KtBinaryExpression","IrStatementOrigin"],"returnType":"IrExpression"},6,{"pathToFun":"org.jetbrains.kotlin.psi2ir.intermediate.AccessorPropertyLValue","methodName":"load","parameters":[""],"returnType":"IrExpression"},3,{"pathToFun":"org.jetbrains.kotlin.psi2ir.intermediate.PropertyLValueBase","methodName":"assign","parameters":["(LValue) -> IrExpression"],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.GeneratorKt","methodName":"get","parameters":["Generator","ReadOnlySlice","K"],"returnType":"V"},12,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isCloneable","parameters":["ClassDescriptor"],"returnType":"boolean"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitSuperExpression","parameters":["KtSuperExpression","Void"],"returnType":"Void"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtPropertyAccessor","methodName":"hasBody","parameters":[""],"returnType":"boolean"},3,{"pathToFun":"org.jetbrains.kotlin.types.expressions.unqualifiedSuper.unqualifiedSuperKt","methodName":"getPropertyMembers","parameters":["KotlinType","Name","LookupLocation"],"returnType":"Collection"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.ClassBodyCodegen","methodName":"generateDelegationToDefaultImpl","parameters":["FunctionDescriptor","FunctionDescriptor","JvmKotlinType","FunctionCodegen","GenerationState","boolean"],"returnType":"void"},5,{"pathToFun":"org.jetbrains.kotlin.types.expressions.unqualifiedSuper.unqualifiedSuperKt","methodName":"isConcreteMember","parameters":["KotlinType","MemberDescriptor"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtPropertyAccessor","methodName":"hasBlockBody","parameters":[""],"returnType":"boolean"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitPropertyAccessor","parameters":["KtPropertyAccessor","Void"],"returnType":"Void"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"visitPropertyAccessor","parameters":["KtPropertyAccessor"],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtPropertyAccessor","methodName":"getReturnTypeReference","parameters":[""],"returnType":"KtTypeReference"},3,{"pathToFun":"org.jetbrains.kotlin.types.expressions.LabelResolver$LabeledReceiverResolutionResult","methodName":"success","parameters":[""],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitKtElement","parameters":["KtElement"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.LabelResolver$LabeledReceiverResolutionResult","methodName":"getReceiverParameterDescriptor","parameters":[""],"returnType":"ReceiverParameterDescriptor"},4,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractReceiverParameterDescriptor","methodName":"getVisibility","parameters":[""],"returnType":"Visibility"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.BodyResolver","methodName":"makeScopeForPropertyAccessor","parameters":["BodiesResolveContext","KtPropertyAccessor","PropertyDescriptor"],"returnType":"LexicalScope"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"getValueArgumentsByIndex","parameters":[""],"returnType":"List"},2,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractReceiverParameterDescriptor","methodName":"getUserData","parameters":["UserDataKey"],"returnType":"V"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver$Companion","methodName":"isPropertyTypeOkForOverride","parameters":["PropertyDescriptor","PropertyDescriptor"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.types.expressions.unqualifiedSuper.unqualifiedSuperKt","methodName":"resolveSupertypesByCalleeName","parameters":["Collection","Name"],"returnType":"Collection"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.unqualifiedSuper.unqualifiedSuperKt","methodName":"getFunctionMembers","parameters":["KotlinType","Name","LookupLocation"],"returnType":"Collection"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"recordThisOrSuperCallInTraceAndCallExtension","parameters":["ExpressionTypingContext","ReceiverParameterDescriptor","KtExpression"],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.JvmCodegenUtil","methodName":"isNonDefaultInterfaceMember","parameters":["CallableMemberDescriptor","JvmDefaultMode"],"returnType":"boolean"},3,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractReceiverParameterDescriptor","methodName":"getValueParameters","parameters":[""],"returnType":"List"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtPropertyAccessor","methodName":"getBodyExpression","parameters":[""],"returnType":"KtExpression"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtPropertyAccessor","methodName":"getParameterList","parameters":[""],"returnType":"KtParameterList"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtPropertyAccessor","methodName":"getParameter","parameters":[""],"returnType":"KtParameter"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtSuperExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"determineGetterReturnType","parameters":["LexicalScope","BindingTrace","PropertyGetterDescriptor","KtPropertyAccessor","KotlinType"],"returnType":"KotlinType"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtPropertyAccessor","methodName":"getValueParameters","parameters":[""],"returnType":"List"},3,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"visitSuperExpression","parameters":["KtSuperExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.unqualifiedSuper.unqualifiedSuperKt","methodName":"resolveUnqualifiedSuperFromExpressionContext","parameters":["KtSuperExpression","Collection","KotlinType"],"returnType":"Collection"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.unqualifiedSuper.unqualifiedSuperKt","methodName":"isCallingMethodOfAny","parameters":["KtCallExpression","Name"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.unqualifiedSuper.unqualifiedSuperKt","methodName":"resolveSupertypesByPropertyName","parameters":["Collection","Name"],"returnType":"Collection"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.InterfaceImplBodyCodegen$InterfaceImplClassBuilder","methodName":"newMethod","parameters":["JvmDeclarationOrigin","Int","String","String","String","JvmMethodExceptionTypes"],"returnType":"MethodVisitor"},5,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher","methodName":"visitSuperExpression","parameters":["KtSuperExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtPropertyAccessor","methodName":"hasDeclaredReturnType","parameters":[""],"returnType":"boolean"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitSuperExpression","parameters":["KtSuperExpression","D"],"returnType":"R"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitPropertyAccessor","parameters":["KtPropertyAccessor","D"],"returnType":"R"},3,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractReceiverParameterDescriptor","methodName":"getDispatchReceiverParameter","parameters":[""],"returnType":"ReceiverParameterDescriptor"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"noExplicitTypeOrGetterType","parameters":["KtProperty"],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"checkPossiblyQualifiedSuper","parameters":["KtSuperExpression","ExpressionTypingContext","ReceiverParameterDescriptor"],"returnType":"KotlinType"},1,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseSuperExpression","parameters":[""],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitSuperExpression","parameters":["KtSuperExpression","StackValue"],"returnType":"StackValue"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtPropertyAccessor","methodName":"getEqualsToken","parameters":[""],"returnType":"PsiElement"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtPropertyAccessor","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},3,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractReceiverParameterDescriptor","methodName":"getTypeParameters","parameters":[""],"returnType":"List"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.ObservableBindingTrace","methodName":"wantsDiagnostics","parameters":[""],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getSuperCallLabelTarget","parameters":["CodegenContext","KtSuperExpression"],"returnType":"ClassDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.utils.ScopeUtilsKt","methodName":"getImplicitReceiversHierarchy","parameters":["LexicalScope"],"returnType":"List"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"castToRequiredTypeOfInterfaceIfNeeded","parameters":["StackValue","ClassDescriptor","ClassDescriptor"],"returnType":"StackValue"},1,{"pathToFun":"org.jetbrains.kotlin.util.declarationUtilKt","methodName":"firstSuperMethodFromKotlin","parameters":["CallableMemberDescriptor","CallableMemberDescriptor"],"returnType":"CallableMemberDescriptor"},4,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"isDeclaredInClass","parameters":["ReceiverParameterDescriptor"],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.utils.ScopeUtilsKt","methodName":"collectFromMeAndParent","parameters":["HierarchicalScope","(HierarchicalScope) -> T"],"returnType":"List"},4,{"pathToFun":"org.jetbrains.kotlin.types.expressions.unqualifiedSuper.unqualifiedSuperKt","methodName":"resolveSupertypesByMembers","parameters":["Collection","Boolean","(KotlinType) -> Collection"],"returnType":"Collection"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.unqualifiedSuper.unqualifiedSuperKt","methodName":"isPossiblyAmbiguousUnqualifiedSuper","parameters":["KtSuperExpression","Collection"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.state.typeMapperUtilsKt","methodName":"patchTypeParametersForDefaultImplMethod","parameters":["CallableMemberDescriptor"],"returnType":"ReceiverTypeAndTypeParameters"},5,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitSuperExpression","parameters":["KtSuperExpression"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.LabelResolver$LabeledReceiverResolutionResult$Companion","methodName":"labelResolutionSuccess","parameters":["ReceiverParameterDescriptor"],"returnType":"LabeledReceiverResolutionResult"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"getPredefinedInternalNameForClass","parameters":["ClassDescriptor"],"returnType":"String"},9,{"pathToFun":"org.jetbrains.kotlin.psi.KtStubbedPsiUtil","methodName":"getContainingDeclaration","parameters":["PsiElement","Class"],"returnType":"T"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtPropertyAccessor","methodName":"isGetter","parameters":[""],"returnType":"boolean"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtPropertyAccessor","methodName":"getProperty","parameters":[""],"returnType":"KtProperty"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtSuperExpression","methodName":"getSuperTypeQualifier","parameters":[""],"returnType":"KtTypeReference"},1,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractReceiverParameterDescriptor","methodName":"getExtensionReceiverParameter","parameters":[""],"returnType":"ReceiverParameterDescriptor"},4,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"resolveToReceiver","parameters":["KtInstanceExpressionWithLabel","ExpressionTypingContext","boolean"],"returnType":"LabeledReceiverResolutionResult"},4,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyAccessorDescriptorImpl","methodName":"setVisibility","parameters":["Visibility"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.codegenUtilKt","methodName":"isDefinitelyNotDefaultImplsMethod","parameters":["CallableMemberDescriptor"],"returnType":"Any"},5,{"pathToFun":"org.jetbrains.kotlin.psi.KtInstanceExpressionWithLabel","methodName":"getInstanceReference","parameters":[""],"returnType":"KtReferenceExpression"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitPropertyAccessor","parameters":["KtPropertyAccessor"],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtPropertyAccessor","methodName":"isSetter","parameters":[""],"returnType":"boolean"},3,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.descriptors.JvmDeclarationFactory","methodName":"getDefaultImplsFunction","parameters":["IrSimpleFunction"],"returnType":"IrSimpleFunction"},5,{"pathToFun":"org.jetbrains.kotlin.ir.util.IrUtilsKt","methodName":"isFakeOverriddenFromAny","parameters":["IrFunction"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.ToArrayLoweringKt","methodName":"isNonGenericToArray","parameters":["IrSimpleFunction","JvmBackendContext"],"returnType":"Boolean"},12,{"pathToFun":"org.jetbrains.kotlin.ir.util.IrUtilsKt","methodName":"isSuperToAny","parameters":["IrCall"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrUtilsKt","methodName":"hasJvmDefault","parameters":["IrFunction"],"returnType":"Boolean"},6,{"pathToFun":"org.jetbrains.kotlin.backend.common.ir.IrUtilsKt","methodName":"createStaticFunctionWithReceivers","parameters":["IrDeclarationParent","Name","IrFunction","IrType","IrDeclarationOrigin","Modality","Visibility","Boolean","Boolean","List"],"returnType":"IrSimpleFunction"},8,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrUtilsKt","methodName":"copyCorrespondingPropertyFrom","parameters":["IrSimpleFunction","IrSimpleFunction"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.backend.common.ir.IrInlineUtilsKt","methodName":"createParameterMapping","parameters":["IrFunction","IrFunction"],"returnType":"Map"},7,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrUtilsKt","methodName":"hasPlatformDependent","parameters":["IrFunction"],"returnType":"Boolean"},3,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.descriptors.JvmDeclarationFactory","methodName":"getDefaultImplsRedirection","parameters":["IrSimpleFunction"],"returnType":"IrSimpleFunction"},3,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.ToArrayLoweringKt","methodName":"isGenericToArray","parameters":["IrSimpleFunction","JvmBackendContext"],"returnType":"Boolean"},12,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.InterfaceLowering","methodName":"createDefaultImpl","parameters":["IrSimpleFunction"],"returnType":"IrSimpleFunction"},5,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.InheritedDefaultMethodsOnClassesLowering","methodName":"generateDelegationToDefaultImpl","parameters":["IrSimpleFunction","IrSimpleFunction"],"returnType":"IrSimpleFunction"},3,{"pathToFun":"org.jetbrains.kotlin.backend.common.ir.IrInlineUtilsKt","methodName":"moveBodyTo","parameters":["IrFunction","IrFunction"],"returnType":"IrBody"},7,{"pathToFun":"org.jetbrains.kotlin.ir.util.AdditionalIrUtilsKt","methodName":"overrides","parameters":["IrSimpleFunction","IrSimpleFunction"],"returnType":"Boolean"},3,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ArgumentsGenerationUtilsKt","methodName":"generateThisOrSuperReceiver","parameters":["StatementGenerator","ReceiverValue","ClassDescriptor"],"returnType":"IrExpression"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrUtilsKt","methodName":"isCompiledToJvmDefault","parameters":["IrSimpleFunction","JvmDefaultMode"],"returnType":"Boolean"},6,{"pathToFun":"org.jetbrains.kotlin.backend.common.DescriptorsToIrRemapper","methodName":"remapDeclaredSimpleFunction","parameters":["FunctionDescriptor"],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.InterfaceLowering","methodName":"visitReturn","parameters":["IrReturn"],"returnType":"IrExpression"},6,{"pathToFun":"org.jetbrains.kotlin.backend.common.ir.IrUtilsKt","methodName":"copyAndRenameConflictingTypeParametersFrom","parameters":["IrSimpleFunction","List","Collection"],"returnType":"List"},8,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrUtilsKt","methodName":"firstSuperMethodFromKotlin","parameters":["IrSimpleFunction","IrSimpleFunction"],"returnType":"IrSimpleFunctionSymbol"},3,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.InterfaceLowering","methodName":"visitCall","parameters":["IrCall"],"returnType":"IrExpression"},6,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrUtilsKt","methodName":"createDelegatingCallWithPlaceholderTypeArguments","parameters":["IrCall","IrFunction","IrBuiltIns"],"returnType":"IrCall"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.InheritedDefaultMethodsOnClassesLoweringKt","methodName":"isCloneableClone","parameters":["IrSimpleFunction"],"returnType":"Boolean"},3,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"generateThisReceiver","parameters":["Int","Int","KotlinType","ClassDescriptor"],"returnType":"IrExpression"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrUtilsKt","methodName":"copyFromWithPlaceholderTypeArguments","parameters":["IrFunctionAccessExpression","IrFunctionAccessExpression","IrBuiltIns"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.InheritedDefaultMethodsOnClassesLoweringKt","methodName":"isDefinitelyNotDefaultImplsMethod","parameters":["IrSimpleFunction","JvmDefaultMode","IrSimpleFunction"],"returnType":"Boolean"},5,{"pathToFun":"org.jetbrains.kotlin.storage.LockBasedLazyResolveStorageManager$LockProtectedContext","methodName":"getType","parameters":["KtExpression"],"returnType":"KotlinType"},6,{"pathToFun":"org.jetbrains.kotlin.storage.LockBasedLazyResolveStorageManager$LockProtectedTrace","methodName":"getType","parameters":["KtExpression"],"returnType":"KotlinType"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.coroutines.CoroutineTransformerKt","methodName":"markNoinlineLambdaIfSuspend","parameters":["MethodVisitor","FunctionalArgument"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitWhileExpression","parameters":["KtWhileExpression","D"],"returnType":"R"},1,{"pathToFun":"org.jetbrains.kotlin.types.TypeCapabilitiesKt","methodName":"isCustomTypeVariable","parameters":["KotlinType"],"returnType":"Boolean"},18,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitForExpression","parameters":["KtForExpression","StackValue"],"returnType":"StackValue"},2,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseFor","parameters":[""],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.InvokeTowerProcessor","methodName":"createInvokeProcessor","parameters":["C"],"returnType":"ScopeTowerProcessor"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"getCommonCallableFlags","parameters":["FunctionDescriptor","GenerationState"],"returnType":"int"},1,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseThrow","parameters":[""],"returnType":"void"},12,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.AbstractForInProgressionOrRangeLoopGenerator","methodName":"beforeLoop","parameters":[""],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseAnnotation","parameters":["AnnotationParsingMode"],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluator","methodName":"hasSpread","parameters":["ResolvedValueArgument"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"resolveConstructor","parameters":["JavaConstructor"],"returnType":"JavaClassConstructorDescriptor"},14,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"enterLoopBody","parameters":["KtLoopExpression"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.serialization.JvmSerializerExtension","methodName":"shouldSerializeNestedClass","parameters":["ClassDescriptor"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.DelegatingCall","methodName":"getTypeArguments","parameters":[""],"returnType":"List"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.AnnotationResolverImpl","methodName":"resolveAnnotationType","parameters":["LexicalScope","KtAnnotationEntry","BindingTrace"],"returnType":"KotlinType"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.CapturedParamInfo","methodName":"cloneWithNewDeclarationIndex","parameters":["Int"],"returnType":"CapturedParamInfo"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtWhileExpressionBase","methodName":"getCondition","parameters":[""],"returnType":"KtExpression"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.MethodInliner","methodName":"buildConstructorInvocation","parameters":["String","String","Map","Boolean","Boolean"],"returnType":"AnonymousObjectTransformationInfo"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.AnnotationChecker$Companion","methodName":"applicableTargetSet","parameters":["KtAnnotationEntry","BindingTrace"],"returnType":"Set"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"createSingletonViaInstance","parameters":["ClassDescriptor","KotlinTypeMapper","String"],"returnType":"Field"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"mapSignatureWithCustomParameters","parameters":["FunctionDescriptor","OwnerKind","List","Boolean"],"returnType":"JvmMethodGenericSignature"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.SafeCallToPrimitiveEquality","methodName":"cleanupOnNullReceiver","parameters":["InstructionAdapter"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackContext","methodName":"visitFakeAlwaysFalseIfeq","parameters":["AbstractInsnNode"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getCompileTimeConstant","parameters":["KtExpression"],"returnType":"ConstantValue"},1,{"pathToFun":"org.jetbrains.kotlin.contracts.EffectsExtractingVisitor","methodName":"visitSafeQualifiedExpression","parameters":["KtSafeQualifiedExpression","Unit"],"returnType":"Computation"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.FieldRemapper","methodName":"foldFieldAccessChainIfNeeded","parameters":["List","Int","MethodNode"],"returnType":"AbstractInsnNode"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiFactory","methodName":"createCallArguments","parameters":["String"],"returnType":"KtValueArgumentList"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtIsExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"findChildContext","parameters":["DeclarationDescriptor"],"returnType":"CodegenContext"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.coroutineCodegenUtilKt","methodName":"getResult","parameters":["ModuleDescriptor","KotlinType"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.OverridingUtil\\$OverrideCompatibilityInfo","methodName":"incompatible","parameters":["String"],"returnType":"OverrideCompatibilityInfo"},3,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.inlineClassMappingKt","methodName":"computeUnderlyingType","parameters":["KotlinType"],"returnType":"KotlinType"},6,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"atParenthesizedMutableForPlatformTypes","parameters":["int"],"returnType":"boolean"},15,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateBooleanAnd","parameters":["KtBinaryExpression"],"returnType":"StackValue"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.InvokeProcessorsKt","methodName":"getExtensionInvokeCandidateDescriptor","parameters":["ImplicitScopeTower","ReceiverValueWithSmartCastInfo"],"returnType":"CandidateWithBoundDispatchReceiver"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.coroutineCallCheckerKt","methodName":"checkCoroutinesFeature","parameters":["LanguageVersionSettings","DiagnosticSink","PsiElement"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.AnnotationResolverImpl","methodName":"resolveAnnotationCall","parameters":["KtAnnotationEntry","LexicalScope","BindingTrace"],"returnType":"OverloadResolutionResults"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.TrackingBindingTrace","methodName":"markAsReported","parameters":[""],"returnType":"Unit"},11,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.FakeCallableDescriptorForObject","methodName":"getReferencedDescriptor","parameters":[""],"returnType":"ClassifierDescriptorWithTypeParameters"},9,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.TypeAliasConstructorDescriptorImpl$Companion","methodName":"getTypeSubstitutorForUnderlyingClass","parameters":["TypeAliasDescriptor"],"returnType":"TypeSubstitutor"},12,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallTransformer\\$CallForImplicitInvoke","methodName":"getCallOperationNode","parameters":[""],"returnType":"ASTNode"},5,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"getPropertiesFromSupertypes","parameters":["Name"],"returnType":"Set"},7,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingUtils","methodName":"createFakeExpressionOfType","parameters":["Project","BindingTrace","String","KotlinType"],"returnType":"KtExpression"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxedValuesCollection","methodName":"iterator","parameters":[""],"returnType":"Iterator"},3,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.MutableClassDescriptor","methodName":"getVisibility","parameters":[""],"returnType":"Visibility"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"recordValueArgument","parameters":["ValueParameterDescriptor","ResolvedValueArgument"],"returnType":"void"},6,{"pathToFun":"org.jetbrains.kotlin.types.expressions.PatternMatchingTypingVisitor","methodName":"checkTypeForIs","parameters":["ExpressionTypingContext","KtElement","Boolean","KotlinType","KtTypeReference","DataFlowValue"],"returnType":"ConditionalDataFlowInfo"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.MutableClosure","methodName":"isSuspendLambda","parameters":[""],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ForLoopConventionsChecker","methodName":"checkIfOperatorModifierPresent","parameters":["KtExpression","FunctionDescriptor","DiagnosticSink"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.SMAPBuilder","methodName":"toSMAP","parameters":["Collection","String","Boolean"],"returnType":"String"},6,{"pathToFun":"org.jetbrains.kotlin.load.java.descriptors.JavaClassConstructorDescriptor","methodName":"createDescriptor","parameters":["ClassDescriptor","JavaClassConstructorDescriptor","Kind","SourceElement","Annotations"],"returnType":"JavaClassConstructorDescriptor"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.OverloadResolutionResultsImpl","methodName":"isSuccess","parameters":[""],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiFactory","methodName":"createProperty","parameters":["String","String","String","Boolean","String"],"returnType":"KtProperty"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitAnnotationEntry","parameters":["KtAnnotationEntry","D"],"returnType":"R"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.SMAPBuilder","methodName":"toSMAP","parameters":["RangeMapping","Int","Boolean"],"returnType":"String"},6,{"pathToFun":"org.jetbrains.kotlin.contracts.model.structure.ESKotlinType","methodName":"toKotlinType","parameters":["KotlinBuiltIns"],"returnType":"KotlinType"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"generateInitializers","parameters":["ExpressionCodegen"],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"isIncrementOrDecrement","parameters":["IElementType"],"returnType":"Boolean"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.AnnotationResolverImpl","methodName":"getAnnotationArgumentValue","parameters":["BindingTrace","ValueParameterDescriptor","ResolvedValueArgument"],"returnType":"ConstantValue"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.codegenUtilKt","methodName":"isPossiblyUninitializedSingleton","parameters":["ClassDescriptor"],"returnType":"Any"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.MemberScopeTowerLevel","methodName":"smartCastReceiver","parameters":["ReceiverValueWithSmartCastInfo","KotlinType"],"returnType":"ReceiverValueWithSmartCastInfo"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.AnnotationResolverImpl","methodName":"checkAnnotationType","parameters":["KtAnnotationEntry","BindingTrace","OverloadResolutionResults"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.PSICallResolver$FactoryProviderForInvoke","methodName":"factoryForInvoke","parameters":["KotlinResolutionCandidate","Boolean"],"returnType":"Pair"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.JvmRuntimeTypes","methodName":"createCoroutineSuperClass","parameters":["String"],"returnType":"ClassDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.diagnostics.KotlinSuppressCache$Companion","methodName":"isSuppressedByStrings","parameters":["String","Set","Severity"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.TypeAliasConstructorDescriptorImpl$Companion","methodName":"createIfAvailable","parameters":["StorageManager","TypeAliasDescriptor","ClassConstructorDescriptor"],"returnType":"TypeAliasConstructorDescriptor"},12,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.LambdaInfo$Companion","methodName":"getCapturedParamInfo","parameters":["LambdaInfo","EnclosedValueDescriptor"],"returnType":"CapturedParamDesc"},4,{"pathToFun":"org.jetbrains.kotlin.contracts.model.MutableContextInfo","methodName":"notSubtype","parameters":["ESValue","KotlinType"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtAnnotationEntry","methodName":"getTypeReference","parameters":[""],"returnType":"KtTypeReference"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.ParametersBuilder","methodName":"addCapturedParam","parameters":["CapturedParamDesc","String","Boolean"],"returnType":"CapturedParamInfo"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitorKt","methodName":"generateResumeWithExceptionCheck","parameters":["InstructionAdapter","Boolean","Int","Int"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluator","methodName":"resolveAnnotationValueArguments","parameters":["ResolvedValueArgument","KotlinType","KotlinType","BindingTrace"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.BranchedValue","methodName":"loopJump","parameters":["Label","InstructionAdapter","Boolean"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"intoCoroutineClosure","parameters":["FunctionDescriptor","FunctionDescriptor","LocalLookup","KotlinTypeMapper"],"returnType":"ClosureContext"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.ControlFlowGraph","methodName":"getSuccessorsIndices","parameters":["AbstractInsnNode"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.AnnotationCodegen","methodName":"genAnnotation","parameters":["AnnotationDescriptor","TypePath","boolean"],"returnType":"String"},1,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"isNullableNothing","parameters":["KotlinType"],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.StatementFilterKt","methodName":"getLastStatementInABlock","parameters":["StatementFilter","KtBlockExpression"],"returnType":"Any"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.range.RangeValuesKt","methodName":"createIntrinsifiedRangeValueOrNull","parameters":["ExpressionCodegen","ResolvedCall"],"returnType":"RangeValue"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.SmartCastManager","methodName":"checkAndRecordPossibleCast","parameters":["DataFlowValue","KotlinType","KtExpression","ResolutionContext","Call","Boolean","((KotlinType) -> Boolean)"],"returnType":"SmartCastResult"},11,{"pathToFun":"org.jetbrains.kotlin.types.TypeUtils","methodName":"dependsOnTypeParameters","parameters":["KotlinType","Collection"],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getCoroutineInstanceValueForSuspensionPoint","parameters":["ResolvedCall"],"returnType":"StackValue"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtForExpression","methodName":"getLoopParameter","parameters":[""],"returnType":"KtParameter"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.IdentifierInfo$Expression","methodName":"equals","parameters":["Any"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitThisExpression","parameters":["KtThisExpression"],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.diagnostics.DiagnosticsWithSuppression","methodName":"noSuppression","parameters":[""],"returnType":"Diagnostics"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.inlineCodegenUtilsKt","methodName":"isFakeContinuationMarker","parameters":["AbstractInsnNode"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"exitLoopBody","parameters":["KtLoopExpression"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InlinedLambdaRemapper","methodName":"getFieldNameForFolding","parameters":["FieldInsnNode"],"returnType":"String"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.coroutineCodegenUtilKt","methodName":"loadCoroutineSuspendedMarker","parameters":["InstructionAdapter","LanguageVersionSettings"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.types.checker.IntersectionTypeKt","methodName":"intersectWrappedTypes","parameters":["Collection"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingUtils","methodName":"getExpressionReceiver","parameters":["ExpressionTypingFacade","KtExpression","ExpressionTypingContext"],"returnType":"ExpressionReceiver"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineCodegenForNamedFunction$Companion","methodName":"create","parameters":["ClassBuilder","ExpressionCodegen","FunctionDescriptor","KtFunction"],"returnType":"CoroutineCodegenForNamedFunction"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.AbstractInvokeTowerProcessor","methodName":"processVariableGroup","parameters":["Collection","TowerData"],"returnType":"List"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.DelegatingClassBuilder","methodName":"visitSMAP","parameters":["SourceMapper","boolean"],"returnType":"void"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.SMAPParser","methodName":"parseStratum","parameters":["String","String","SMAP"],"returnType":"SMAP"},5,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitFunctionType","parameters":["KtFunctionType"],"returnType":"void"},15,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getContinuationParameterFromEnclosingSuspendFunction","parameters":["ResolvedCall"],"returnType":"StackValue"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.serialization.JvmSerializerExtension","methodName":"releaseCoroutines","parameters":[""],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isULong","parameters":["KotlinType"],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"dup","parameters":["InstructionAdapter","Type","Type"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.contracts.model.functors.AbstractBinaryFunctor","methodName":"invokeWithArguments","parameters":["Computation","Computation"],"returnType":"List"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$Field","methodName":"storeSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineCodegenForNamedFunction","methodName":"generateKotlinMetadataAnnotation","parameters":[""],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.ParametersBuilder","methodName":"addCapturedParam","parameters":["CapturedParamInfo","String"],"returnType":"CapturedParamInfo"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateLoopBody","parameters":["KtExpression"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.PSICallResolver$FactoryProviderForInvoke","methodName":"isRecursiveVariableResolution","parameters":["KotlinResolutionCandidate"],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.PopBackwardPropagationTransformer$Transformer","methodName":"isTransformableCheckcastOperand","parameters":["AbstractInsnNode","String"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractTypeAliasDescriptor","methodName":"getVisibility","parameters":[""],"returnType":"Any"},12,{"pathToFun":"org.jetbrains.kotlin.psi.KtEscapeStringTemplateEntry","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"expression","parameters":["Type","KtExpression","ExpressionCodegen"],"returnType":"StackValue"},2,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingVisitor","methodName":"visitThrowExpression","parameters":["KtThrowExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},12,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitor","methodName":"collectSuspensionPoints","parameters":["MethodNode"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.OverloadResolver","methodName":"isTopLevelMainInDifferentFiles","parameters":["DeclarationDescriptor","DeclarationDescriptor"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitor","methodName":"setLabel","parameters":["InstructionAdapter"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"generateBooleanOperation","parameters":["KtBinaryExpression"],"returnType":"Unit"},8,{"pathToFun":"org.jetbrains.kotlin.load.java.descriptors.JavaClassConstructorDescriptor","methodName":"createJavaConstructor","parameters":["ClassDescriptor","Annotations","boolean","SourceElement"],"returnType":"JavaClassConstructorDescriptor"},17,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"writeLoopParameterAssignment","parameters":["KtForExpression"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.AbstractInvokeTowerProcessor","methodName":"createVariableInvokeProcessor","parameters":["C"],"returnType":"VariableInvokeProcessor"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.FieldInfo","methodName":"createSingletonViaInstance","parameters":["ClassDescriptor","KotlinTypeMapper","String"],"returnType":"FieldInfo"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitPrefixExpression","parameters":["KtPrefixExpression","StackValue"],"returnType":"StackValue"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.BooleanValue","methodName":"getType","parameters":["ModuleDescriptor"],"returnType":"Any"},6,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseFunctionType","parameters":[""],"returnType":"void"},15,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitWhileExpression","parameters":["KtWhileExpression","StackValue"],"returnType":"StackValue"},1,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.FunctionDescriptorImpl\\$CopyConfiguration","methodName":"putUserData","parameters":["UserDataKey","V"],"returnType":"CopyBuilder"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"visitThisExpression","parameters":["KtThisExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},3,{"pathToFun":"org.jetbrains.kotlin.types.Variance","methodName":"allowsPosition","parameters":["Variance"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitor","methodName":"fixLvtForParameters","parameters":["MethodNode","LabelNode","LabelNode"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitor","methodName":"prepareMethodNodePreludeForNamedFunction","parameters":["MethodNode"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.ControlFlowGraph","methodName":"getPredecessorsIndices","parameters":["AbstractInsnNode"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.descriptors.JavaPropertyDescriptor","methodName":"create","parameters":["DeclarationDescriptor","Annotations","Modality","Visibility","boolean","Name","SourceElement","boolean"],"returnType":"JavaPropertyDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.UtilKt","methodName":"remapLocalVariables","parameters":["MethodNode","IntArray"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitThrowExpression","parameters":["KtThrowExpression"],"returnType":"Unit"},12,{"pathToFun":"org.jetbrains.kotlin.types.expressions.FakeCallResolver","methodName":"makeAndResolveFakeCallInContext","parameters":["ReceiverValue","ResolutionContext","List","Name","KtExpression","RealExpression","(KtSimpleNameExpression) -> Unit"],"returnType":"Pair"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.FakeCallableDescriptorForObject","methodName":"getDispatchReceiverParameter","parameters":[""],"returnType":"ReceiverParameterDescriptor"},9,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"getArrayType","parameters":["Variance","KotlinType"],"returnType":"SimpleType"},8,{"pathToFun":"org.jetbrains.kotlin.psi.KtAnnotationEntry","methodName":"getValueArgumentList","parameters":[""],"returnType":"KtValueArgumentList"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallTransformer\\$CallForImplicitInvoke","methodName":"getOuterCall","parameters":[""],"returnType":"Call"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.range.RangeValuesKt","methodName":"createRangeValueForExpression","parameters":["ExpressionCodegen","KtExpression"],"returnType":"RangeValue"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.variableLivenessKt","methodName":"analyzeVisibleByDebuggerVariables","parameters":["MethodNode","TypeAnnotatedFrames"],"returnType":"Array"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.AccessorForConstructorDescriptor","methodName":"getOriginal","parameters":[""],"returnType":"AccessorForConstructorDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitAnnotationEntry","parameters":["KtAnnotationEntry"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.MutableClassDescriptor","methodName":"getDeclaredTypeParameters","parameters":[""],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.comparison.IntegerComparisonGenerator","methodName":"jumpIfGreater","parameters":["InstructionAdapter","Label"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.variableLivenessKt","methodName":"analyzeLiveness","parameters":["MethodNode"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtAnnotationEntry","methodName":"getUseSiteTarget","parameters":[""],"returnType":"KtAnnotationUseSiteTarget"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.PreliminaryLoopVisitor","methodName":"clearDataFlowInfoForAssignedLocalVariables","parameters":["DataFlowInfo","LanguageVersionSettings"],"returnType":"DataFlowInfo"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.RedundantLocalsEliminationMethodTransformer","methodName":"findPopPredecessors","parameters":["MethodNode","(AbstractInsnNode) -> Boolean"],"returnType":"Map"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.OverloadResolver","methodName":"findRedeclarations","parameters":["Collection"],"returnType":"Collection"},7,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"getContributedClassifier","parameters":["Name","LookupLocation"],"returnType":"ClassifierDescriptor"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CandidateResolver","methodName":"isCandidateVisibleOrExtensionReceiver","parameters":["CallCandidateResolutionContext","ReceiverValue","KotlinType","Boolean"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.DelegatingCall","methodName":"getTypeArgumentList","parameters":[""],"returnType":"KtTypeArgumentList"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.InvokeExtensionTowerProcessor","methodName":"createInvokeProcessor","parameters":["C"],"returnType":"ScopeTowerProcessor"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.AbstractForLoopGenerator","methodName":"body","parameters":[""],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.contracts.model.visitors.InfoCollector","methodName":"visitIs","parameters":["ESIs"],"returnType":"MutableContextInfo"},2,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher","methodName":"visitThisExpression","parameters":["KtThisExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.CallReceiver","methodName":"dup","parameters":["InstructionAdapter","boolean"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.OverloadResolver","methodName":"isConstructorsOfDifferentRedeclaredClasses","parameters":["DeclarationDescriptor","DeclarationDescriptor"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.util.MemberKindCheck$MemberOrExtension","methodName":"check","parameters":["FunctionDescriptor"],"returnType":"Any"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.ImplementationBodyCodegen","methodName":"isInterfaceCompanionWithBackingFieldsInOuter","parameters":["DeclarationDescriptor"],"returnType":"boolean"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtAnnotationEntry","methodName":"getLambdaArguments","parameters":[""],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.FakeCallableDescriptorForObject","methodName":"isConst","parameters":[""],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.CallMaker","methodName":"makeCall","parameters":["ReceiverValue","KtUnaryExpression"],"returnType":"Call"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionCodegen","methodName":"loadExplicitArgumentsOnStack","parameters":["Type","boolean","JvmMethodSignature","CallGenerator"],"returnType":"void"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.range.RangeCodegenUtilKt","methodName":"isPrimitiveNumberRangeTo","parameters":["CallableDescriptor"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.load.java.descriptors.JavaClassConstructorDescriptor","methodName":"hasSynthesizedParameterNames","parameters":[""],"returnType":"boolean"},4,{"pathToFun":"org.jetbrains.kotlin.contracts.model.structure.ESIs","methodName":"accept","parameters":["ESExpressionVisitor"],"returnType":"T"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.LambdaInfo$Companion","methodName":"capturedParamDesc","parameters":["LambdaInfo","String","Type"],"returnType":"CapturedParamDesc"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"isSelectorPureNonNullType","parameters":["KtSafeQualifiedExpression"],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtFunctionType","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},15,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"intermediateValueForSyntheticExtensionProperty","parameters":["SyntheticJavaPropertyDescriptor","StackValue"],"returnType":"Property"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.PSICallResolver$FactoryProviderForInvoke","methodName":"createReceiverCallArgument","parameters":["KotlinResolutionCandidate"],"returnType":"SimpleKotlinCallArgument"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"compareWithNull","parameters":["StackValue","int"],"returnType":"StackValue"},5,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parsePackageName","parameters":[""],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitEscapeStringTemplateEntry","parameters":["KtEscapeStringTemplateEntry"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.load.java.descriptors.JavaPropertyDescriptor","methodName":"getUserData","parameters":["UserDataKey"],"returnType":"V"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.descriptors.JavaClassConstructorDescriptor","methodName":"createSubstitutedCopy","parameters":["DeclarationDescriptor","FunctionDescriptor","Kind","Name","Annotations","SourceElement"],"returnType":"JavaClassConstructorDescriptor"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitWhileExpression","parameters":["KtWhileExpression"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitor","methodName":"nextDefinitelyHitLineNumber","parameters":["SuspensionPoint"],"returnType":"LineNumberNode"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.MethodNodeExaminer","methodName":"isPopBeforeSafeUnitInstance","parameters":["AbstractInsnNode"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"getSuspendFunctionName","parameters":["int"],"returnType":"String"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"computeNonDeclaredProperties","parameters":["Name","MutableCollection"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.CompileTimeConstantChecker","methodName":"checkBooleanValue","parameters":["KotlinType","KtConstantExpression"],"returnType":"boolean"},6,{"pathToFun":"org.jetbrains.kotlin.psi.KtFunctionType","methodName":"getParameters","parameters":[""],"returnType":"List"},15,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.coroutineCodegenUtilKt","methodName":"computeLabelOwner","parameters":["LanguageVersionSettings","String"],"returnType":"Type"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxingMethodTransformer","methodName":"removeValuesClashingWithVariablesPass","parameters":["RedundantBoxedValuesCollection","MethodNode","Array"],"returnType":"Boolean"},3,{"pathToFun":"org.jetbrains.kotlin.parsing.AbstractKotlinParsing","methodName":"expectNoAdvance","parameters":["KtToken","String"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtThrowExpression","methodName":"getThrownExpression","parameters":[""],"returnType":"KtExpression"},12,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.SMAPParser","methodName":"parseOrNull","parameters":["String"],"returnType":"SMAP"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.MethodInlinerUtilKt","methodName":"remove","parameters":["MethodNode","Sequence"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ArgumentMatchImpl","methodName":"replaceValueParameter","parameters":["ValueParameterDescriptor"],"returnType":"ArgumentMatchImpl"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitor","methodName":"addContinuationAndResultToLvt","parameters":["MethodNode","Label","Label"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.coroutineCallCheckerKt","methodName":"isScopeForDefaultParameterValuesOf","parameters":["HierarchicalScope","FunctionDescriptor"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.types.ErrorUtils","methodName":"getCapability","parameters":["Capability"],"returnType":"T"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.AbstractForLoopGenerator","methodName":"scheduleLeaveVariable","parameters":["Runnable"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateExpressionWithNullFallback","parameters":["KtExpression","Label"],"returnType":"StackValue"},3,{"pathToFun":"org.jetbrains.kotlin.contracts.model.MutableContextInfo","methodName":"subtype","parameters":["ESValue","KotlinType"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.SMAPBuilder","methodName":"build","parameters":["List","Boolean"],"returnType":"String"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.FieldRemapper","methodName":"getFieldForInline","parameters":["FieldInsnNode","StackValue"],"returnType":"StackValue"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InliningContext","methodName":"isRegeneratedAnonymousObject","parameters":["String"],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitorKt","methodName":"getParameterTypesIndicesForCoroutineConstructor","parameters":["String","Int","Boolean","String","LanguageVersionSettings"],"returnType":"Collection"},1,{"pathToFun":"org.jetbrains.kotlin.descriptors.descriptorUtilKt","methodName":"getContinuationOfTypeOrAny","parameters":["ModuleDescriptor","KotlinType","Boolean"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tasks.TracingStrategyForInvoke","methodName":"bindReference","parameters":["BindingTrace","ResolvedCall"],"returnType":"void"},5,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"reportUnsupportedIfNeeded","parameters":["KtDoubleColonExpression","ExpressionTypingContext"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiFactory","methodName":"createProperty","parameters":["String","String","Boolean","String"],"returnType":"KtProperty"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.RedundantLocalsEliminationMethodTransformer","methodName":"removeWithReplacement","parameters":["MethodNode"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.LocalClassDescriptorHolder","methodName":"insideMyClass","parameters":["PsiElement"],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.FakeCallableDescriptorForObject","methodName":"getTypeParameters","parameters":[""],"returnType":"List"},9,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaTypeParameterDescriptor","methodName":"resolveUpperBounds","parameters":[""],"returnType":"List"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.codegenUtilKt","methodName":"generateIsCheck","parameters":["InstructionAdapter","KotlinType","Type","Boolean"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitThisExpression","parameters":["KtThisExpression","Void"],"returnType":"Void"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.range.PrimitiveNumberRangeLiteralRangeValue","methodName":"getBoundedValue","parameters":["ExpressionCodegen"],"returnType":"BoundedValue"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.UnitTypeConversions","methodName":"isUnitOrSubtype","parameters":["KotlinType"],"returnType":"Boolean"},16,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitPrefixExpression","parameters":["KtPrefixExpression","Void"],"returnType":"Void"},4,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"enterLoop","parameters":["KtLoopExpression"],"returnType":"LoopInfo"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"isCompanionObjectAllowed","parameters":[""],"returnType":"boolean"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.MethodNodeExaminer","methodName":"meaningfulPredecessors","parameters":["AbstractInsnNode"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.AbstractCoroutineCodegen","methodName":"createImplMethod","parameters":["String","Pair"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.RedundantLocalsEliminationMethodTransformer","methodName":"findSafeAstorePredecessors","parameters":["MethodNode","ControlFlowGraph","Boolean","(AbstractInsnNode) -> Boolean"],"returnType":"Map"},1,{"pathToFun":"org.jetbrains.kotlin.parsing.AbstractKotlinParsing","methodName":"errorWithRecovery","parameters":["String","TokenSet"],"returnType":"void"},17,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyAnnotationDescriptor","methodName":"forceResolveAllContents","parameters":[""],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.data.KtClassOrObjectInfo","methodName":"getName","parameters":[""],"returnType":"Name"},2,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorForStatements","methodName":"visitForExpression","parameters":["KtForExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.SafeCallFusedWithPrimitiveEqualityBase","methodName":"putSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.VariableLivenessFrame","methodName":"markDead","parameters":["Int"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateIsCheck","parameters":["StackValue","KtTypeReference","boolean"],"returnType":"StackValue"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.range.PrimitiveNumberRangeIntrinsicRangeValue","methodName":"coerceToRangeElementTypeIfRequired","parameters":["StackValue"],"returnType":"StackValue"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.diagnostics.KotlinSuppressCache$SingularSuppressor","methodName":"isSuppressed","parameters":["String","Severity"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"field","parameters":["FieldInfo","StackValue"],"returnType":"Field"},9,{"pathToFun":"org.jetbrains.kotlin.types.FlexibleTypeImpl","methodName":"substitutionResult","parameters":["KotlinType"],"returnType":"KotlinType"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.CallGenerator","methodName":"putValueIfNeeded","parameters":["JvmKotlinType","StackValue"],"returnType":"Unit"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.AbstractInvokeTowerProcessor$VariableInvokeProcessor","methodName":"process","parameters":["TowerData"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$Field","methodName":"changeReceiver","parameters":["StackValue"],"returnType":"StackValueWithSimpleReceiver"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.inlineCodegenUtilsKt","methodName":"isInlineMarker","parameters":["AbstractInsnNode"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.FakeCallableDescriptorForObject","methodName":"getUserData","parameters":["CallableDescriptor.UserDataKey"],"returnType":"V"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.OperatorCallChecker$Companion","methodName":"isWrongCallWithExplicitTypeArguments","parameters":["VariableAsFunctionResolvedCall","Call"],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.callUtil.callUtilKt","methodName":"getParentResolvedCall","parameters":["KtElement?","BindingContext","Boolean"],"returnType":"ResolvedCall"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitThrowExpression","parameters":["KtThrowExpression"],"returnType":"void"},12,{"pathToFun":"org.jetbrains.kotlin.codegen.range.PrimitiveNumberRangeLiteralRangeValueKt","methodName":"canBeSpecializedByExcludingHighBound","parameters":["ExpressionCodegen","ResolvedCall"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.OverloadResolver","methodName":"reportRedeclarations","parameters":["Collection"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemBuilderKt","methodName":"addEqualityConstraintIfCompatible","parameters":["ConstraintSystemBuilder","KotlinTypeMarker","KotlinTypeMarker","ConstraintPosition"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.TemporaryBindingTrace","methodName":"commit","parameters":["TraceEntryFilter","boolean"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.FieldInfo","methodName":"createForSingleton","parameters":["ClassDescriptor","KotlinTypeMapper"],"returnType":"FieldInfo"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateElvis","parameters":["KtBinaryExpression"],"returnType":"StackValue"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.FunctionalArgumentInterpreter","methodName":"merge","parameters":["BasicValue","BasicValue"],"returnType":"BasicValue"},6,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingUtils","methodName":"createDataFlowInfoForArgumentsForIfCall","parameters":["Call","DataFlowInfo","DataFlowInfo","DataFlowInfo"],"returnType":"MutableDataFlowInfoForArguments"},6,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowInformationProvider","methodName":"markAnnotationArguments","parameters":["KtAnnotationEntry"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtAnnotationEntry","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.VariableLivenessFrame","methodName":"isAlive","parameters":["Int"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.PsiInlineCodegen","methodName":"putCapturedValueOnStack","parameters":["StackValue","Type","Int"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.SmartCastDiagnostic","methodName":"report","parameters":["DiagnosticReporter"],"returnType":"Any"},11,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.IgnoringCopyOperationSourceInterpreter","methodName":"copyOperation","parameters":["AbstractInsnNode","SourceValue"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.IdentifierInfo$Qualified","methodName":"equals","parameters":["Any"],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.MemberScopeTowerLevel","methodName":"approximateCapturedTypes","parameters":["CallableDescriptor","TypeApproximator"],"returnType":"CallableDescriptor"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.ControlFlowGraph$Companion","methodName":"build","parameters":["MethodNode","Boolean"],"returnType":"ControlFlowGraph"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.descriptorUtil.AnnotationsWithOnly","methodName":"isEmpty","parameters":[""],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"targetLabel","parameters":["KtExpression"],"returnType":"KtSimpleNameExpression"},2,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingVisitor","methodName":"createLoopParameterDescriptor","parameters":["KtParameter","KotlinType","ExpressionTypingContext"],"returnType":"VariableDescriptor"},2,{"pathToFun":"org.jetbrains.kotlin.types.expressions.PatternMatchingTypingVisitor","methodName":"detectRedundantIs","parameters":["ExpressionTypingContext","KotlinType","KotlinType","KtElement","Boolean","DataFlowValue"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.ConstraintSystemBuilderImpl$Companion","methodName":"forSpecificity","parameters":[""],"returnType":"SimpleConstraintSystem"},2,{"pathToFun":"org.jetbrains.kotlin.load.java.ErasedOverridabilityCondition","methodName":"isOverridable","parameters":["CallableDescriptor","CallableDescriptor","ClassDescriptor"],"returnType":"Result"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitIsExpression","parameters":["KtIsExpression","Void"],"returnType":"Void"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getScopeForCompanionObjectHeaderResolution","parameters":[""],"returnType":"LexicalScope"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.SuspendFunctionGenerationStrategy","methodName":"wrapMethodVisitor","parameters":["MethodVisitor","Int","String","String"],"returnType":"MethodVisitor"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.variableLivenessKt","methodName":"useVar","parameters":["VariableLivenessFrame","AbstractInsnNode","MethodNode","BitSet"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateWhile","parameters":["KtWhileExpression"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.BoxedValueDescriptor","methodName":"getAssociatedInsns","parameters":[""],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.parsing.AbstractKotlinParsing","methodName":"errorAndAdvance","parameters":["String"],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.inlineCodegenUtilsKt","methodName":"isReturnsUnitMarker","parameters":["AbstractInsnNode"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaScope","methodName":"getPropertyType","parameters":["JavaField"],"returnType":"KotlinType"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtClass","methodName":"getCompanionObjects","parameters":[""],"returnType":"List"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitor","methodName":"splitTryCatchBlocksContainingSuspensionPoint","parameters":["MethodNode","SuspensionPoint"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtIsExpression","methodName":"getTypeReference","parameters":[""],"returnType":"KtTypeReference"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.FieldRemapper","methodName":"canProcess","parameters":["String","String","Boolean"],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiUtil","methodName":"isBooleanConstant","parameters":["KtExpression"],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassDescriptor","methodName":"isDefinitelyNotSamInterface","parameters":[""],"returnType":"Boolean"},19,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.refinedIntTypesAnalysisKt","methodName":"isIntStore","parameters":["AbstractInsnNode"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.RedundantLocalsEliminationMethodTransformer","methodName":"simpleRemove","parameters":["MethodNode"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitIsExpression","parameters":["KtIsExpression","StackValue"],"returnType":"StackValue"},2,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.JvmTypeFactoryImpl","methodName":"boxType","parameters":["JvmType"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineCodegenForNamedFunction","methodName":"generateClosureBody","parameters":[""],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxingMethodTransformer","methodName":"adaptInstructionsForBoxedValue","parameters":["MethodNode","BoxedValueDescriptor"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.FakeCallableDescriptorForObject","methodName":"getSource","parameters":[""],"returnType":"SourceElement"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.NamedArgumentReference","methodName":"report","parameters":["DiagnosticReporter"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt","methodName":"getClassObjectReferenceTarget","parameters":["ClassDescriptor"],"returnType":"ClassDescriptor"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.AnnotationChecker","methodName":"getDefaultUseSiteTarget","parameters":["KtAnnotated?","AnnotationDescriptor"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateIsCheck","parameters":["StackValue","KotlinType","boolean"],"returnType":"StackValue"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitThrowExpression","parameters":["KtThrowExpression","Void"],"returnType":"Void"},12,{"pathToFun":"org.jetbrains.kotlin.codegen.codegenUtilKt","methodName":"generateCallReceiver","parameters":["ExpressionCodegen","ResolvedCall"],"returnType":"StackValue"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.OverloadChecker","methodName":"checkOverloadability","parameters":["CallableDescriptor","CallableDescriptor"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.diagnostics.SimpleDiagnostics","methodName":"all","parameters":[""],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"containsError","parameters":["KotlinType"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CandidateResolver","methodName":"isCandidateVisible","parameters":["CallCandidateResolutionContext","ReceiverValue","KotlinType"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingVisitor","methodName":"visitForExpression","parameters":["KtForExpression","ExpressionTypingContext","boolean"],"returnType":"KotlinTypeInfo"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"prepareCoroutineArgumentForSuspendCall","parameters":["ResolvedCall","KtExpression"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.DefaultParameterValueSubstitutor","methodName":"generateOverloadWithSubstitutedParameters","parameters":["FunctionDescriptor","FunctionDescriptor","ClassBuilder","MemberCodegen","KtPureElement","OwnerKind","Int"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.VariableLivenessFrame","methodName":"equals","parameters":["Any"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.CompileTimeConstantUtils","methodName":"canBeReducedToBooleanConstant","parameters":["KtExpression","BindingContext","Boolean"],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.AbstractForInProgressionOrRangeLoopGenerator","methodName":"loopParameter","parameters":[""],"returnType":"StackValue"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtThrowExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},12,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isKClass","parameters":["ClassDescriptor"],"returnType":"boolean"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitorKt","methodName":"isInvisibleInDebugVarInsn","parameters":["AbstractInsnNode?","MethodNode"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtSafeQualifiedExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},3,{"pathToFun":"org.jetbrains.kotlin.contracts.model.functors.FunctorsUtilsKt","methodName":"applyWithDefault","parameters":["F","S","(F, S) -> R"],"returnType":"R"},8,{"pathToFun":"org.jetbrains.kotlin.psi.KtPackageDirective","methodName":"getFqName","parameters":["KtSimpleNameExpression"],"returnType":"FqName"},2,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseThisExpression","parameters":[""],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.AccessorForConstructorDescriptor","methodName":"getContainingDeclaration","parameters":[""],"returnType":"ClassDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitSafeQualifiedExpression","parameters":["KtSafeQualifiedExpression","Void"],"returnType":"Void"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.FlatSignature$Companion","methodName":"createFromCallableDescriptor","parameters":["D"],"returnType":"FlatSignature"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.FakeCallableDescriptorForObject","methodName":"getType","parameters":[""],"returnType":"KotlinType"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineCodegenForNamedFunction","methodName":"generateResumeImpl","parameters":[""],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitor","methodName":"updateMaxStack","parameters":["MethodNode"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitSafeQualifiedExpression","parameters":["KtSafeQualifiedExpression","StackValue"],"returnType":"StackValue"},2,{"pathToFun":"org.jetbrains.kotlin.contracts.model.functors.IsFunctor","methodName":"invokeWithValue","parameters":["ESValue","ESTypeSubstitution"],"returnType":"List"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InlinedLambdaRemapper","methodName":"isMyBoundReceiverForDefaultLambda","parameters":["String","String"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"jumpOnTrue","parameters":["Label","KtElement","PseudoValue"],"returnType":"Unit"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.MethodInliner$Companion","methodName":"findCapturedField","parameters":["FieldInsnNode","FieldRemapper"],"returnType":"CapturedParamInfo"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.DefaultParameterValueSubstitutor","methodName":"getRemainingParameters","parameters":["FunctionDescriptor","Int"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.overridingUtilsKt","methodName":"selectMostSpecificInEachOverridableGroup","parameters":["Collection","H.() -> CallableDescriptor"],"returnType":"Collection"},2,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.types.JavaTypeResolver","methodName":"argumentsMakeSenseOnlyForMutableContainer","parameters":["JavaClassifierType","ClassDescriptor"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.FakeCallableDescriptorForObject","methodName":"getValueParameters","parameters":[""],"returnType":"List"},9,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"computePropertyNames","parameters":["DescriptorKindFilter","((Name) -> Boolean)"],"returnType":"Set"},17,{"pathToFun":"org.jetbrains.kotlin.psi.KtEscapeStringTemplateEntry","methodName":"getUnescapedValue","parameters":[""],"returnType":"String"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.DefaultParameterValueSubstitutor","methodName":"countDefaultParameters","parameters":["FunctionDescriptor"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.coroutineCallCheckerKt","methodName":"findEnclosingSuspendFunction","parameters":["CallCheckerContext","KtElement"],"returnType":"FunctionDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.PreliminaryLoopVisitor$Companion","methodName":"visitLoop","parameters":["KtLoopExpression"],"returnType":"PreliminaryLoopVisitor"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.VariableLivenessFrame","methodName":"markAllAlive","parameters":["BitSet"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.AccessorForConstructorDescriptor","methodName":"getConstructedClass","parameters":[""],"returnType":"ClassDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitThisExpression","parameters":["KtThisExpression","StackValue"],"returnType":"StackValue"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.range.RangeValuesKt","methodName":"getResolvedCallForRangeExpression","parameters":["BindingContext","KtExpression"],"returnType":"ResolvedCall"},2,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ForLoopConventionsChecker","methodName":"checkIterableConvention","parameters":["ExpressionReceiver","ExpressionTypingContext"],"returnType":"KotlinType"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.AnnotationChecker$Companion","methodName":"loadAnnotationTargets","parameters":["AnnotationDescriptor"],"returnType":"Set"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.MethodNodeExaminer","methodName":"meaningfulSuccessors","parameters":["AbstractInsnNode"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.callUtil.callUtilKt","methodName":"getFirstArgumentExpression","parameters":["ResolvedCall"],"returnType":"KtExpression"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.coroutineCallCheckerKt","methodName":"checkRestrictsSuspension","parameters":["CallableDescriptor","ResolvedCall","PsiElement","CallCheckerContext"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.coroutineCodegenUtilKt","methodName":"isBuiltInSuspendCoroutineUninterceptedOrReturnInJvm","parameters":["FunctionDescriptor","LanguageVersionSettings"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.VariableLivenessFrame","methodName":"markAlive","parameters":["Int"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitForExpression","parameters":["KtForExpression","D"],"returnType":"R"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitThrowExpression","parameters":["KtThrowExpression","StackValue"],"returnType":"StackValue"},12,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitLambdaExpression","parameters":["KtLambdaExpression","StackValue"],"returnType":"StackValue"},17,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.RedundantLocalsEliminationMethodTransformer","methodName":"localIndex","parameters":["AbstractInsnNode"],"returnType":"Int"},1,{"pathToFun":"org.jetbrains.kotlin.descriptors.annotations.KotlinTarget$Companion","methodName":"valueOrNull","parameters":["String"],"returnType":"KotlinTarget"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.FieldRemapper","methodName":"findField","parameters":["FieldInsnNode","Collection"],"returnType":"CapturedParamInfo"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxingMethodTransformer","methodName":"adaptLocalVariableTableForBoxedValues","parameters":["MethodNode","Array"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.MutableClosure","methodName":"setSuspend","parameters":["boolean"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.inlineCodegenUtilsKt","methodName":"isBeforeSuspendMarker","parameters":["AbstractInsnNode"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.context.ClosureContext","methodName":"getOriginalSuspendLambdaDescriptor","parameters":[""],"returnType":"FunctionDescriptor"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.AbstractForLoopGenerator","methodName":"beforeLoop","parameters":[""],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.coroutineCodegenUtilKt","methodName":"getOrCreateJvmSuspendFunctionView","parameters":["D","Boolean","BindingContext"],"returnType":"D"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.RangeCodegenUtilKt","methodName":"getElementType","parameters":["BindingContext","KtForExpression"],"returnType":"KotlinType"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"isPrimitiveNumberClassDescriptor","parameters":["DeclarationDescriptor"],"returnType":"boolean"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.SMAPBuilder","methodName":"toSMAPFile","parameters":["FileMapping","Int"],"returnType":"String"},6,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.typeEnhancementKt","methodName":"enhancedMutability","parameters":["T"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.contracts.model.functors.AndFunctor","methodName":"invokeWithReturningEffects","parameters":["List","List"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.MethodNodeExaminer","methodName":"allSuspensionPointsAreTailCalls","parameters":["List"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"enterLoop","parameters":["KtLoopExpression"],"returnType":"LoopInfo"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.OverloadResolver","methodName":"isExpectDeclarationAndDefinition","parameters":["DeclarationDescriptor","DeclarationDescriptor"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.variableLivenessKt","methodName":"isInvisibleDebuggerVariable","parameters":["String"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.inline.inlineOnlyKt","methodName":"isEffectivelyInlineOnly","parameters":["MemberDescriptor"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.SuspendFunctionGenerationStrategy","methodName":"createStateMachineBuilder","parameters":["MethodVisitor","Int","String","String"],"returnType":"CoroutineTransformerMethodVisitor"},1,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseWhile","parameters":[""],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiUtil","methodName":"isTrueConstant","parameters":["KtExpression"],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"generateLoopConventionCall","parameters":["KtExpression","ReadOnlySlice"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.types.TypeUtils","methodName":"dependsOnTypeConstructors","parameters":["KotlinType","Collection"],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.contracts.model.functors.IsFunctor","methodName":"doInvocation","parameters":["List","ESTypeSubstitution","Reducer"],"returnType":"List"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"createDefaultPrimitiveValue","parameters":["Type"],"returnType":"StackValue"},1,{"pathToFun":"org.jetbrains.kotlin.psi.psiUtil.psiUtilsKt","methodName":"forEachDescendantOfType","parameters":["PsiElement","(T) -> Unit"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.JvmAbi","methodName":"isMappedIntrinsicCompanionObject","parameters":["ClassDescriptor"],"returnType":"boolean"},4,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isBoolean","parameters":["ClassDescriptor"],"returnType":"boolean"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.FieldInfo","methodName":"createForHiddenField","parameters":["Type","Type","String"],"returnType":"FieldInfo"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.ChangeBoxingMethodTransformer","methodName":"transform","parameters":["String","MethodNode"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"visitObjectDeclaration","parameters":["KtObjectDeclaration"],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitIsExpression","parameters":["KtIsExpression"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.inlineCodegenUtilsKt","methodName":"addSuspendMarker","parameters":["InstructionAdapter","Boolean","Boolean"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.EnhancedTypeAnnotations","methodName":"findAnnotation","parameters":["FqName"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"jumpOnTrue","parameters":["Label","KtElement","PseudoValue"],"returnType":"Unit"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.inlineCodegenUtilsKt","methodName":"isAfterSuspendMarker","parameters":["AbstractInsnNode"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitWhileExpression","parameters":["KtWhileExpression","Void"],"returnType":"Void"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.RedundantLocalsEliminationMethodTransformer","methodName":"transform","parameters":["String","MethodNode"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.descriptorUtil.annotationsForResolveKt","methodName":"getExactInAnnotations","parameters":[""],"returnType":"Annotations"},2,{"pathToFun":"org.jetbrains.kotlin.parsing.ParseUtilsKt","methodName":"parseBoolean","parameters":["String"],"returnType":"Boolean"},6,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaScope","methodName":"resolveProperty","parameters":["JavaField"],"returnType":"PropertyDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.coroutineCodegenUtilKt","methodName":"createMethodNodeForSuspendCoroutineUninterceptedOrReturn","parameters":["LanguageVersionSettings"],"returnType":"MethodNode"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.ArgumentsToParametersMapper$CallArgumentProcessor","methodName":"getParameterByName","parameters":["Name"],"returnType":"ValueParameterDescriptor"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.AbstractForLoopGenerator","methodName":"beforeBody","parameters":[""],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.variableLivenessKt","methodName":"defVar","parameters":["VariableLivenessFrame","AbstractInsnNode"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.ArgumentsToParametersMapper$CallArgumentProcessor","methodName":"findParameterByName","parameters":["KotlinCallArgument","Name"],"returnType":"ValueParameterDescriptor"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.range.PrimitiveNumberRangeLiteralRangeValue","methodName":"createConstBoundedForInRangeLiteralGenerator","parameters":["ExpressionCodegen","KtForExpression"],"returnType":"ForLoopGenerator"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.diagnostics.MutableDiagnosticsWithSuppression","methodName":"noSuppression","parameters":[""],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.ArgumentsToParametersMapper$CallArgumentProcessor","methodName":"processNamedArgument","parameters":["KotlinCallArgument","Name"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtAnnotationEntry","methodName":"getTypeArgumentList","parameters":[""],"returnType":"KtTypeArgumentList"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitorKt","methodName":"getParameterTypesForCoroutineConstructor","parameters":["String","Boolean","String"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.backwardAnalysisKt","methodName":"analyze","parameters":["MethodNode","BackwardAnalysisInterpreter"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"indexOfLocalNotDelegated","parameters":["KtReferenceExpression"],"returnType":"int"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitorKt","methodName":"isUnreachable","parameters":["Int","Array"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.diagnostics.DiagnosticsElementsCache","methodName":"buildElementToDiagnosticCache","parameters":["Diagnostics","Function1"],"returnType":"MultiMap"},4,{"pathToFun":"org.jetbrains.kotlin.descriptors.annotations.TargetedAnnotations","methodName":"iterator","parameters":[""],"returnType":"Iterator"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxingMethodTransformer","methodName":"adaptInstruction","parameters":["MethodNode","AbstractInsnNode","BoxedValueDescriptor"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluator","methodName":"getAnnotationArgumentValue","parameters":["BindingTrace","ValueParameterDescriptor","ResolvedValueArgument"],"returnType":"ConstantValue"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.UtilKt","methodName":"removeAll","parameters":["InsnList","Collection"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.types.ErrorUtils","methodName":"containsErrorTypeInParameters","parameters":["FunctionDescriptor"],"returnType":"boolean"},2,{"pathToFun":"org.jetbrains.kotlin.contracts.model.visitors.Reducer","methodName":"visitIs","parameters":["ESIs"],"returnType":"ESExpression"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitor","methodName":"performTransformations","parameters":["MethodNode"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassDescriptor$LazyJavaClassTypeConstructor","methodName":"isDenotable","parameters":[""],"returnType":"Boolean"},20,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.RedundantLocalsEliminationMethodTransformerKt","methodName":"findSourceInstructions","parameters":["String","MethodNode","Collection","Boolean"],"returnType":"Map"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.PopBackwardPropagationTransformer$Transformer","methodName":"insertPopAfterTransformation","parameters":["Int"],"returnType":"Transformation"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitEscapeStringTemplateEntry","parameters":["KtEscapeStringTemplateEntry","D"],"returnType":"R"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.refinedIntTypesAnalysisKt","methodName":"rangeContainsInsn","parameters":["LocalVariableNode","Int","InsnList"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.SourceMapper","methodName":"mapSyntheticLineNumber","parameters":["Int"],"returnType":"Int"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.AbstractForLoopGenerator","methodName":"afterLoop","parameters":[""],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitor","methodName":"spillVariables","parameters":["List","MethodNode"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.descriptors.descriptorUtilKt","methodName":"findContinuationClassDescriptorOrNull","parameters":["ModuleDescriptor","LookupLocation","Boolean"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"shouldGenerateSingletonAsThisOrOuterFromContext","parameters":["ClassDescriptor"],"returnType":"boolean"},9,{"pathToFun":"org.jetbrains.kotlin.types.AbbreviatedType","methodName":"replaceAnnotations","parameters":["Annotations"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.ForInSimpleProgressionLoopGenerator","methodName":"checkPostConditionAndIncrement","parameters":["Label"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitThrowExpression","parameters":["KtThrowExpression","D"],"returnType":"R"},12,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitor","methodName":"checkForSuspensionPointInsideMonitor","parameters":["MethodNode","List"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorForStatements","methodName":"visitWhileExpression","parameters":["KtWhileExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.BranchedValue$Companion","methodName":"createInvertValue","parameters":["StackValue"],"returnType":"StackValue"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitSafeQualifiedExpression","parameters":["KtSafeQualifiedExpression","D"],"returnType":"R"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.coroutineCodegenUtilKt","methodName":"getOrCreateJvmSuspendFunctionView","parameters":["D","GenerationState"],"returnType":"D"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiFactory","methodName":"createSimpleName","parameters":["String"],"returnType":"KtSimpleNameExpression"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"genCmpSafeCallToPrimitive","parameters":["KtSafeQualifiedExpression","KtExpression","Type","IElementType"],"returnType":"StackValue"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.NonExpansiveInheritanceRestrictionChecker$GraphBuilder","methodName":"addEdge","parameters":["TypeParameterDescriptor","TypeParameterDescriptor","Boolean"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.RedundantLocalsEliminationMethodTransformer","methodName":"removeAloadCheckcastContinuationAstore","parameters":["MethodNode","LanguageVersionSettings"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.diagnostics.SimpleDiagnostics","methodName":"forElement","parameters":["PsiElement"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluator","methodName":"checkInnerPartsOfCompileTimeConstant","parameters":["CompileTimeConstant","BindingTrace","KtExpression","Boolean"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitForExpression","parameters":["KtForExpression"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtThisExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},3,{"pathToFun":"org.jetbrains.kotlin.types.FlexibleTypeImpl","methodName":"makeNullableAsSpecified","parameters":["Boolean"],"returnType":"UnwrappedType"},17,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitor","methodName":"dropSuspensionMarkers","parameters":["MethodNode"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingVisitor","methodName":"processIfBranches","parameters":["KtIfExpression","ExpressionTypingContext","DataFlowInfo","boolean","KtExpression","KtExpression","ResolvedCall"],"returnType":"KotlinTypeInfo"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxingMethodTransformer","methodName":"removeValuesClashingWithVariables","parameters":["RedundantBoxedValuesCollection","MethodNode","Array"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"getOuterExpression","parameters":["StackValue","boolean"],"returnType":"StackValue"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.codegenUtilKt","methodName":"populateCompanionBackingFieldNamesToOuterContextIfNeeded","parameters":["KtObjectDeclaration","FieldOwnerContext","GenerationState"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.codegenUtilKt","methodName":"generateCallSingleArgument","parameters":["ExpressionCodegen","ResolvedCall"],"returnType":"StackValue"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.descriptors.JavaClassConstructorDescriptor","methodName":"setHasSynthesizedParameterNames","parameters":["boolean"],"returnType":"void"},17,{"pathToFun":"org.jetbrains.kotlin.psi.KtAnnotationEntry","methodName":"getCalleeExpression","parameters":[""],"returnType":"KtConstructorCalleeExpression"},1,{"pathToFun":"org.jetbrains.kotlin.util.ValueParameterCountCheck$NoValueParameters","methodName":"check","parameters":["FunctionDescriptor"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.inlineCodegenUtilsKt","methodName":"emitInlineMarker","parameters":["InstructionAdapter","Int"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getContextForCompanionObjectAccessorIfRequiredOrNull","parameters":["ClassDescriptor","CodegenContext"],"returnType":"CodegenContext"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.PsiExpressionLambda","methodName":"isCapturedSuspend","parameters":["CapturedParamDesc"],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.contracts.model.functors.IsFunctor","methodName":"invokeWithArguments","parameters":["Computation","ESTypeSubstitution"],"returnType":"List"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtAnnotationEntry","methodName":"getTypeArguments","parameters":[""],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.types.KotlinTypeFactory","methodName":"simpleType","parameters":["SimpleType","Annotations","TypeConstructor","List","Boolean"],"returnType":"SimpleType"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitForExpression","parameters":["KtForExpression","Void"],"returnType":"Void"},2,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"isFinalClassOrEnumEntryOrAnnotationClassConstructor","parameters":["TypeConstructorMarker"],"returnType":"Boolean"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.callResolverUtil.CallResolverUtilKt","methodName":"getEffectiveExpectedType","parameters":["ValueParameterDescriptor","ResolvedValueArgument","LanguageVersionSettings","BindingTrace"],"returnType":"KotlinType"},1,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractTypeAliasDescriptor","methodName":"isActual","parameters":[""],"returnType":"Boolean"},12,{"pathToFun":"org.jetbrains.kotlin.resolve.diagnostics.DiagnosticsElementsCache","methodName":"compute","parameters":[""],"returnType":"MultiMap"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.ForInSimpleProgressionLoopGenerator","methodName":"checkPreCondition","parameters":["Label"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.BranchedValue$Companion","methodName":"putSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.Nullability","methodName":"and","parameters":["Nullability"],"returnType":"Nullability"},6,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaScope","methodName":"createPropertyDescriptor","parameters":["JavaField"],"returnType":"PropertyDescriptorImpl"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.ControlFlowGraph","methodName":"getSuccessorsIndices","parameters":["Int"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.PatternMatchingTypingVisitor","methodName":"visitIsExpression","parameters":["KtIsExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxingMethodTransformer","methodName":"getValuesStoredOrLoadedToVariable","parameters":["LocalVariableNode","MethodNode","Array"],"returnType":"List"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitor","methodName":"writeDebugMetadata","parameters":["MethodNode","List","List"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.MySourceInterpreter","methodName":"copyOperation","parameters":["AbstractInsnNode","SourceValue"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.util.ReturnsCheck","methodName":"check","parameters":["FunctionDescriptor"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.AbstractForInRangeLoopGenerator","methodName":"incrementLoopVariable","parameters":[""],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.FieldInfo","methodName":"isStatic","parameters":[""],"returnType":"boolean"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.BranchedValue$Companion","methodName":"loopJump","parameters":["StackValue","Label","Boolean","InstructionAdapter"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.AbstractClassBuilder","methodName":"visitSMAP","parameters":["SourceMapper","boolean"],"returnType":"void"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxingMethodTransformer","methodName":"buildVariablesRemapping","parameters":["RedundantBoxedValuesCollection","MethodNode"],"returnType":"IntArray"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.signature.JvmSignatureWriter","methodName":"getCurrentSignatureSize","parameters":[""],"returnType":"int"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtPrefixExpression","methodName":"getBaseExpression","parameters":[""],"returnType":"KtExpression"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.PSICallResolver$FactoryProviderForInvoke","methodName":"createReceiverValueWithSmartCastInfo","parameters":["KotlinResolutionCandidate"],"returnType":"ReceiverValueWithSmartCastInfo"},4,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseAnnotationTargetIfNeeded","parameters":["AnnotationParsingMode"],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitPrefixExpression","parameters":["KtPrefixExpression"],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.UnitTypeConversions","methodName":"isUnitOrSubtypeOrVariable","parameters":["KotlinType","ConstraintSystemOperation"],"returnType":"Boolean"},14,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.DataFlowInfoImpl","methodName":"makeReallyNotNullIfNeeded","parameters":["KotlinType","LanguageVersionSettings"],"returnType":"KotlinType"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateForLoop","parameters":["ForLoopGenerator"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher","methodName":"visitIsExpression","parameters":["KtIsExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtFunctionType","methodName":"getReturnTypeReference","parameters":[""],"returnType":"KtTypeReference"},15,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.ForInSimpleProgressionLoopGenerator","methodName":"storeRangeStartAndEnd","parameters":[""],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitorKt","methodName":"getAllParameterTypes","parameters":["String","Boolean","String"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.MaxLocalsCalculator","methodName":"visitIincInsn","parameters":["int","int"],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitForExpression","parameters":["KtForExpression"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitor","methodName":"removeFakeContinuationConstructorCall","parameters":["MethodNode"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isChar","parameters":["KotlinType"],"returnType":"boolean"},2,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"visitBooleanOperationExpression","parameters":["IElementType","KtExpression","KtExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},8,{"pathToFun":"org.jetbrains.kotlin.contracts.model.functors.AbstractBinaryFunctor","methodName":"doInvocation","parameters":["List","ESTypeSubstitution","Reducer"],"returnType":"List"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"genIncrement","parameters":["Type","int","InstructionAdapter"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitWhileExpression","parameters":["KtWhileExpression"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.inlineCodegenUtilsKt","methodName":"isCapturedFieldName","parameters":["String"],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.AbstractForInRangeLoopGenerator","methodName":"assignToLoopParameter","parameters":[""],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtValueArgumentName","methodName":"getReferenceExpression","parameters":[""],"returnType":"KtSimpleNameExpression"},2,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.inlineClassMappingKt","methodName":"shouldUseUnderlyingType","parameters":["KotlinType"],"returnType":"Boolean"},6,{"pathToFun":"org.jetbrains.kotlin.psi.KtLoopExpression","methodName":"getBody","parameters":[""],"returnType":"KtExpression"},2,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl","methodName":"initialize","parameters":["PropertyGetterDescriptorImpl","PropertySetterDescriptor"],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.range.PrimitiveNumberRangeLiteralRangeValueKt","methodName":"isArraySizeMinusOne","parameters":["ExpressionCodegen","KtExpression"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"declareLoopParameter","parameters":["KtForExpression"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitor","methodName":"replaceReturnsUnitMarkersWithPushingUnitOnStack","parameters":["MethodNode"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.AnnotationChecker$Companion","methodName":"applicableTargetSet","parameters":["AnnotationDescriptor"],"returnType":"Set"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.MethodNodeExaminer","methodName":"replacePopsBeforeSafeUnitInstancesWithCoroutineSuspendedChecks","parameters":[""],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.FunctionDescriptorImpl","methodName":"getSubstitutedValueParameters","parameters":["FunctionDescriptor","List","TypeSubstitutor"],"returnType":"List"},12,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.ClassResolutionScopesSupport","methodName":"packScopesOfCompanionSupertypes","parameters":["ClassDescriptor","LexicalScope","DeclarationDescriptor"],"returnType":"LexicalScope"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.MemberCodegen","methodName":"genClassOrObject","parameters":["KtClassOrObject"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitLoopExpression","parameters":["KtLoopExpression","Void"],"returnType":"Void"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtSimpleNameExpressionImpl","methodName":"getReferencedNameAsName","parameters":[""],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallExpressionResolver","methodName":"recordResultTypeInfo","parameters":["KtQualifiedExpression","KotlinTypeInfo","ExpressionTypingContext"],"returnType":"Unit"},9,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitThisExpression","parameters":["KtThisExpression"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$ComplexReceiver","methodName":"putSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"void"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateFor","parameters":["KtForExpression"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.ControlFlowGraph","methodName":"getPredecessorsIndices","parameters":["Int"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"genCoroutineInstanceForSuspendLambda","parameters":["FunctionDescriptor"],"returnType":"StackValue"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"genCmpWithNull","parameters":["KtExpression","IElementType","StackValue"],"returnType":"StackValue"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.refinedIntTypesAnalysisKt","methodName":"findContainingVariableFromTable","parameters":["MethodNode","AbstractInsnNode","Int"],"returnType":"LocalVariableNode"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.refinedIntTypesAnalysisKt","methodName":"performRefinedTypeAnalysis","parameters":["MethodNode","String"],"returnType":"Array"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitFunctionType","parameters":["KtFunctionType","D"],"returnType":"R"},15,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$SafeFallback","methodName":"putSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"numConst","parameters":["int","Type","InstructionAdapter"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper$Companion","methodName":"writeParameter","parameters":["JvmSignatureWriter","JvmMethodParameterKind","Type"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.IdentifierInfoKt","methodName":"postfix","parameters":["IdentifierInfo","KtToken"],"returnType":"IdentifierInfo"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.MethodAnalyzer","methodName":"newFrame","parameters":["Int","Int"],"returnType":"Frame"},1,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"upperBound","parameters":["FlexibleTypeMarker"],"returnType":"SimpleTypeMarker"},21,{"pathToFun":"org.jetbrains.kotlin.types.TypeConstructorSubstitution$Companion","methodName":"createByParametersMap","parameters":["Map"],"returnType":"TypeConstructorSubstitution"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$OnStack","methodName":"moveToTopOfStack","parameters":["Type","KotlinType","InstructionAdapter","int"],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.ClassDeclaredMemberIndex","methodName":"findFieldByName","parameters":["Name"],"returnType":"JavaField"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InlineCodegen$Companion","methodName":"createDefaultFakeSMAP","parameters":[""],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.diagnostics.DiagnosticsElementsCache","methodName":"getDiagnostics","parameters":["PsiElement"],"returnType":"Collection"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.MethodNodeExaminer","methodName":"findSafelyReachableReturns","parameters":[""],"returnType":"Array"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitIsExpression","parameters":["KtIsExpression","D"],"returnType":"R"},2,{"pathToFun":"org.jetbrains.kotlin.builtins.ReflectionTypes","methodName":"getKSuspendFunction","parameters":["Int"],"returnType":"ClassDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.contracts.model.functors.FunctorsUtilsKt","methodName":"applyIfBothNotNull","parameters":["F","S","(F, S) -> R"],"returnType":"R"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getOrCreateCallGeneratorForDefaultImplBody","parameters":["FunctionDescriptor","KtNamedFunction"],"returnType":"CallGenerator"},7,{"pathToFun":"org.jetbrains.kotlin.contracts.model.functors.AbstractBinaryFunctor","methodName":"foldConditionsWithOr","parameters":["List"],"returnType":"ESExpression"},8,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"asDynamicType","parameters":["FlexibleTypeMarker"],"returnType":"DynamicTypeMarker"},13,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.MethodInliner","methodName":"isAnonymousClassThatMustBeRegenerated","parameters":["Type"],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.SubstitutingScope","methodName":"getClassifierNames","parameters":[""],"returnType":"Any"},6,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaScope","methodName":"getContributedVariables","parameters":["Name","LookupLocation"],"returnType":"Collection"},17,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineCodegenKt","methodName":"isCapturedSuspendLambda","parameters":["ClassDescriptor","String","BindingContext"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor","methodName":"visitElvisExpression","parameters":["KtBinaryExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.diagnostics.KotlinSuppressCache","methodName":"processAnnotation","parameters":["ImmutableSet.Builder","AnnotationDescriptor"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher","methodName":"visitThrowExpression","parameters":["KtThrowExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},12,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getContinuationParameterFromEnclosingSuspendFunctionDescriptor","parameters":["FunctionDescriptor"],"returnType":"StackValue"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.SuspendFunctionGenerationStrategy","methodName":"containingClassInternalNameOrNull","parameters":[""],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseFunctionLiteral","parameters":[""],"returnType":"void"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.PSICallResolver$FactoryProviderForInvoke","methodName":"transformCandidate","parameters":["KotlinResolutionCandidate","KotlinResolutionCandidate"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.AbstractForInRangeLoopGenerator","methodName":"checkPostConditionAndIncrement","parameters":["Label"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtFunctionType","methodName":"getReceiver","parameters":[""],"returnType":"KtFunctionTypeReceiver"},15,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.MutableClassDescriptor","methodName":"isInner","parameters":[""],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitorKt","methodName":"getLastParameterIndex","parameters":["String","Int"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.types.FlexibleType","methodName":"sameTypeConstructor","parameters":["KotlinType"],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionCodegen","methodName":"genDefaultSuperCallCheckIfNeeded","parameters":["InstructionAdapter","FunctionDescriptor","Method"],"returnType":"void"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedCallImpl","methodName":"getSmartCastDispatchReceiverType","parameters":[""],"returnType":"KotlinType"},1,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isUInt","parameters":["KotlinType"],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.OverloadChecker","methodName":"isOverloadable","parameters":["DeclarationDescriptor","DeclarationDescriptor"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.BindingContext","methodName":"computeValue","parameters":["SlicedMap","KtLambdaExpression","Boolean","boolean"],"returnType":"Boolean"},17,{"pathToFun":"org.jetbrains.kotlin.codegen.And","methodName":"condJump","parameters":["Label","InstructionAdapter","Boolean"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.inlineCodegenUtilsKt","methodName":"addReturnsUnitMarker","parameters":["InstructionAdapter"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitorKt","methodName":"isStatic","parameters":["Int"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.VarExpectedTypeFrame","methodName":"equals","parameters":["Any"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ForLoopConventionsChecker","methodName":"checkConventionForIterator","parameters":["ExpressionTypingContext","KtExpression","KotlinType","Name","DiagnosticFactory1","DiagnosticFactory1","DiagnosticFactory1","WritableSlice"],"returnType":"KotlinType"},2,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.types.JavaTypeResolver","methodName":"transformArrayType","parameters":["JavaArrayType","JavaTypeAttributes","Boolean"],"returnType":"KotlinType"},3,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"getSuspendFunction","parameters":["int"],"returnType":"ClassDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.contracts.model.structure.ESConstant","methodName":"hashCode","parameters":[""],"returnType":"Int"},5,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.instructions.jumps.ThrowExceptionInstruction","methodName":"accept","parameters":["InstructionVisitor"],"returnType":"Unit"},12,{"pathToFun":"org.jetbrains.kotlin.psi.KtIsExpression","methodName":"isNegated","parameters":[""],"returnType":"boolean"},2,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"throwException","parameters":["KtThrowExpression","PseudoValue"],"returnType":"Unit"},12,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getNotNullParentContextForMethod","parameters":["CodegenContext"],"returnType":"CodegenContext"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxingMethodTransformer","methodName":"adaptBoxingInstruction","parameters":["MethodNode","BoxedValueDescriptor"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.FakeCallableDescriptorForObject","methodName":"hashCode","parameters":[""],"returnType":"Any"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateSafeQualifiedExpression","parameters":["KtSafeQualifiedExpression","Label"],"returnType":"StackValue"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.AbstractForLoopGenerator","methodName":"createLoopTempVariable","parameters":["Type"],"returnType":"Int"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitor","methodName":"getLabel","parameters":["InstructionAdapter"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.ModifiersChecker\\$DetailedClassKind","methodName":"getClassKind","parameters":["ClassDescriptor"],"returnType":"DetailedClassKind"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.MethodNodeExaminer","methodName":"meaningfulSuccessorsOrPredecessors","parameters":["AbstractInsnNode","Boolean"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtIsExpression","methodName":"getOperationReference","parameters":[""],"returnType":"KtSimpleNameExpression"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"singleton","parameters":["ClassDescriptor","KotlinTypeMapper"],"returnType":"Field"},9,{"pathToFun":"org.jetbrains.kotlin.psi.KtFunctionType","methodName":"getParameterList","parameters":[""],"returnType":"KtParameterList"},15,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"visitEscapeStringTemplateEntry","parameters":["KtEscapeStringTemplateEntry","Nothing"],"returnType":"TypedCompileTimeConstant"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtAnnotationEntry","methodName":"getValueArguments","parameters":[""],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.DiagnosticReporterByTrackingStrategy","methodName":"reportSmartCast","parameters":["SmartCastDiagnostic"],"returnType":"Unit"},11,{"pathToFun":"org.jetbrains.kotlin.resolve.checkers.ExperimentalMarkerDeclarationAnnotationChecker","methodName":"checkEntries","parameters":["List","List","BindingTrace"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitor","methodName":"findSuspensionPointLineNumber","parameters":["SuspensionPoint"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.FakeCallableDescriptorForObject","methodName":"getReturnType","parameters":[""],"returnType":"KotlinType"},9,{"pathToFun":"org.jetbrains.kotlin.load.java.descriptors.JavaClassConstructorDescriptor","methodName":"hasStableParameterNames","parameters":[""],"returnType":"boolean"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.OverloadChecker","methodName":"getDeclarationCategory","parameters":["DeclarationDescriptor"],"returnType":"DeclarationCategory"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.SmartCastManager$Companion","methodName":"recordCastOrError","parameters":["KtExpression","KotlinType","BindingTrace","DataFlowValue","Call","Boolean"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.range.PrimitiveNumberRangeIntrinsicRangeValue","methodName":"createConstBoundedForLoopGeneratorOrNull","parameters":["ExpressionCodegen","KtForExpression","StackValue","KtExpression","Int","Boolean"],"returnType":"ForLoopGenerator"},1,{"pathToFun":"org.jetbrains.kotlin.parsing.AbstractKotlinParsing","methodName":"advance","parameters":["int"],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.checkers.SuspendLimitationsCheckerKt","methodName":"isKotlinTestAnnotation","parameters":["AnnotationDescriptor"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl","methodName":"isActual","parameters":[""],"returnType":"boolean"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtPrefixExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},4,{"pathToFun":"org.jetbrains.kotlin.parsing.AbstractKotlinParsing","methodName":"errorAndAdvance","parameters":["String","int"],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.range.comparison.ComparisonGeneratorKt","methodName":"getComparisonGeneratorForKotlinType","parameters":["KotlinType"],"returnType":"ComparisonGenerator"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.AnnotationChecker","methodName":"checkAnnotationEntry","parameters":["KtAnnotationEntry","TargetList","BindingTrace"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtForExpression","methodName":"getDestructuringDeclaration","parameters":[""],"returnType":"KtDestructuringDeclaration"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InlinedLambdaRemapper","methodName":"canProcess","parameters":["String","String","Boolean"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.CompileTimeConstantChecker","methodName":"translateEscape","parameters":["char"],"returnType":"Character"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.MethodNodeExaminer","methodName":"index","parameters":["AbstractInsnNode"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitThisExpression","parameters":["KtThisExpression","D"],"returnType":"R"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"releaseCoroutines","parameters":[""],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseFunctionTypeValueParameterModifierList","parameters":[""],"returnType":"boolean"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.DiagnosticReporterByTrackingStrategy","methodName":"onCallArgumentName","parameters":["KotlinCallArgument","KotlinCallDiagnostic"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.OverridingUtil","methodName":"isAccessorMoreSpecific","parameters":["PropertyAccessorDescriptor","PropertyAccessorDescriptor"],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.FakeCallableDescriptorForObject","methodName":"getContainingDeclaration","parameters":[""],"returnType":"Any"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.typeBinding.TypeBindingKt","methodName":"createTypeArgumentBindingsWithSinglePsiElement","parameters":["KotlinType","(KotlinType) -> TypeBinding"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallTransformer\\$CallForImplicitInvoke","methodName":"getExplicitReceiver","parameters":[""],"returnType":"Receiver"},5,{"pathToFun":"org.jetbrains.kotlin.types.AbbreviatedType","methodName":"makeNullableAsSpecified","parameters":["Boolean"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxingMethodTransformer","methodName":"adaptInstructionsForBoxedValues","parameters":["MethodNode","RedundantBoxedValuesCollection"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluator","methodName":"isArrayPassedInNamedForm","parameters":["List","ResolvedValueArgument"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.StackTransformationUtilsKt","methodName":"removeAlwaysFalseIfeq","parameters":["MethodNode","AbstractInsnNode"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.FakeCallableDescriptorForObject","methodName":"equals","parameters":["Any"],"returnType":"Any"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.AbstractCoroutineCodegen","methodName":"generateConstructor","parameters":[""],"returnType":"Method"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitFunctionType","parameters":["KtFunctionType","Void"],"returnType":"Void"},15,{"pathToFun":"org.jetbrains.kotlin.psi.KtFunctionType","methodName":"getTypeArgumentsAsTypes","parameters":[""],"returnType":"List"},14,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionCodegen","methodName":"generateDefaultImplBody","parameters":["MethodContext","FunctionDescriptor","MethodVisitor","DefaultParameterValueLoader","KtNamedFunction","MemberCodegen","Method"],"returnType":"void"},7,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateCompanionObjectInstance","parameters":["ClassDescriptor"],"returnType":"StackValue"},6,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.instructions.InstructionVisitor","methodName":"visitThrowExceptionInstruction","parameters":["ThrowExceptionInstruction"],"returnType":"Unit"},12,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"exitLoopBody","parameters":["KtLoopExpression"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.coroutineCodegenUtilKt","methodName":"dataFieldName","parameters":["LanguageVersionSettings"],"returnType":"String"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineCodegenForNamedFunction","methodName":"generateBridges","parameters":[""],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.OverloadResolver","methodName":"isSynthesized","parameters":["DeclarationDescriptor"],"returnType":"Any"},7,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DataFlowAnalyzer","methodName":"checkPossibleCast","parameters":["KotlinType","KtExpression","ResolutionContext"],"returnType":"SmartCastResult"},2,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"tryParseValueParameter","parameters":["boolean"],"returnType":"boolean"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.MethodNodeExaminer","methodName":"isAreturnAfterSafeUnitInstance","parameters":["AbstractInsnNode"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.CapturingInClosureChecker","methodName":"isCrossinlineParameter","parameters":["BindingContext","KtFunction"],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DeclarationScopeProviderForLocalClassifierAnalyzer","methodName":"getOuterDataFlowInfoForDeclaration","parameters":["PsiElement"],"returnType":"DataFlowInfo"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.inlineCodegenUtilsKt","methodName":"addReturnsUnitMarkerIfNecessary","parameters":["InstructionAdapter","ResolvedCall"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.OverloadResolver","methodName":"isDefinitionsForDifferentPlatforms","parameters":["DeclarationDescriptorNonRoot","DeclarationDescriptorNonRoot"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.ClassDeclaredMemberIndex","methodName":"getFieldNames","parameters":[""],"returnType":"Set"},17,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseLoopBody","parameters":[""],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.PropertyDescriptorImpl","methodName":"createSubstitutedCopy","parameters":["DeclarationDescriptor","Modality","Visibility","PropertyDescriptor","Kind","Name","SourceElement"],"returnType":"PropertyDescriptorImpl"},2,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.TypeMappingMode","methodName":"dontWrapInlineClassesMode","parameters":[""],"returnType":"TypeMappingMode"},6,{"pathToFun":"org.jetbrains.kotlin.psi.KtElementImplStub","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},2,{"pathToFun":"org.jetbrains.kotlin.cfg.pseudocode.ControlFlowInstructionsGenerator$ControlFlowInstructionsGeneratorWorker","methodName":"enterLoopBody","parameters":["KtLoopExpression"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.FakeCallableDescriptorForObject","methodName":"getExtensionReceiverParameter","parameters":[""],"returnType":"ReceiverParameterDescriptor"},9,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"atTargetKeyword","parameters":[""],"returnType":"KtKeywordToken"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.pseudoInsns.PseudoInsnsKt","methodName":"fakeAlwaysFalseIfeq","parameters":["InstructionAdapter","Label"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingVisitor","methodName":"visitWhileExpression","parameters":["KtWhileExpression","ExpressionTypingContext","boolean"],"returnType":"KotlinTypeInfo"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.BoxedValueDescriptor","methodName":"isFromProgressionIterator","parameters":[""],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.MutableClosure","methodName":"setCapturedParameterOffsetInConstructor","parameters":["DeclarationDescriptor","int"],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.builtins.suspendFunctionTypesKt","methodName":"transformSuspendFunctionToRuntimeFunctionType","parameters":["KotlinType","Boolean"],"returnType":"SimpleType"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.MutableClosure","methodName":"setNeedsCaptureOuterClass","parameters":[""],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxingInterpreter","methodName":"onUnboxing","parameters":["AbstractInsnNode","BoxedBasicValue","Type"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.typeBinding.TypeBindingKt","methodName":"createTypeBindingForReturnType","parameters":["KtCallableDeclaration","BindingContext"],"returnType":"TypeBinding"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtForExpression","methodName":"getLoopRange","parameters":[""],"returnType":"KtExpression"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.ForInSimpleProgressionLoopGenerator","methodName":"checkEmptyLoop","parameters":["Label"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineCodegenKt","methodName":"isCapturedSuspendLambda","parameters":["CalculatedClosure","String","BindingContext"],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.range.RangeCodegenUtilKt","methodName":"getRangeOrProgressionElementType","parameters":["KotlinType"],"returnType":"KotlinType"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.CompileTimeConstantChecker\\$CharacterWithDiagnostic","methodName":"getDiagnostic","parameters":[""],"returnType":"Diagnostic"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.UtilKt","methodName":"isStoreOperation","parameters":["AbstractInsnNode"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt","methodName":"varargParameterPosition","parameters":["CallableDescriptor"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitor","methodName":"transformCallAndReturnContinuationLabel","parameters":["Int","SuspensionPoint","MethodNode","Int","LineNumberNode"],"returnType":"LabelNode"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.RedundantLocalsEliminationMethodTransformer","methodName":"findImmediateSuccessors","parameters":["AbstractInsnNode","ControlFlowGraph","MethodNode"],"returnType":"Collection"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"and","parameters":["StackValue","StackValue"],"returnType":"StackValue"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"recordClassForFunction","parameters":["KtElement","FunctionDescriptor","String","DeclarationDescriptor"],"returnType":"ClassDescriptor"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.AbstractForInProgressionOrRangeLoopGenerator","methodName":"checkPostCondition","parameters":["Label"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.results.AbstractOverloadResolutionResults","methodName":"isAmbiguity","parameters":[""],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitLoopExpression","parameters":["KtLoopExpression"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.load.java.descriptors.JavaClassConstructorDescriptor","methodName":"setHasStableParameterNames","parameters":["boolean"],"returnType":"void"},17,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.AbstractCoroutineCodegen","methodName":"createValueParameterForDoResume","parameters":["FunctionDescriptor","Name","KotlinType","Int"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.VarExpectedTypeFrame","methodName":"mergeFrom","parameters":["VarExpectedTypeFrame"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt","methodName":"resolveTopLevelClass","parameters":["ModuleDescriptor","FqName","LookupLocation"],"returnType":"ClassDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitor","methodName":"addCompletionParameterToLVT","parameters":["MethodNode"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.NewResolvedCallImpl","methodName":"setSmartCastDispatchReceiverType","parameters":["KotlinType"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.BoxedValueDescriptor","methodName":"getUnboxingWithCastInsns","parameters":[""],"returnType":"Set"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InlinedLambdaRemapper","methodName":"findField","parameters":["FieldInsnNode","Collection"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.types.Variance","methodName":"opposite","parameters":[""],"returnType":"Variance"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitorKt","methodName":"replaceFakeContinuationsWithRealOnes","parameters":["MethodNode","Int"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"createAndRecordSuspendFunctionView","parameters":["MutableClosure","SimpleFunctionDescriptor","boolean"],"returnType":"SimpleFunctionDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.coroutineCodegenUtilKt","methodName":"createCustomCopy","parameters":["D","FunctionDescriptorCopyBuilderToFunctionDescriptorCopyBuilder"],"returnType":"D"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"not","parameters":["StackValue"],"returnType":"StackValue"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.AbstractForInRangeLoopGenerator","methodName":"beforeLoop","parameters":[""],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.LazyClassDescriptor","methodName":"getCompanionObjectInfo","parameters":["KtObjectDeclaration"],"returnType":"KtClassLikeInfo"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.DiagnosticReporterByTrackingStrategy","methodName":"onCallArgument","parameters":["KotlinCallArgument","KotlinCallDiagnostic"],"returnType":"Unit"},11,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.ForInSimpleProgressionLoopGenerator$Companion","methodName":"fromBoundedValueWithStep1","parameters":["ExpressionCodegen","KtForExpression","BoundedValue","ComparisonGenerator","Boolean"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.coroutineCodegenUtilKt","methodName":"getContinuationParameterTypeOfSuspendFunction","parameters":["FunctionDescriptor","Boolean"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.FieldRemapper$Companion","methodName":"foldName","parameters":["String"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.CompileTimeConstantChecker","methodName":"escapedStringToCharacter","parameters":["String","KtElement"],"returnType":"CharacterWithDiagnostic"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitorKt","methodName":"generateContinuationConstructorCall","parameters":["InstructionAdapter","Type","MethodNode","Boolean","String","String","ClassBuilder","LanguageVersionSettings"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.coroutineCodegenUtilKt","methodName":"continuationAsmType","parameters":["LanguageVersionSettings"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.AbstractForLoopGenerator","methodName":"afterBody","parameters":["Label"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitLoopExpression","parameters":["KtLoopExpression","D"],"returnType":"R"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.Nullability","methodName":"fromFlags","parameters":["boolean","boolean"],"returnType":"Nullability"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.SMAPBuilder","methodName":"toSMAPMapping","parameters":["FileMapping","Int","Boolean"],"returnType":"String"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluator","methodName":"checkCompileTimeConstant","parameters":["KtExpression","KotlinType","BindingTrace","Boolean"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.context.ClassContext","methodName":"getCompanionObjectContext","parameters":[""],"returnType":"CodegenContext"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.PrimitiveNumberRangeLiteralRangeValue","methodName":"createForLoopGenerator","parameters":["ExpressionCodegen","KtForExpression"],"returnType":"ForLoopGenerator"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.BoxedValueDescriptor","methodName":"isDoubleSize","parameters":[""],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtForExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.UtilKt","methodName":"insnListOf","parameters":["AbstractInsnNode"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.coroutineCodegenUtilKt","methodName":"coroutinesIntrinsicsFileFacadeInternalName","parameters":["LanguageVersionSettings"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.CondJump","methodName":"loopJump","parameters":["Label","InstructionAdapter","Boolean"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtWhileExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.FakeCallableDescriptorForObject","methodName":"getOriginal","parameters":[""],"returnType":"CallableDescriptor"},9,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitSafeQualifiedExpression","parameters":["KtSafeQualifiedExpression"],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtFunctionType","methodName":"getReceiverTypeReference","parameters":[""],"returnType":"KtTypeReference"},15,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitEscapeStringTemplateEntry","parameters":["KtEscapeStringTemplateEntry","Void"],"returnType":"Void"},2,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitNamedFunction","parameters":["KtNamedFunction"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$SafeCall","methodName":"putSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitPrefixExpression","parameters":["KtPrefixExpression","D"],"returnType":"R"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtIsExpression","methodName":"getLeftHandSide","parameters":[""],"returnType":"KtExpression"},2,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"throwException","parameters":["KtThrowExpression","PseudoValue"],"returnType":"Unit"},12,{"pathToFun":"org.jetbrains.kotlin.types.expressions.FakeCallResolver","methodName":"resolveFakeCall","parameters":["ResolutionContext","ReceiverValue","Name","KtExpression","KtExpression","FakeCallKind","List"],"returnType":"OverloadResolutionResults"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.MethodNodeExaminer","methodName":"isSafeUnitInstance","parameters":["AbstractInsnNode"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.AbstractForInRangeLoopGenerator","methodName":"checkEmptyLoop","parameters":["Label"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.BranchedValue$Companion","methodName":"booleanConstant","parameters":["Boolean"],"returnType":"BranchedValue"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.KotlinToResolvedCallTransformer","methodName":"bind","parameters":["BindingTrace","NewVariableAsFunctionResolvedCallImpl"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.contracts.EffectsExtractingVisitor","methodName":"visitIsExpression","parameters":["KtIsExpression","Unit"],"returnType":"Computation"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitAnnotationEntry","parameters":["KtAnnotationEntry","Void"],"returnType":"Void"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.CoroutineTransformerMethodVisitor","methodName":"fixRangeOfLvtRecord","parameters":["MethodNode","Int","LabelNode","LabelNode"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.AnnotationChecker","methodName":"getImplicitUseSiteTargetList","parameters":["KtAnnotated?"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.contracts.model.functors.NotFunctor","methodName":"invokeWithReturningEffects","parameters":["List"],"returnType":"List"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitIsExpression","parameters":["KtIsExpression"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.builtins.CompanionObjectMapping","methodName":"isMappedIntrinsicCompanionObject","parameters":["ClassDescriptor"],"returnType":"Boolean"},8,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.descriptors.ClassResolutionScopesSupport","methodName":"getStaticScopeOfCompanionObject","parameters":["ClassDescriptor","ClassDescriptor"],"returnType":"MemberScope"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$Expression","methodName":"putSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.AccessorForConstructorDescriptor","methodName":"getReturnType","parameters":[""],"returnType":"KotlinType"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"resolveLocalVariableDescriptor","parameters":["KtParameter","KotlinType","BindingTrace","LexicalScope"],"returnType":"VariableDescriptor"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallResolver","methodName":"resolveCallWithGivenName","parameters":["ResolutionContext","Call","Name","TracingStrategy"],"returnType":"OverloadResolutionResults"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.VariableLivenessFrame","methodName":"mergeFrom","parameters":["VariableLivenessFrame"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"getContributedVariables","parameters":["Name","LookupLocation"],"returnType":"Collection"},17,{"pathToFun":"org.jetbrains.kotlin.contracts.model.functors.AbstractUnaryFunctor","methodName":"invokeWithArguments","parameters":["Computation"],"returnType":"List"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.context.InlineLambdaContext","methodName":"isSuspendIntrinsicParameter","parameters":[""],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseFunctionTypeContents","parameters":[""],"returnType":"Marker"},15,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.util.FakeCallableDescriptorForObject","methodName":"getCompileTimeInitializer","parameters":[""],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallTransformer\\$CallForImplicitInvoke","methodName":"getCalleeExpression","parameters":[""],"returnType":"KtExpression"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.RedundantLocalsEliminationMethodTransformer","methodName":"findSingleLoadFromAstore","parameters":["AbstractInsnNode","ControlFlowGraph","MethodNode"],"returnType":"AbstractInsnNode"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.SuspendFunctionGenerationStrategy","methodName":"doGenerateBody","parameters":["ExpressionCodegen","JvmMethodSignature"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtValueArgumentName","methodName":"getAsName","parameters":[""],"returnType":"Name"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.PsiSourceCompilerForInline$FakeMemberCodegen","methodName":"getInlineNameGenerator","parameters":[""],"returnType":"NameGenerator"},2,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitDoWhileLoop","parameters":["IrDoWhileLoop"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitDoWhileLoop","parameters":["IrDoWhileLoop","D"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.CoroutineCodegenKt","methodName":"acceptWithStateMachine","parameters":["MethodNode","IrFunction","ClassCodegen","MethodVisitor","() -> ClassBuilder"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedValueParameterDescriptor","methodName":"getName","parameters":[""],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.inlineCodegenUtilsKt","methodName":"addFakeContinuationConstructorCallMarker","parameters":["InstructionAdapter","Boolean"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"implicitCast","parameters":["IrExpression","KotlinType","IrTypeOperator"],"returnType":"IrExpression"},3,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.LoopExpressionGenerator","methodName":"generateForLoop","parameters":["KtForExpression"],"returnType":"IrExpression"},2,{"pathToFun":"org.jetbrains.kotlin.ir.util.RenderIrElementVisitor","methodName":"renderTypeAbbreviation","parameters":["IrTypeAbbreviation"],"returnType":"String"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.JvmGeneratorExtensions$JvmEnhancedNullability","methodName":"stripEnhancedNullability","parameters":["KotlinType"],"returnType":"KotlinType"},2,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitLoop","parameters":["IrLoop"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitLoop","parameters":["IrLoop","D"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderProperty","parameters":["PropertyDescriptor","StringBuilder"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitWhileLoop","parameters":["IrWhileLoop"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrWhileLoopImpl","methodName":"transformChildren","parameters":["IrElementTransformer","D"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.backend.common.ir.IrUtilsKt","methodName":"copyValueParametersToStatic","parameters":["IrFunction","IrFunction","IrDeclarationOrigin","IrType","Int"],"returnType":"Unit"},8,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.SyntheticAccessorLoweringKt","methodName":"isCoroutineIntrinsic","parameters":["IrFunction"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitIsExpression","parameters":["KtIsExpression","Nothing"],"returnType":"IrStatement"},2,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.NumericForLoopHeader","methodName":"ensureNotNullable","parameters":["DeclarationIrBuilder","IrExpression"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitForExpression","parameters":["KtForExpression","Nothing"],"returnType":"IrStatement"},2,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"getTypeParameters","parameters":["TypeConstructorMarker"],"returnType":"List"},7,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.HeaderInfoBuilder","methodName":"visitCall","parameters":["IrCall","IrCall"],"returnType":"HeaderInfo"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitPrefixExpression","parameters":["KtPrefixExpression","Nothing"],"returnType":"IrStatement"},4,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.BlockInfo","methodName":"withBlock","parameters":["T","(T) -> R"],"returnType":"R"},6,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper","methodName":"getReferencedTypeAlias","parameters":["IrTypeAliasSymbol"],"returnType":"IrTypeAliasSymbol"},1,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeclarationStubGenerator","methodName":"generateTypeAliasStub","parameters":["TypeAliasDescriptor"],"returnType":"IrTypeAlias"},5,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitErrorExpression","parameters":["IrErrorExpression","D"],"returnType":"Any"},7,{"pathToFun":"org.jetbrains.kotlin.ir.builders.PrimitivesKt","methodName":"elseBranch","parameters":["IrGeneratorContextInterface","IrExpression"],"returnType":"IrElseBranch"},8,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.ThrowKotlinNothingValueException","methodName":"toCallable","parameters":["IrFunctionAccessExpression","JvmMethodSignature","JvmBackendContext"],"returnType":"IrIntrinsicFunction"},4,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.JavaClassDataFinder","methodName":"findClassData","parameters":["ClassId"],"returnType":"ClassData"},5,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.DefaultArgumentStubGenerator","methodName":"log","parameters":["() -> String"],"returnType":"Any"},7,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedClassDescriptor","methodName":"getUnsubstitutedPrimaryConstructor","parameters":[""],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.EnumEntrySyntheticClassDescriptor","methodName":"getVisibility","parameters":[""],"returnType":"Visibility"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorExpressionGenerator","methodName":"generateBinaryBooleanOperator","parameters":["KtBinaryExpression","IrStatementOrigin"],"returnType":"IrExpression"},8,{"pathToFun":"org.jetbrains.kotlin.psi2ir.intermediate.VariableLValue","methodName":"load","parameters":[""],"returnType":"IrExpression"},8,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.IfNullExpressionsFusionLowering$Transformer","methodName":"createIrBuilder","parameters":["IfNullExpr"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.irCodegenUtilsKt","methodName":"isInlineOrContainedInInline","parameters":["IrDeclaration"],"returnType":"Boolean"},17,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.RangeLoopTransformer","methodName":"gatherLoopVariableInfo","parameters":["MutableList"],"returnType":"LoopVariableInfo"},2,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedReceiverParameterDescriptor","methodName":"getType","parameters":[""],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.ProgressionType$Companion","methodName":"fromIrType","parameters":["IrType","Symbols"],"returnType":"ProgressionType"},1,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable","methodName":"declareEnumEntry","parameters":["Int","Int","IrDeclarationOrigin","ClassDescriptor","(IrEnumEntrySymbol) -> IrEnumEntry"],"returnType":"IrEnumEntry"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"acceptsNullValues","parameters":["KotlinType"],"returnType":"Any"},7,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.AnnotationCodegenKt","methodName":"loadAnnotationTargets","parameters":["IrConstructorCall"],"returnType":"Set"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.CoroutineCodegenKt","methodName":"anyOfOverriddenFunctionsReturnsNonUnit","parameters":["IrFunction"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.builtins.jvm.JvmBuiltInsSettings","methodName":"isTrivialCopyConstructorFor","parameters":["ConstructorDescriptor","ClassDescriptor"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeclarationStubGenerator","methodName":"generateEnumEntryStub","parameters":["ClassDescriptor"],"returnType":"IrEnumEntry"},1,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSubstitutor","methodName":"substituteType","parameters":["IrType"],"returnType":"IrType"},6,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopyTypeRemapper","methodName":"remapTypeArgument","parameters":["IrTypeArgument"],"returnType":"IrTypeArgument"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.CoroutineCodegenKt","methodName":"alwaysNeedsContinuation","parameters":["IrFunction"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.EnumEntrySyntheticClassDescriptor","methodName":"create","parameters":["StorageManager","ClassDescriptor","Name","NotNullLazyValue","Annotations","SourceElement"],"returnType":"EnumEntrySyntheticClassDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.ir.declarations.lazy.IrLazySymbolTable","methodName":"referenceEnumEntry","parameters":["ClassDescriptor"],"returnType":"IrEnumEntrySymbol"},1,{"pathToFun":"org.jetbrains.kotlin.ir.util.IrTypeUtilsKt","methodName":"substitute","parameters":["IrType","Map"],"returnType":"IrType"},7,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitThrowExpression","parameters":["KtThrowExpression","Nothing"],"returnType":"IrStatement"},12,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.AddContinuationLowering","methodName":"generateContinuationClassForNamedFunction","parameters":["IrFunction","IrValueParameter","IrAttributeContainer","Boolean"],"returnType":"IrClass"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.intermediate.SafeCallReceiver","methodName":"call","parameters":["(IntermediateValue"],"returnType":"IrExpression"},3,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrWhileLoopImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},2,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedPropertyDescriptor","methodName":"getContainingDeclaration","parameters":[""],"returnType":"DeclarationDescriptor"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.Not$BooleanNegation","methodName":"jumpIfTrue","parameters":["Label"],"returnType":"Any"},8,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.LoopExpressionGenerator","methodName":"getLoopLabel","parameters":["KtLoopExpression"],"returnType":"String"},2,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.RangeToHandler","methodName":"build","parameters":["IrCall","ProgressionType","IrSymbol"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.PrimitiveComparison","methodName":"invoke","parameters":["IrFunctionAccessExpression","ExpressionCodegen","BlockInfo"],"returnType":"PromisedValue"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"setVariable","parameters":["IrValueSymbol","IrExpression","BlockInfo"],"returnType":"Unit"},7,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"visitWhileLoop","parameters":["IrWhileLoop","BlockInfo"],"returnType":"PromisedValue"},2,{"pathToFun":"org.jetbrains.kotlin.backend.common.serialization.mangle.descriptor.DescriptorExportCheckerVisitor","methodName":"visitTypeAliasDescriptor","parameters":["TypeAliasDescriptor","SpecialDeclarationType"],"returnType":"Any"},5,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.BridgeLoweringKt","methodName":"overriddenFromClass","parameters":["IrSimpleFunction"],"returnType":"IrSimpleFunction"},4,{"pathToFun":"org.jetbrains.kotlin.psi2ir.PsiSourceManager","methodName":"getKtFile","parameters":["IrFile"],"returnType":"KtFile"},2,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedSimpleFunctionDescriptor","methodName":"isInline","parameters":[""],"returnType":"Any"},7,{"pathToFun":"org.jetbrains.kotlin.backend.common.CheckIrElementVisitor","methodName":"visitLoop","parameters":["IrLoop"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.HeaderInfoHandler","methodName":"handle","parameters":["E","IrCall","D","IrSymbol"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderPropertyAnnotations","parameters":["PropertyDescriptor","StringBuilder"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitWhileLoop","parameters":["IrWhileLoop","Nothing"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.MoveOrCopyCompanionObjectFieldsLowering","methodName":"handle","parameters":["IrClass"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrFunctionFactory","methodName":"suspendFunctionN","parameters":["Int","SymbolTable.((IrClassSymbol) -> IrClass) -> IrClass"],"returnType":"IrClass"},1,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitWhileLoop","parameters":["IrWhileLoop","D"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedSimpleFunctionDescriptor","methodName":"isSuspend","parameters":[""],"returnType":"Any"},6,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.IfNullExpressionsFusionLowering","methodName":"remap","parameters":["IrExpression","IrVariable","IrExpression"],"returnType":"IrExpression"},2,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.MemberSignature$Companion","methodName":"fromFieldNameAndDesc","parameters":["String","String"],"returnType":"MemberSignature"},5,{"pathToFun":"org.jetbrains.kotlin.backend.common.serialization.signature.IdSignatureBuilder","methodName":"platformSpecificAlias","parameters":["TypeAliasDescriptor"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.SyntheticAccessorLowering","methodName":"accessorParent","parameters":["IrDeclarationWithVisibility","IrDeclarationParent"],"returnType":"Any"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.BoxedBasicValue","methodName":"equals","parameters":["Any"],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrFunctionFactory","methodName":"kSuspendFunctionClassDescriptor","parameters":["Int"],"returnType":"FunctionClassDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.util.NoDefaultAndVarargsCheck","methodName":"check","parameters":["FunctionDescriptor"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.BridgeLoweringKt","methodName":"resolvesToClass","parameters":["IrSimpleFunction"],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.BodyGenerator","methodName":"putLoop","parameters":["KtLoopExpression","IrLoop"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.Increment","methodName":"toCallable","parameters":["IrFunctionAccessExpression","JvmMethodSignature","JvmBackendContext"],"returnType":"IrIntrinsicFunction"},2,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.EnumEntrySyntheticClassDescriptor","methodName":"getAnnotations","parameters":[""],"returnType":"Annotations"},1,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitWhileLoop","parameters":["IrWhileLoop"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.IfNullExpressionsFusionLowering$Transformer","methodName":"isNull","parameters":["IrExpression","IrVariableSymbol","Boolean"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrDoWhileLoopImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorExpressionGenerator","methodName":"generatePrefixExpression","parameters":["KtPrefixExpression"],"returnType":"IrExpression"},4,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitErrorExpression","parameters":["IrErrorExpression"],"returnType":"Any"},7,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.TailCallOptimizationData","methodName":"findCallsOnTailPositionWithoutImmediateReturn","parameters":["IrStatement","Boolean"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irCallOp","parameters":["IrBuilderWithScope","IrFunctionSymbol","IrType","IrExpression","IrExpression"],"returnType":"IrMemberAccessExpression"},8,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.DefaultArgumentStubGenerator","methodName":"dispatchToImplementation","parameters":["IrBlockBodyBuilder","IrSimpleFunction","IrFunction","MutableList"],"returnType":"IrExpression"},7,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen","methodName":"getVisibilityForDefaultArgumentStub","parameters":["IrFunction"],"returnType":"Int"},7,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassDescriptor","methodName":"isData","parameters":[""],"returnType":"Any"},20,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassDescriptor","methodName":"isCompanionObject","parameters":[""],"returnType":"Any"},20,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.ProgressionType","methodName":"asStepType","parameters":["IrExpression"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmDefaultArgumentStubGenerator","methodName":"generateSuperCallHandlerCheckIfNeeded","parameters":["IrBlockBodyBuilder","IrFunction","IrFunction"],"returnType":"Unit"},7,{"pathToFun":"org.jetbrains.kotlin.ir.builders.PrimitivesKt","methodName":"andand","parameters":["IrGeneratorContextInterface","Int","Int","IrExpression","IrExpression","IrStatementOrigin"],"returnType":"IrWhen"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.RangeLoopTransformer","methodName":"getScopeOwnerSymbol","parameters":[""],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.IfNullExpressionsFusionLowering","methodName":"isTrivial","parameters":["IrExpression"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmPropertiesLowering","methodName":"substituteSetter","parameters":["IrBuilderWithScope","IrProperty","IrCall"],"returnType":"IrExpression"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.serialization.signature.IdSignatureDescriptor$DescriptorBasedSignatureBuilder","methodName":"visitTypeAliasDescriptor","parameters":["TypeAliasDescriptor","Nothing"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.ProgressionType","methodName":"asElementType","parameters":["IrExpression"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.TailCallOptimizationLoweringKt","methodName":"findTailCall","parameters":["List","Boolean"],"returnType":"IrStatement"},1,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrDoWhileLoopImpl","methodName":"acceptChildren","parameters":["IrElementVisitor","D"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl$RenderDeclarationDescriptorVisitor","methodName":"visitPropertyDescriptor","parameters":["PropertyDescriptor","StringBuilder"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.RangeLoopTransformer","methodName":"lowerWhileLoop","parameters":["IrWhileLoop","ForLoopHeader"],"returnType":"LoopReplacement"},2,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.LoopExpressionGenerator","methodName":"generateWhileLoop","parameters":["KtWhileExpression"],"returnType":"IrExpression"},1,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable","methodName":"declareTypeAlias","parameters":["TypeAliasDescriptor","(IrTypeAliasSymbol) -> IrTypeAlias"],"returnType":"IrTypeAlias"},5,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.AndAnd","methodName":"invoke","parameters":["IrFunctionAccessExpression","ExpressionCodegen","BlockInfo"],"returnType":"PromisedValue"},1,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSubstitutor","methodName":"typeParameterConstructor","parameters":["IrType"],"returnType":"IrTypeParameterSymbol"},6,{"pathToFun":"org.jetbrains.kotlin.backend.common.serialization.signature.IdSignatureDescriptor","methodName":"composeEnumEntrySignature","parameters":["ClassDescriptor"],"returnType":"IdSignature"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.IfNullExpressionsFusionLowering$Transformer","methodName":"substitute","parameters":["IfNullExpr","IrExpression","Boolean"],"returnType":"IrExpression"},2,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorExpressionGenerator","methodName":"generateInstanceOfExpression","parameters":["KtIsExpression"],"returnType":"IrStatement"},2,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"getPrimitiveType","parameters":["KotlinType"],"returnType":"PrimitiveType"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.BoxedValueDescriptor","methodName":"addMergedWith","parameters":["BoxedValueDescriptor"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.psi2ir.KotlinUtilsKt","methodName":"containsNull","parameters":["KotlinType"],"returnType":"Any"},8,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitWhileExpression","parameters":["KtWhileExpression","Nothing"],"returnType":"IrStatement"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.ProgressionLoopHeader","methodName":"initializeIteration","parameters":["IrVariable","Map","DeclarationIrBuilder"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.IfNullExpressionsFusionLowering","methodName":"getElseBranchResultOrNull","parameters":["IrBranch"],"returnType":"IrExpression"},4,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.types.RawSubstitution","methodName":"eraseType","parameters":["KotlinType"],"returnType":"KotlinType"},2,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols","methodName":"visitConst","parameters":["IrConst"],"returnType":"IrConst"},3,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.UtilsKt","methodName":"createTemporaryVariableIfNecessary","parameters":["DeclarationIrBuilder","IrExpression","String","IrType"],"returnType":"Pair"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.AddContinuationLowering","methodName":"continuationType","parameters":["IrFunction"],"returnType":"IrType"},1,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedReceiverParameterDescriptor","methodName":"getName","parameters":[""],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.ArrayValue","methodName":"getType","parameters":["ModuleDescriptor"],"returnType":"KotlinType"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorExpressionGenerator","methodName":"generateElvis","parameters":["KtBinaryExpression"],"returnType":"IrExpression"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.AddContinuationLowering","methodName":"addFunctionOverride","parameters":["IrDeclarationContainer","IrSimpleFunction","IrBlockBodyBuilder.(IrFunction) -> Unit"],"returnType":"IrSimpleFunction"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.matchers.ParameterCountMatcher","methodName":"invoke","parameters":["IrFunction"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxingInterpreter","methodName":"onMergeFail","parameters":["BoxedBasicValue"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassDescriptor","methodName":"isFun","parameters":[""],"returnType":"Any"},20,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.matchers.FqNameMatcher","methodName":"invoke","parameters":["IrFunction"],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.CoroutineCodegenKt","methodName":"isInvokeSuspendForInlineOfLambda","parameters":["IrFunction"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.types.RawSubstitution","methodName":"eraseInflexibleBasedOnClassDescriptor","parameters":["SimpleType","ClassDescriptor","JavaTypeAttributes"],"returnType":"Pair"},2,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.RangeLoopTransformer$FindInitializerCallVisitor","methodName":"visitCall","parameters":["IrCall"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.ir.util.TypeTranslator","methodName":"toIrTypeAbbreviation","parameters":["SimpleType"],"returnType":"IrTypeAbbreviation"},5,{"pathToFun":"org.jetbrains.kotlin.util.ValueParameterCountCheck$SingleValueParameter","methodName":"check","parameters":["FunctionDescriptor"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.AnnotationCodegenKt","methodName":"getValueArgument","parameters":["IrConstructorCall","Name"],"returnType":"IrExpression"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.ReassignParameter","methodName":"invoke","parameters":["IrFunctionAccessExpression","ExpressionCodegen","BlockInfo"],"returnType":"PromisedValue"},7,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.AddContinuationLoweringKt","methodName":"continuationType","parameters":["IrFunction","JvmBackendContext"],"returnType":"IrType"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.SyntheticAccessorLowering","methodName":"modifyFunctionAccessExpression","parameters":["IrFunctionAccessExpression","IrFunctionSymbol"],"returnType":"IrFunctionAccessExpression"},8,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmDefaultArgumentStubGenerator","methodName":"selectArgumentOrDefault","parameters":["IrBlockBodyBuilder","IrExpression","IrValueParameter","IrExpression"],"returnType":"IrValueDeclaration"},7,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable","methodName":"createEnumEntrySymbol","parameters":["ClassDescriptor"],"returnType":"IrEnumEntrySymbol"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.HeaderProcessor","methodName":"extractHeader","parameters":["IrVariable"],"returnType":"ForLoopHeader"},2,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LowerUtilsKt","methodName":"irIfThen","parameters":["IrBuilderWithScope","IrExpression","IrExpression"],"returnType":"Any"},7,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.TypeOperatorLowering","methodName":"extents","parameters":["IrElement"],"returnType":"Pair"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmPropertiesLowering","methodName":"patchReceiver","parameters":["IrBuilderWithScope","IrFieldAccessExpression"],"returnType":"IrExpression"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.AddContinuationLowering","methodName":"addFunctionOverride","parameters":["IrDeclarationContainer","IrSimpleFunction"],"returnType":"IrSimpleFunction"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorExpressionGenerator","methodName":"generatePrefixOperatorAsCall","parameters":["KtPrefixExpression","IrStatementOrigin"],"returnType":"IrExpression"},4,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrFunctionFactory","methodName":"kSuspendFunctionN","parameters":["Int","SymbolTable.((IrClassSymbol) -> IrClass) -> IrClass"],"returnType":"IrClass"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.HeaderInfoFromCallHandler","methodName":"matchIterable","parameters":["IrCall"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt","methodName":"irSetVar","parameters":["IrBuilderWithScope","IrVariableSymbol","IrExpression"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.StaticDefaultFunctionLoweringKt","methodName":"getStaticFunctionWithReceivers","parameters":["JvmBackendContext","IrFunction"],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.IrExpressionLambdaImpl","methodName":"isCapturedSuspend","parameters":["CapturedParamDesc"],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitDoWhileLoop","parameters":["IrDoWhileLoop","Nothing"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitDoWhileLoop","parameters":["IrDoWhileLoop","D"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.SyntheticAccessorLowering","methodName":"copyAllParamsToArgs","parameters":["IrFunctionAccessExpression","IrFunction"],"returnType":"Unit"},8,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitSafeQualifiedExpression","parameters":["KtSafeQualifiedExpression","Nothing"],"returnType":"IrStatement"},3,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ArgumentsGenerationUtilsKt","methodName":"generateSingletonReference","parameters":["StatementGenerator","ClassDescriptor","Int","Int","KotlinType"],"returnType":"IrDeclarationReference"},9,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractTypeAliasDescriptor","methodName":"getOriginal","parameters":[""],"returnType":"TypeAliasDescriptor"},12,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.EnumEntrySyntheticClassDescriptor","methodName":"getKind","parameters":[""],"returnType":"ClassKind"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.CoroutineCodegenKt","methodName":"continuationParameter","parameters":["IrFunction"],"returnType":"IrValueParameter"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitEscapeStringTemplateEntry","parameters":["KtEscapeStringTemplateEntry","Nothing"],"returnType":"IrStatement"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.OverridingUtil","methodName":"equals","parameters":["TypeConstructor","TypeConstructor"],"returnType":"boolean"},3,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.LoopExpressionGenerator","methodName":"generateWhileLoopBody","parameters":["KtBlockExpression"],"returnType":"IrExpression"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.ProgressionLoopHeader","methodName":"buildLoop","parameters":["DeclarationIrBuilder","IrLoop","IrExpression"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.SyntheticAccessorLowering","methodName":"createConstructorCall","parameters":["IrConstructor","IrConstructorSymbol"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedValueParameterDescriptor","methodName":"getType","parameters":[""],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.descriptors.deserialization.AdditionalClassPartsProvider$None","methodName":"getConstructors","parameters":["ClassDescriptor"],"returnType":"Collection"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.AddContinuationLowering","methodName":"createContinuationClassFor","parameters":["IrClass","IrDeclarationParent","IrDeclarationOrigin","Visibility"],"returnType":"IrClass"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.types.RawSubstitution","methodName":"get","parameters":["KotlinType"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.TypeOperatorLowering","methodName":"sourceViewFor","parameters":["IrDeclaration"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.ir.builders.declarations.IrPropertyBuilder","methodName":"updateFrom","parameters":["IrProperty"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.matchers.DispatchReceiverMatcher","methodName":"invoke","parameters":["IrFunction"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"visitThrow","parameters":["IrThrow"],"returnType":"IrExpression"},12,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.AndAnd$BooleanConjunction","methodName":"jumpIfFalse","parameters":["Label"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.irCodegenUtilsKt","methodName":"getVisibilityAccessFlagForAnonymous","parameters":["IrDeclaration"],"returnType":"Int"},17,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.SwitchGenerator$StringSwitch","methodName":"shouldOptimize","parameters":[""],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitLoop","parameters":["IrLoop","D"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.types.RawSubstitution","methodName":"isEmpty","parameters":[""],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader","methodName":"loadEnumEntryAnnotations","parameters":["ProtoContainer","ProtoBuf.EnumEntry"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.AddContinuationLoweringKt","methodName":"createSuspendFunctionStub","parameters":["IrFunction","JvmBackendContext"],"returnType":"IrFunction"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.RangeLoopTransformer","methodName":"lowerHeader","parameters":["IrVariable","ForLoopHeader"],"returnType":"IrStatement"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.SyntheticAccessorLowering","methodName":"makeConstructorAccessor","parameters":["IrConstructor"],"returnType":"IrConstructorImpl"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.ProgressionType","methodName":"castIfNecessary","parameters":["IrExpression","IrClass"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.TaintedBoxedValue","methodName":"taint","parameters":[""],"returnType":"BoxedBasicValue"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.IrInlineCodegen","methodName":"putCapturedValueOnStack","parameters":["IrExpression","Type","Int"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.IfNullExpressionsFusionLowering","methodName":"copyIfTrivial","parameters":["IrExpression"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.nullCheck.RedundantNullCheckMethodTransformer$TransformerPass","methodName":"transformTrivialCheckExpressionValueIsNotNull","parameters":["AbstractInsnNode","Nullability"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.ir.builders.IrBuilderKt","methodName":"buildStatement","parameters":["IrGeneratorWithScope","Int","Int","IrStatementOrigin","IrSingleStatementBuilder.() -> T"],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.CleanBoxedValue","methodName":"taint","parameters":[""],"returnType":"BoxedBasicValue"},2,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorExpressionGenerator","methodName":"getResultTypeForElvis","parameters":["KtExpression"],"returnType":"KotlinType"},2,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrWhileLoopImpl","methodName":"acceptChildren","parameters":["IrElementVisitor","D"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorExpressionGenerator","methodName":"isDynamicUnaryOperator","parameters":["KtUnaryExpression"],"returnType":"Boolean"},3,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.DefaultArgumentStubGenerator","methodName":"needSpecialDispatch","parameters":["IrSimpleFunction"],"returnType":"Any"},7,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.OperatorConventionsKt","methodName":"getPrefixOperator","parameters":["IElementType"],"returnType":"IrStatementOrigin"},4,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedDeclarationDescriptor","methodName":"toConstantValue","parameters":["IrElement"],"returnType":"ConstantValue"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.descriptorUtil.AnnotationsWithOnly","methodName":"hasAnnotation","parameters":["FqName"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.IfNullExpressionsFusionLowering","methodName":"remap","parameters":["IrExpression","IrVariable","Lazy"],"returnType":"IrExpression"},2,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.NumericForLoopHeader","methodName":"incrementInductionVariable","parameters":["DeclarationIrBuilder"],"returnType":"IrStatement"},2,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedPropertyAccessorDescriptor","methodName":"getCorrespondingProperty","parameters":[""],"returnType":"PropertyDescriptor"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.AddContinuationLowering","methodName":"addCompletionValueParameter","parameters":["IrFunction"],"returnType":"IrValueParameter"},1,{"pathToFun":"org.jetbrains.kotlin.ir.types.irTypePredicatesKt","methodName":"isKotlinResult","parameters":["IrType"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.descriptorUtil.AnnotationsWithOnly","methodName":"iterator","parameters":[""],"returnType":"Iterator"},2,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.NumericForLoopHeader","methodName":"buildLoopCondition","parameters":["DeclarationIrBuilder"],"returnType":"IrExpression"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxedValuesCollection","methodName":"merge","parameters":["BoxedValueDescriptor","BoxedValueDescriptor"],"returnType":"void"},3,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable","methodName":"referenceEnumEntry","parameters":["ClassDescriptor"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.BoxingInterpreterKt","methodName":"canValuesBeUnboxedForAreEqual","parameters":["List","GenerationState"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.DeclarationGenerator","methodName":"generateFakeOverrideProperty","parameters":["PropertyDescriptor","KtPureElement"],"returnType":"IrProperty"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.serialization.mangle.descriptor.DescriptorBasedKotlinManglerImpl","methodName":"isExportEnumEntry","parameters":["ClassDescriptor"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.PropertyGenerator","methodName":"generateFakeOverrideProperty","parameters":["PropertyDescriptor","KtPureElement"],"returnType":"IrProperty"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.AddContinuationLowering","methodName":"addConstructorForNamedFunction","parameters":["IrClass","IrField","Boolean"],"returnType":"IrConstructor"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer","methodName":"stripSpecialMarkers","parameters":["Name"],"returnType":"String"},3,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitDoWhileLoop","parameters":["IrDoWhileLoop"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGeneratorExtension","methodName":"genStmt","parameters":["KtExpression"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"visitDoWhileLoop","parameters":["IrDoWhileLoop","BlockInfo"],"returnType":"PromisedValue"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.typeEnhancement.EnhancedTypeAnnotations","methodName":"iterator","parameters":[""],"returnType":"Iterator"},2,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.matchers.IrCallMatcherContainer","methodName":"invoke","parameters":["IrCall"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.EnumEntrySyntheticClassDescriptor","methodName":"isExpect","parameters":[""],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.IrIntrinsicFunctionKt","methodName":"argTypes","parameters":["IrFunctionAccessExpression","JvmBackendContext"],"returnType":"ArrayList"},8,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitLoop","parameters":["IrLoop"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitErrorExpression","parameters":["IrErrorExpression","D"],"returnType":"Any"},7,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl$Companion","methodName":"constFalse","parameters":["Int","Int","IrType"],"returnType":"IrConstImpl"},1,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"parametersCount","parameters":["TypeConstructorMarker"],"returnType":"Any"},6,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable$EnumEntrySymbolTable","methodName":"signature","parameters":["ClassDescriptor"],"returnType":"IdSignature"},1,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitWhileLoop","parameters":["IrWhileLoop","Nothing"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtFile","methodName":"getFileType","parameters":[""],"returnType":"FileType"},1,{"pathToFun":"org.jetbrains.kotlin.ir.builders.PrimitivesKt","methodName":"constFalse","parameters":["IrGeneratorContextInterface","Int","Int"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrDoWhileLoopImpl","methodName":"transformChildren","parameters":["IrElementTransformer","D"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.AbstractTypeAliasDescriptor","methodName":"accept","parameters":["DeclarationDescriptorVisitor","D"],"returnType":"R"},5,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"visitLoop","parameters":["IrLoop"],"returnType":"IrExpression"},2,{"pathToFun":"org.jetbrains.kotlin.ir.util.RenderIrElementKt","methodName":"renderTypeAliasFqn","parameters":["IrTypeAliasSymbol"],"returnType":"String"},1,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"isFinalClassOrEnumEntryOrAnnotationClassConstructor","parameters":["TypeConstructorMarker"],"returnType":"Boolean"},25,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"implicitNonNull","parameters":["IrExpression","KotlinType","KotlinType"],"returnType":"IrExpression"},2,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl$Companion","methodName":"constTrue","parameters":["Int","Int","IrType"],"returnType":"IrConstImpl"},8,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable","methodName":"referenceTypeAlias","parameters":["TypeAliasDescriptor"],"returnType":"IrTypeAliasSymbol"},5,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedDeclarationDescriptor","methodName":"toAnnotationDescriptor","parameters":["IrConstructorCall"],"returnType":"AnnotationDescriptor"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxingInterpreter","methodName":"onAreEqual","parameters":["AbstractInsnNode","BoxedBasicValue","BoxedBasicValue"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.EnumValue","methodName":"getType","parameters":["ModuleDescriptor"],"returnType":"KotlinType"},1,{"pathToFun":"org.jetbrains.kotlin.ir.builders.PrimitivesKt","methodName":"constTrue","parameters":["IrGeneratorContextInterface","Int","Int"],"returnType":"Any"},8,{"pathToFun":"org.jetbrains.kotlin.types.checker.TypeCheckerProcedureCallbacksImpl","methodName":"noCorrespondingSupertype","parameters":["KotlinType","KotlinType"],"returnType":"boolean"},2,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeepCopyTypeRemapper","methodName":"remapTypeAbbreviation","parameters":["IrTypeAbbreviation"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.AddContinuationLowering","methodName":"addInvokeSuspendForNamedFunction","parameters":["IrClass","IrFunction","IrField","IrField","IrField","Boolean"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.boxing.RedundantBoxingInterpreter","methodName":"onMergeSuccess","parameters":["BoxedBasicValue","BoxedBasicValue"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitDoWhileLoop","parameters":["IrDoWhileLoop","Nothing"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.descriptors.JvmDeclarationFactory","methodName":"getPrivateFieldForObjectInstance","parameters":["IrClass"],"returnType":"IrField"},4,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.matchers.ParameterMatcher","methodName":"invoke","parameters":["IrFunction"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderValVarPrefix","parameters":["VariableDescriptor","StringBuilder","Boolean"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.AddContinuationLoweringKt","methodName":"suspendFunctionViewOrStub","parameters":["IrFunction","JvmBackendContext"],"returnType":"IrFunction"},1,{"pathToFun":"org.jetbrains.kotlin.ir.util.SymbolTable","methodName":"createTypeAliasSymbol","parameters":["TypeAliasDescriptor"],"returnType":"IrTypeAliasSymbol"},5,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitWhileLoop","parameters":["IrWhileLoop","D"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrFunctionFactory","methodName":"suspendFunctionClassDescriptor","parameters":["Int"],"returnType":"FunctionClassDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.Equals$BooleanNullCheck","methodName":"jumpIfTrue","parameters":["Label"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.AssignmentGenerator","methodName":"generatePostfixIncrementDecrement","parameters":["KtPostfixExpression","IrStatementOrigin"],"returnType":"IrExpression"},2,{"pathToFun":"org.jetbrains.kotlin.contracts.parsing.PsiContractsUtilsKt","methodName":"isFromContractDsl","parameters":["DeclarationDescriptor"],"returnType":"Boolean"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.defaultMethodUtilKt","methodName":"expandMaskConditionsAndUpdateVariableNodes","parameters":["MethodNode","Int","List","Int","Map","(Type, Array"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.InlineCheckerWrapper","methodName":"getChecker","parameters":["FunctionDescriptor"],"returnType":"CallChecker"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InlineCodegenForDefaultBody","methodName":"genCallInner","parameters":["Callable","ResolvedCall","Boolean","ExpressionCodegen"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.inline.InlineAnalyzerExtension","methodName":"checkHasInlinableAndNullability","parameters":["FunctionDescriptor","KtFunction","BindingTrace"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.inline.InlineAnalyzerExtension","methodName":"process","parameters":["CallableMemberDescriptor","KtCallableDeclaration","BindingTrace"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InlineCodegenForDefaultBody","methodName":"putValueIfNeeded","parameters":["JvmKotlinType","StackValue","ValueKind","Int"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.inline.InlineAnalyzerExtension","methodName":"checkDefaults","parameters":["FunctionDescriptor","KtFunction","BindingTrace"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.InlineChecker","methodName":"checkValueParameter","parameters":["CallCheckerContext","CallableDescriptor","ValueArgument","ValueParameterDescriptor"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.defaultMethodUtilKt","methodName":"extractDefaultLambdasInfo","parameters":["List","Map","MutableCollection","MutableList","(Type, Array"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.InlineChecker","methodName":"isDefinedInInlineFunction","parameters":["DeclarationDescriptorWithVisibility"],"returnType":"Boolean"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.InlineChecker","methodName":"checkPrivateClassMemberAccess","parameters":["DeclarationDescriptor","KtElement","CallCheckerContext"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.InlineChecker","methodName":"checkRecursion","parameters":["CallCheckerContext","CallableDescriptor","KtElement"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.inline.InlineAnalyzerExtension","methodName":"notSupportedInInlineCheck","parameters":["CallableMemberDescriptor","KtCallableDeclaration","BindingTrace"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.PsiSourceCompilerForInline","methodName":"doCreateMethodNodeFromSource","parameters":["FunctionDescriptor","JvmMethodSignature","Boolean","Method"],"returnType":"SMAPAndMethodNode"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.MethodInlinerUtilKt","methodName":"parameterOffsets","parameters":["Boolean","List"],"returnType":"Array"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.InlineChecker","methodName":"getCalleeDescriptor","parameters":["CallCheckerContext","KtExpression","Boolean"],"returnType":"CallableDescriptor"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.OwnerKind$Companion","methodName":"getMemberOwnerKind","parameters":["DeclarationDescriptor"],"returnType":"OwnerKind"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.InlineChecker","methodName":"check","parameters":["ResolvedCall","PsiElement","CallCheckerContext"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.inline.InlineAnalyzerExtension","methodName":"checkInlinableParameter","parameters":["ParameterDescriptor","KtElement","CallableDescriptor","BindingTrace"],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.InlineChecker","methodName":"checkVisibilityAndAccess","parameters":["CallableDescriptor","KtElement","CallCheckerContext"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.PsiInlineCodegen","methodName":"extractDefaultLambdas","parameters":["MethodNode"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.InlineChecker","methodName":"checkCallWithReceiver","parameters":["CallCheckerContext","CallableDescriptor","ReceiverValue","KtExpression"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.descriptors.EffectiveVisibility$Public","methodName":"toVisibility","parameters":[""],"returnType":"Any"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.defaultMethodUtilKt","methodName":"extractDefaultLambdaOffsetAndDescriptor","parameters":["JvmMethodSignature","FunctionDescriptor"],"returnType":"Map"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.inline.InlineAnalyzerExtension","methodName":"checkModalityAndOverrides","parameters":["CallableMemberDescriptor","KtCallableDeclaration","BindingTrace"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.inlineCodegenUtilsKt","methodName":"getConstant","parameters":["AbstractInsnNode"],"returnType":"Int"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.defaultMethodUtilIrKt","methodName":"extractDefaultLambdaOffsetAndDescriptor","parameters":["JvmMethodSignature","IrFunction"],"returnType":"Map"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.MethodBodyVisitor","methodName":"visitParameterAnnotation","parameters":["Int","String","Boolean"],"returnType":"AnnotationVisitor"},4,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmSingleAbstractMethodLowering","methodName":"getWrapperVisibility","parameters":["IrTypeOperatorCall","List"],"returnType":"Any"},21,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmSingleAbstractMethodLowering","methodName":"generateEqualsHashCode","parameters":["IrClass","IrType","IrField"],"returnType":"Unit"},21,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmSingleAbstractMethodLowering","methodName":"getSuperTypeForWrapper","parameters":["IrType"],"returnType":"IrType"},21,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrBuiltIns","methodName":"function","parameters":["Int"],"returnType":"IrClassSymbol"},21,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.SingleAbstractMethodLowering","methodName":"createObjectProxy","parameters":["IrType","Visibility","IrElement"],"returnType":"IrClass"},21,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.IrAbstractFunctionFactory","methodName":"functionN","parameters":["Int"],"returnType":"Any"},21,{"pathToFun":"org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase","methodName":"functionN","parameters":["Int"],"returnType":"IrClassSymbol"},21,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmSingleAbstractMethodLowering","methodName":"getAdditionalSupertypes","parameters":["IrType"],"returnType":"List"},21,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.IrSourceCompilerForInline","methodName":"doCreateMethodNodeFromSource","parameters":["FunctionDescriptor","JvmMethodSignature","Boolean","Method"],"returnType":"SMAPAndMethodNode"},5,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FakeInliningLocalVariablesLowering","methodName":"addFakeInliningLocalVariables","parameters":["IrFunction"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.IrInlineCodegen","methodName":"extractDefaultLambdas","parameters":["MethodNode"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.descriptors.annotations.FilteredAnnotations","methodName":"hasAnnotation","parameters":["FqName"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.descriptors.annotations.FilteredAnnotations","methodName":"iterator","parameters":[""],"returnType":"Any"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.QualifierScopeTowerProcessor","methodName":"recordLookups","parameters":["Collection","Name"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.receivers.ClassValueReceiver","methodName":"getType","parameters":[""],"returnType":"Any"},5,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowBuilderAdapter","methodName":"read","parameters":["KtElement","AccessTarget","Map"],"returnType":"Any"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.QualifierScopeTowerLevel","methodName":"getObjects","parameters":["Name","ReceiverValueWithSmartCastInfo"],"returnType":"Any"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.QualifierScopeTowerLevel","methodName":"getVariables","parameters":["Name","ReceiverValueWithSmartCastInfo"],"returnType":"Any"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.QualifierScopeTowerLevel","methodName":"getFunctions","parameters":["Name","ReceiverValueWithSmartCastInfo"],"returnType":"Any"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"isInsideSingleton","parameters":["ClassDescriptor"],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.QualifierScopeTowerProcessor","methodName":"simpleProcess","parameters":["TowerData"],"returnType":"Collection"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.QualifiedExpressionResolveUtilKt","methodName":"resolveQualifierAsReceiverInExpression","parameters":["Qualifier","DeclarationDescriptor","ExpressionTypingContext"],"returnType":"DeclarationDescriptor"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.ChainedMemberScope$Companion","methodName":"create","parameters":["String","MemberScope"],"returnType":"MemberScope"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallExpressionResolver","methodName":"resolveDeferredReceiverInQualifiedExpression","parameters":["Qualifier","KtExpression","ExpressionTypingContext"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"generateQualifier","parameters":["KtExpression","Qualifier"],"returnType":"Boolean"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.TowerLevelsKt","methodName":"getContributedObjectVariables","parameters":["ResolutionScope","Name","LookupLocation"],"returnType":"Collection"},6,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaStaticScope","methodName":"resolveMethodSignature","parameters":["JavaMethod","List","KotlinType","List"],"returnType":"MethodSignatureData"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaStaticClassScope","methodName":"getContributedClassifier","parameters":["Name","LookupLocation"],"returnType":"ClassifierDescriptor"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.SuspendTypeConversions","methodName":"conversionIsNeededAfterSubtypingCheck","parameters":["KotlinCallArgument"],"returnType":"Boolean"},3,{"pathToFun":"org.jetbrains.kotlin.types.CompositionTypeSubstitution","methodName":"get","parameters":["KotlinType"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaScope","methodName":"computeDescriptors","parameters":["DescriptorKindFilter","(Name) -> Boolean"],"returnType":"List"},9,{"pathToFun":"org.jetbrains.kotlin.types.DelegatedTypeSubstitution","methodName":"filterAnnotations","parameters":["Annotations"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaStaticClassScope","methodName":"computePropertyNames","parameters":["DescriptorKindFilter","((Name) -> Boolean)"],"returnType":"Any"},8,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaStaticClassScope","methodName":"flatMapJavaStaticSupertypesScopes","parameters":["ClassDescriptor","MutableSet","(MemberScope) -> Collection"],"returnType":"Set"},8,{"pathToFun":"org.jetbrains.kotlin.resolve.BindingContext","methodName":"get","parameters":["ReadOnlySlice","K"],"returnType":"V"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.PostponeArgumentsChecksKt","methodName":"extraLambdaInfo","parameters":["UnwrappedType","LambdaKotlinCallArgument","ConstraintSystemBuilder","KotlinDiagnosticsHolder"],"returnType":"ResolvedLambdaAtom"},2,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaStaticClassScope","methodName":"computeNonDeclaredFunctions","parameters":["MutableCollection","Name"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolutionCandidateKt","methodName":"markCandidateForCompatibilityResolve","parameters":["KotlinResolutionCandidate"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.ResolveSessionUtils","methodName":"getClassOrObjectDescriptorsByFqName","parameters":["ModuleDescriptor","FqName","Predicate"],"returnType":"Collection"},9,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaScope","methodName":"getContributedDescriptors","parameters":["DescriptorKindFilter","(Name) -> Boolean"],"returnType":"Any"},9,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.FunctionDescriptorImpl\\$CopyConfiguration","methodName":"getSubstitution","parameters":[""],"returnType":"TypeSubstitution"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.SamTypeConversions","methodName":"conversionIsNeededAfterSubtypingCheck","parameters":["KotlinCallArgument"],"returnType":"Boolean"},3,{"pathToFun":"org.jetbrains.kotlin.load.java.components.DescriptorResolverUtils","methodName":"resolveOverridesForStaticMembers","parameters":["Name","Collection","Collection","ClassDescriptor","ErrorReporter","OverridingUtil"],"returnType":"Collection"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaStaticClassScope","methodName":"computeMemberIndex","parameters":[""],"returnType":"Any"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"canSkipArrayCopyForSpreadArgument","parameters":["KtExpression"],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassDescriptor","methodName":"getStaticScope","parameters":[""],"returnType":"MemberScope"},8,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassDescriptor","methodName":"getUnsubstitutedInnerClassesScope","parameters":[""],"returnType":"MemberScope"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.TrackingBindingTrace","methodName":"report","parameters":["Diagnostic"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.builtins.functionTypesKt","methodName":"isFunctionTypeOrSubtype","parameters":["KotlinType","(KotlinType) -> Boolean"],"returnType":"Boolean"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.SamTypeConversions","methodName":"hasNonAnalyzedLambdaAsReturnType","parameters":["List","UnwrappedType"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.TypeConversions","methodName":"performCompositeConversionAfterSubtyping","parameters":["KotlinResolutionCandidate","KotlinCallArgument","ParameterDescriptor","UnwrappedType"],"returnType":"UnwrappedType"},3,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.FunctionDescriptorImpl\\$CopyConfiguration","methodName":"getOriginal","parameters":[""],"returnType":"FunctionDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.TypeConversions","methodName":"performConversionAfterSubtyping","parameters":["KotlinResolutionCandidate","KotlinCallArgument","ParameterDescriptor","UnwrappedType","ParameterTypeConversion"],"returnType":"UnwrappedType"},3,{"pathToFun":"org.jetbrains.kotlin.types.DelegatedTypeSubstitution","methodName":"approximateCapturedTypes","parameters":[""],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"asRawType","parameters":["FlexibleTypeMarker"],"returnType":"RawTypeMarker"},9,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolvedToSamWithVarargDiagnostic","methodName":"report","parameters":["DiagnosticReporter"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.ResolveSessionUtils","methodName":"getClassDescriptorsByFqName","parameters":["ModuleDescriptor","FqName"],"returnType":"Collection"},9,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassDescriptor","methodName":"getDefaultFunctionTypeForSamInterface","parameters":[""],"returnType":"SimpleType"},17,{"pathToFun":"org.jetbrains.kotlin.analyzer.KotlinModificationTrackerService$Companion","methodName":"getInstance","parameters":["Project"],"returnType":"KotlinModificationTrackerService"},9,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isNotNullOrNullableFunctionSupertype","parameters":["KotlinType"],"returnType":"boolean"},2,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaStaticClassScope","methodName":"computeFunctionNames","parameters":["DescriptorKindFilter","((Name) -> Boolean)"],"returnType":"Any"},8,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassDescriptor","methodName":"getCompanionObjectDescriptor","parameters":[""],"returnType":"ClassDescriptor"},16,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.UnitTypeConversions","methodName":"conversionIsNeededAfterSubtypingCheck","parameters":["KotlinCallArgument"],"returnType":"Boolean"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.lazy.ResolveSessionUtils","methodName":"findClassByRelativePath","parameters":["MemberScope","FqName"],"returnType":"ClassDescriptor"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.CodegenAnnotatingVisitor","methodName":"writeSamValueForValueParameters","parameters":["Collection","List"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaStaticScope","methodName":"getDispatchReceiverParameter","parameters":[""],"returnType":"ReceiverParameterDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.KnownResultProcessor","methodName":"recordLookups","parameters":["Collection","Name"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.types.FlexibleTypeImpl","methodName":"replaceAnnotations","parameters":["Annotations"],"returnType":"UnwrappedType"},8,{"pathToFun":"org.jetbrains.kotlin.contracts.EffectsExtractingVisitor","methodName":"visitLambdaExpression","parameters":["KtLambdaExpression","Unit"],"returnType":"Computation"},5,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaScope","methodName":"isVisibleAsFunction","parameters":["JavaMethodDescriptor"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaStaticClassScope","methodName":"getStaticFunctionsFromJavaSuperClasses","parameters":["Name","ClassDescriptor"],"returnType":"Set"},1,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"isArrayOrPrimitiveArray","parameters":["KotlinType"],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitSpreadElement","parameters":["IrSpreadElement","Nothing"],"returnType":"IrSpreadElement"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.ArgumentsUtilsKt","methodName":"isArrayOrArrayLiteral","parameters":["KotlinCallArgument"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitSpreadElement","parameters":["IrSpreadElement"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitSpreadElement","parameters":["IrSpreadElement","D"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.IrSpreadElement","methodName":"transform","parameters":["IrElementTransformer","D"],"returnType":"IrElement"},1,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrSpreadElementImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrArrayBuilderKt","methodName":"irArrayOf","parameters":["JvmIrBuilder","IrType","List"],"returnType":"IrExpression"},6,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrArrayBuilder","methodName":"addSpread","parameters":["IrExpression"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.BuiltinSpecialProperties","methodName":"hasBuiltinSpecialPropertyFqName","parameters":["CallableMemberDescriptor"],"returnType":"Boolean"},3,{"pathToFun":"org.jetbrains.kotlin.ir.backend.jvm.serialization.JvmIrLinker$JvmCurrentModuleDeserializer","methodName":"declareIrSymbol","parameters":["IrSymbol"],"returnType":"Unit"},9,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrArrayBuilder","methodName":"copyArray","parameters":["IrExpression"],"returnType":"IrExpression"},1,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitSpreadElement","parameters":["IrSpreadElement","Nothing"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.ir.util.AdditionalIrUtilsKt","methodName":"getPropertyGetter","parameters":["IrClass","String"],"returnType":"IrSimpleFunctionSymbol"},2,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrSpreadElementImpl","methodName":"acceptChildren","parameters":["IrElementVisitor","D"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.JvmGeneratorExtensions$JvmSamConversion","methodName":"isPlatformSamType","parameters":["KotlinType"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitSpreadElement","parameters":["IrSpreadElement"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.ir.util.AdditionalIrUtilsKt","methodName":"getPropertyDeclaration","parameters":["IrClass","String"],"returnType":"IrProperty"},2,{"pathToFun":"org.jetbrains.kotlin.load.java.BuiltinSpecialProperties","methodName":"hasBuiltinSpecialPropertyFqNameImpl","parameters":["CallableMemberDescriptor"],"returnType":"Boolean"},3,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.samConversionsKt","methodName":"isSamType","parameters":["GeneratorExtensions.SamConversion","KotlinType"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.ArraySize","methodName":"toCallable","parameters":["IrFunctionAccessExpression","JvmMethodSignature","JvmBackendContext"],"returnType":"IrIntrinsicFunction"},2,{"pathToFun":"org.jetbrains.kotlin.ir.util.AdditionalIrUtilsKt","methodName":"getPropertyGetter","parameters":["IrClassSymbol","String"],"returnType":"IrSimpleFunctionSymbol"},1,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrSpreadElementImpl","methodName":"transformChildren","parameters":["IrElementTransformer","D"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaStaticClassScope","methodName":"computeClassNames","parameters":["DescriptorKindFilter","((Name) -> Boolean)"],"returnType":"Set"},8,{"pathToFun":"org.jetbrains.kotlin.ir.backend.jvm.serialization.JvmIrLinker","methodName":"isJavaDescriptor","parameters":["DeclarationDescriptor"],"returnType":"Boolean"},9,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.CapturedVarsOptimizationMethodTransformer$Transformer","methodName":"rewriteRefValue","parameters":["CapturedVarDescriptor"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generatePropertyReference","parameters":["KtElement","VariableDescriptor","VariableDescriptor","StackValue"],"returnType":"StackValue"},1,{"pathToFun":"org.jetbrains.kotlin.builtins.ReflectionTypes","methodName":"getKPropertyType","parameters":["Annotations","List","KotlinType","Boolean"],"returnType":"SimpleType"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.callableReferenceUtilKt","methodName":"generatePropertyReferenceSignature","parameters":["InstructionAdapter","CallableDescriptor","GenerationState"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.deprecation.DeprecatedByAnnotation$Companion","methodName":"create","parameters":["AnnotationDescriptor","AnnotationDescriptor","DeclarationDescriptor","Boolean","ApiVersion"],"returnType":"DeprecatedByAnnotation"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyReferenceCodegen","methodName":"generateMethod","parameters":["String","Int","Method","InstructionAdapter.() -> Unit"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.UtilKt","methodName":"removeUnusedLocalVariables","parameters":["MethodNode"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.ProperTrackedReferenceValue","methodName":"equals","parameters":["Any"],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyCodegen","methodName":"isReferenceablePropertyWithGetter","parameters":["PropertyDescriptor"],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.ReferenceTrackingInterpreter","methodName":"merge","parameters":["BasicValue","BasicValue"],"returnType":"BasicValue"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.SamWrapperTransformationInfo","methodName":"shouldRegenerate","parameters":["Boolean"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"mapPropertyReferenceSignature","parameters":["FunctionDescriptor"],"returnType":"Method"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.deprecation.DeprecatedByAnnotation$StandardDeprecated","methodName":"hashCode","parameters":[""],"returnType":"Int"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyReferenceCodegen","methodName":"generateBody","parameters":[""],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.CapturedVarsOptimizationMethodTransformer$Transformer","methodName":"rewrite","parameters":[""],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.JvmRuntimeTypes","methodName":"getSupertypeForPropertyReference","parameters":["VariableDescriptorWithAccessors","Boolean","Boolean"],"returnType":"KotlinType"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.UtilKt","methodName":"isSize2LoadStoreOperation","parameters":["VarInsnNode"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyReferenceCodegen","methodName":"generateAccessors","parameters":[""],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$FieldForSharedVar","methodName":"putSelector","parameters":["Type","KotlinType","InstructionAdapter"],"returnType":"void"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyReferenceCodegen","methodName":"generateDeclaration","parameters":[""],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyReferenceCodegen$Companion","methodName":"createFakeOpenDescriptor","parameters":["FunctionDescriptor","ClassDescriptor"],"returnType":"FunctionDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyReferenceCodegen$PropertyReferenceGenerationStrategy","methodName":"doGenerateBody","parameters":["ExpressionCodegen","JvmMethodSignature"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyReferenceCodegen","methodName":"generateConstructor","parameters":[""],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.annotations.AnnotationUtilKt","methodName":"argumentValue","parameters":["AnnotationDescriptor","String"],"returnType":"ConstantValue"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper","methodName":"isPropertyWithGetterSignaturePresent","parameters":["CallableMemberDescriptor"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyReferenceCodegen$Companion","methodName":"getWrapperMethodForPropertyReference","parameters":["VariableDescriptor","Int"],"returnType":"Method"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyReferenceCodegen","methodName":"putInstanceOnStack","parameters":["StackValue"],"returnType":"StackValue"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyReferenceCodegen","methodName":"generateKotlinMetadataAnnotation","parameters":[""],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.builtins.ReflectionTypes$Companion","methodName":"isNumberedKMutablePropertyType","parameters":["KotlinType"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.CapturedVarsOptimizationMethodTransformer$Transformer","methodName":"findCleanInstructions","parameters":["CapturedVarDescriptor","Int","InsnList"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.codegenUtilKt","methodName":"generateMethod","parameters":["ClassBuilder","String","Int","Method","PsiElement","JvmDeclarationOrigin","GenerationState","InstructionAdapter.() -> Unit"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyReferenceCodegen$Companion","methodName":"findGetFunction","parameters":["VariableDescriptor"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.PropertyReferenceCodegen$Companion","methodName":"get","parameters":["KotlinType"],"returnType":"TypeProjection"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.DoubleColonExpressionResolver","methodName":"bindPropertyReference","parameters":["KtCallableReferenceExpression","KotlinType","ResolutionContext","Boolean"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"method","parameters":["String","Type","Type..."],"returnType":"Method"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.PropertyReferenceLowering","methodName":"computeSignatureString","parameters":["IrBuilderWithScope","IrCallableReference"],"returnType":"IrExpression"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.JavaClassProperty","methodName":"invoke","parameters":["IrFunctionAccessExpression","ExpressionCodegen","BlockInfo"],"returnType":"PromisedValue"},2,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitPropertyReference","parameters":["IrPropertyReference"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"createAnnotationConstructorParameters","parameters":["ClassConstructorDescriptorImpl"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.ir.util.DeclarationStubGenerator","methodName":"generateOrGetScopedTypeParameterStub","parameters":["TypeParameterDescriptor"],"returnType":"IrTypeParameter"},2,{"pathToFun":"org.jetbrains.kotlin.psi2ir.intermediate.IrUtilsKt","methodName":"copyTypesFromExtensionAccessor","parameters":["SimpleFunctionDescriptor","PropertyAccessorDescriptor"],"returnType":"FunctionDescriptor"},2,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassDescriptor","methodName":"getUnsubstitutedPrimaryConstructor","parameters":[""],"returnType":"ClassConstructorDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.PropertyReferenceLowering","methodName":"buildReflectedContainerReferenceKClass","parameters":["JvmIrBuilder","IrMemberAccessExpression"],"returnType":"IrExpression"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.CheckIrElementVisitor","methodName":"visitPropertyReference","parameters":["IrPropertyReference"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.JavaClassProperty","methodName":"invokeGetClass","parameters":["PromisedValue"],"returnType":"Unit"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.GenerateMultifileFacadesKt","methodName":"shouldMoveToFacade","parameters":["IrField"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.PropertyReferenceLowering","methodName":"addFakeOverride","parameters":["IrClass","IrSimpleFunction"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"getConstructorVisibility","parameters":["ClassDescriptor"],"returnType":"Visibility"},3,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrPropertyReferenceImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},1,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedClassDescriptor","methodName":"getVisibility","parameters":[""],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitPropertyReference","parameters":["IrPropertyReference"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitPropertyReference","parameters":["IrPropertyReference","D"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ReflectionReferencesGenerator","methodName":"generatePropertyReference","parameters":["Int","Int","KotlinType","PropertyDescriptor","Map","IrStatementOrigin","Boolean"],"returnType":"IrPropertyReference"},1,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedSimpleFunctionDescriptor","methodName":"getVisibility","parameters":[""],"returnType":"Any"},8,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.ReceiverParameterDescriptorImpl","methodName":"copy","parameters":["DeclarationDescriptor"],"returnType":"ReceiverParameterDescriptor"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.PropertyReferenceLowering","methodName":"propertyReferenceKindFor","parameters":["IrMemberAccessExpression"],"returnType":"PropertyReferenceKind"},1,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitPropertyReference","parameters":["IrPropertyReference","Nothing"],"returnType":"IrElement"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.InventNamesForLocalClasses$NameInventor","methodName":"visitPropertyReference","parameters":["IrPropertyReference","Data"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedSimpleFunctionDescriptor","methodName":"getOverriddenDescriptors","parameters":[""],"returnType":"Any"},8,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.InlineCallableReferenceToLambdaPhase","methodName":"visitPropertyReference","parameters":["IrPropertyReference"],"returnType":"IrExpression"},1,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedSimpleFunctionDescriptor","methodName":"getReturnType","parameters":[""],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitPropertyReference","parameters":["IrPropertyReference","Nothing"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.PropertyReferenceLowering","methodName":"propertyReferenceKind","parameters":["Boolean","Int"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ReflectionReferencesGenerator","methodName":"getFieldForPropertyReference","parameters":["PropertyDescriptor"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.JavaClassProperty","methodName":"invokeWith","parameters":["PromisedValue"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.PropertyReferenceLowering","methodName":"addOverride","parameters":["IrClass","IrSimpleFunction","IrBuilderWithScope.(List"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.contracts.model.MutableContextInfo","methodName":"or","parameters":["MutableContextInfo"],"returnType":"MutableContextInfo"},6,{"pathToFun":"org.jetbrains.kotlin.contracts.model.visitors.Reducer","methodName":"visitAnd","parameters":["ESAnd"],"returnType":"ESExpression"},6,{"pathToFun":"org.jetbrains.kotlin.contracts.model.structure.EffectsKt","methodName":"isReturns","parameters":["ESEffect","ESReturns.() -> Boolean"],"returnType":"Boolean"},8,{"pathToFun":"org.jetbrains.kotlin.codegen.Or","methodName":"condJump","parameters":["Label","InstructionAdapter","Boolean"],"returnType":"Unit"},7,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.TypeAliasConstructorDescriptorImpl","methodName":"createSubstitutedCopy","parameters":["DeclarationDescriptor","FunctionDescriptor","Kind","Name","Annotations","SourceElement"],"returnType":"TypeAliasConstructorDescriptorImpl"},11,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"getVarargParameterType","parameters":["KotlinType"],"returnType":"KotlinType"},6,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateBooleanOr","parameters":["KtBinaryExpression"],"returnType":"StackValue"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.DiagnosticReporterByTrackingStrategy","methodName":"constraintError","parameters":["KotlinCallDiagnostic"],"returnType":"Unit"},6,{"pathToFun":"org.jetbrains.kotlin.contracts.model.visitors.InfoCollector","methodName":"visitOr","parameters":["ESOr"],"returnType":"MutableContextInfo"},6,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.TypeAliasConstructorDescriptorImpl","methodName":"getConstructedClass","parameters":[""],"returnType":"ClassDescriptor"},11,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.TypeAliasConstructorDescriptorImpl","methodName":"substitute","parameters":["TypeSubstitutor"],"returnType":"TypeAliasConstructorDescriptor"},11,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"getPrimitiveArrayKotlinTypeByPrimitiveKotlinType","parameters":["KotlinType"],"returnType":"SimpleType"},6,{"pathToFun":"org.jetbrains.kotlin.contracts.model.structure.ESAnd","methodName":"accept","parameters":["ESExpressionVisitor"],"returnType":"T"},6,{"pathToFun":"org.jetbrains.kotlin.contracts.model.MutableContextInfo","methodName":"intersect","parameters":["MutableMap","MutableMap"],"returnType":"MutableMap"},6,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.TypeAliasConstructorDescriptorImpl","methodName":"getContainingDeclaration","parameters":[""],"returnType":"TypeAliasDescriptor"},11,{"pathToFun":"org.jetbrains.kotlin.resolve.deprecation.DeprecationResolver","methodName":"deprecationsByConstituentTypes","parameters":["KotlinType"],"returnType":"List"},11,{"pathToFun":"org.jetbrains.kotlin.contracts.model.structure.ESOr","methodName":"accept","parameters":["ESExpressionVisitor"],"returnType":"T"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.synthetic.FunInterfaceConstructorsSyntheticScope","methodName":"getTypeAliasSamConstructor","parameters":["TypeAliasDescriptor"],"returnType":"SamConstructorDescriptor"},11,{"pathToFun":"org.jetbrains.kotlin.contracts.model.visitors.InfoCollector","methodName":"visitAnd","parameters":["ESAnd"],"returnType":"MutableContextInfo"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.OverloadResolver","methodName":"isPrivate","parameters":["DeclarationDescriptor"],"returnType":"Any"},5,{"pathToFun":"org.jetbrains.kotlin.builtins.KotlinBuiltIns","methodName":"getBuiltInTypeByClassName","parameters":["String"],"returnType":"SimpleType"},7,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.ResolutionCandidateKt","methodName":"markCandidateForCompatibilityResolve","parameters":["CallableReferencesCandidateFactory","SmartList"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.ConstraintSystemCallDiagnostic","methodName":"report","parameters":["DiagnosticReporter"],"returnType":"Any"},6,{"pathToFun":"org.jetbrains.kotlin.contracts.model.visitors.Reducer","methodName":"visitOr","parameters":["ESOr"],"returnType":"ESExpression"},6,{"pathToFun":"org.jetbrains.kotlin.resolve.source.PsiSourceFile","methodName":"hashCode","parameters":[""],"returnType":"Int"},5,{"pathToFun":"org.jetbrains.kotlin.contracts.model.functors.OrFunctor","methodName":"invokeWithReturningEffects","parameters":["List","List"],"returnType":"List"},7,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.TypeAliasConstructorDescriptorImpl","methodName":"getReturnType","parameters":[""],"returnType":"KotlinType"},11,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.TowerResolver$SuccessfulResultCollector","methodName":"isSuccessfulPreserveCompatibility","parameters":["C"],"returnType":"Boolean"},5,{"pathToFun":"org.jetbrains.kotlin.descriptors.impl.TypeAliasConstructorDescriptorImpl","methodName":"getOriginal","parameters":[""],"returnType":"TypeAliasConstructorDescriptor"},11,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"or","parameters":["StackValue","StackValue"],"returnType":"StackValue"},7,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ReflectionReferencesGenerator","methodName":"selectBoundReceiver","parameters":["ResolvedCall"],"returnType":"ReceiverValue"},5,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.SyntheticAccessorLowering","methodName":"makeSimpleFunctionAccessor","parameters":["IrSimpleFunction","IrCall","IrDeclarationParent"],"returnType":"IrSimpleFunction"},7,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ReflectionReferencesGenerator","methodName":"adaptResolvedValueArgument","parameters":["Int","Int","ResolvedValueArgument","IrSimpleFunction","ValueParameterDescriptor","Int"],"returnType":"IrExpression"},5,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ReflectionReferencesGenerator","methodName":"kFunctionTypeToFunctionType","parameters":["KotlinType","Boolean"],"returnType":"Any"},5,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.OrOr","methodName":"invoke","parameters":["IrFunctionAccessExpression","ExpressionCodegen","BlockInfo"],"returnType":"PromisedValue"},7,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.LocalDeclarationsLowering$LocalDeclarationsTransformer","methodName":"createNewCall","parameters":["IrCall","IrFunction"],"returnType":"Any"},5,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.OrOr$BooleanDisjunction","methodName":"jumpIfFalse","parameters":["Label"],"returnType":"Unit"},7,{"pathToFun":"org.jetbrains.kotlin.ir.builders.PrimitivesKt","methodName":"oror","parameters":["IrGeneratorContextInterface","Int","Int","IrExpression","IrExpression","IrStatementOrigin"],"returnType":"IrWhen"},7,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ReflectionReferencesGenerator","methodName":"maybeKFunctionTypeToFunctionType","parameters":["KotlinType"],"returnType":"Any"},5,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ReflectionReferencesGenerator","methodName":"putAdaptedValueArguments","parameters":["Int","Int","IrFunctionAccessExpression","IrSimpleFunction","ResolvedCall"],"returnType":"Unit"},5,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ReflectionReferencesGenerator","methodName":"generateAdaptedCallableReference","parameters":["KtCallableReferenceExpression","CallBuilder","KotlinType"],"returnType":"IrExpression"},5,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.SyntheticAccessorLowering","methodName":"createSimpleFunctionCall","parameters":["IrFunction","IrFunctionSymbol","IrClassSymbol"],"returnType":"Any"},7,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ReflectionReferencesGenerator","methodName":"createAdapterFun","parameters":["Int","Int","FunctionDescriptor","List","KotlinType","CallBuilder","KotlinType"],"returnType":"IrSimpleFunction"},5,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.SyntheticAccessorLowering","methodName":"accessorName","parameters":["IrSimpleFunction","IrClassSymbol"],"returnType":"Name"},7,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.FunctionReferenceLowering$FunctionReferenceBuilder","methodName":"hasVarargMappedToElement","parameters":[""],"returnType":"Boolean"},5,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ReflectionReferencesGenerator","methodName":"createAdapteeCall","parameters":["Int","Int","IrFunctionSymbol","CallBuilder","IrSimpleFunction"],"returnType":"IrExpression"},5,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitTypeConstraintList","parameters":["KtTypeConstraintList","Void"],"returnType":"Void"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitTypeConstraintList","parameters":["KtTypeConstraintList"],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitTypeConstraint","parameters":["KtTypeConstraint"],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeConstraintList","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitTypeConstraint","parameters":["KtTypeConstraint","D"],"returnType":"R"},4,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseTypeConstraint","parameters":[""],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseTypeConstraintList","parameters":[""],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeConstraintList","methodName":"getConstraints","parameters":[""],"returnType":"List"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeConstraint","methodName":"getBoundTypeReference","parameters":[""],"returnType":"KtTypeReference"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitTypeConstraintList","parameters":["KtTypeConstraintList","D"],"returnType":"R"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitTypeConstraint","parameters":["KtTypeConstraint","Void"],"returnType":"Void"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeConstraint","methodName":"getSubjectTypeParameterName","parameters":[""],"returnType":"KtSimpleNameExpression"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtTypeConstraint","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsChecker","methodName":"checkOnlyOneTypeParameterBound","parameters":["TypeParameterDescriptor","KtTypeParameter","KtTypeParameterListOwner"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionCodegen","methodName":"generateDelegateToStaticMethodBody","parameters":["boolean","MethodVisitor","Method","String","boolean","Type"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.FunctionCodegen","methodName":"generateDelegateToMethodBody","parameters":["int","MethodVisitor","Method","String","int","boolean","Type"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.OverrideResolver$Companion","methodName":"checkInvisibleFakeOverride","parameters":["CallableMemberDescriptor","Collection","CheckInheritedSignaturesReportStrategy"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"getAccessorForJvmDefaultCompatibility","parameters":["D"],"returnType":"D"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.InterfaceImplBodyCodegen","methodName":"generateDelegationToSuperDefaultImpls","parameters":["FunctionDescriptor","FunctionDescriptor"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.ir.IrUtilsKt","methodName":"hasJvmDefaultNoCompatibilityAnnotation","parameters":["IrClass"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.SyntheticDeclarationsGenerator","methodName":"visitFunctionDescriptor","parameters":["FunctionDescriptor","IrDeclarationContainer"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.InterfaceLowering","methodName":"bridgeViaAccessorTo","parameters":["IrFunction","IrFunction"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.contracts.model.structure.ESAnyType","methodName":"toKotlinType","parameters":["KotlinBuiltIns"],"returnType":"KotlinType"},1,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinParsing","methodName":"parseMultiDeclarationName","parameters":["TokenSet"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.CapturedVarsOptimizationMethodTransformer$Transformer","methodName":"getCapturedVarOrNull","parameters":["BasicValue"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.name.SpecialNames","methodName":"safeIdentifier","parameters":["String"],"returnType":"Name"},3,{"pathToFun":"org.jetbrains.kotlin.resolve.jvm.JvmPrimitiveType","methodName":"get","parameters":["String"],"returnType":"JvmPrimitiveType"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.serialization.JvmSerializerExtension","methodName":"serializeFlexibleType","parameters":["FlexibleType","ProtoBuf.Type.Builder","ProtoBuf.Type.Builder"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue\\$StackValueWithSimpleReceiver","methodName":"dup","parameters":["InstructionAdapter","boolean"],"returnType":"void"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.StackValue","methodName":"dup","parameters":["InstructionAdapter","boolean"],"returnType":"void"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.range.RangeCodegenUtilKt","methodName":"isPrimitiveNumberUntil","parameters":["CallableDescriptor"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.RangeCodegenUtilKt","methodName":"isCharSequenceIndices","parameters":["CallableDescriptor"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.RangeCodegenUtilKt","methodName":"isPrimitiveRangeToExtension","parameters":["CallableDescriptor"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.ArrayRangeValue","methodName":"createForLoopGenerator","parameters":["ExpressionCodegen","KtForExpression"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.RangeCodegenUtilKt","methodName":"isCollectionIndices","parameters":["CallableDescriptor"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.RangeCodegenUtilKt","methodName":"isArrayOrPrimitiveArrayWithIndex","parameters":["CallableDescriptor"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.ForInArrayLoopGenerator","methodName":"checkPreCondition","parameters":["Label"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.RangeCodegenUtilKt","methodName":"isComparableRangeTo","parameters":["CallableDescriptor"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.ForInArrayLoopGenerator","methodName":"assignToLoopParameter","parameters":[""],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.RangeCodegenUtilKt","methodName":"isSequenceWithIndex","parameters":["CallableDescriptor"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.RangeCodegenUtilKt","methodName":"isPrimitiveProgressionReverse","parameters":["CallableDescriptor"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.RangeCodegenUtilKt","methodName":"isUnsignedIntegerDownTo","parameters":["CallableDescriptor"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.RangeCodegenUtilKt","methodName":"isIterableWithIndex","parameters":["CallableDescriptor"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.ReferenceTrackingInterpreter","methodName":"ternaryOperation","parameters":["AbstractInsnNode","BasicValue","BasicValue","BasicValue"],"returnType":"BasicValue"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.ForInArrayLoopGenerator","methodName":"checkPostConditionAndIncrement","parameters":["Label"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.ForInArrayLoopGenerator","methodName":"beforeLoop","parameters":[""],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.RangeCodegenUtilKt","methodName":"isPrimitiveNumberDownTo","parameters":["CallableDescriptor"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.RangeCodegenUtilKt","methodName":"isArrayOrPrimitiveArrayIndices","parameters":["CallableDescriptor"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.RangeCodegenUtilKt","methodName":"isTopLevelExtensionOnType","parameters":["CallableDescriptor","String","String","(KotlinType) -> Boolean"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.forLoop.ForInArrayLoopGenerator","methodName":"checkEmptyLoop","parameters":["Label"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.RangeCodegenUtilKt","methodName":"isUnsignedIntegerUntil","parameters":["CallableDescriptor"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.RangeCodegenUtilKt","methodName":"isCharSequenceWithIndex","parameters":["CallableDescriptor"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.range.RangeCodegenUtilKt","methodName":"isUnsignedIntegerRangeTo","parameters":["CallableDescriptor"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.ArrayIterationHandler","methodName":"matchIterable","parameters":["IrExpression"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.InitializerCallReplacer","methodName":"visitCall","parameters":["IrCall"],"returnType":"IrCall"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.HeaderInfoBuilder","methodName":"visitExpression","parameters":["IrExpression","IrCall"],"returnType":"HeaderInfo"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.IndexedGetLoopHeader","methodName":"initializeIteration","parameters":["IrVariable","Map","DeclarationIrBuilder"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.ExpressionHandler","methodName":"build","parameters":["IrExpression","Nothing","IrSymbol"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.IndexedGetLoopHeader","methodName":"buildLoop","parameters":["DeclarationIrBuilder","IrLoop","IrExpression"],"returnType":"LoopReplacement"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.loops.IndexedGetIterationHandler","methodName":"build","parameters":["IrExpression","IrSymbol"],"returnType":"HeaderInfo"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.BuiltinSpecialProperties","methodName":"getBuiltinSpecialPropertyGetterName","parameters":["CallableMemberDescriptor"],"returnType":"String"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"canBeUsedInAnnotation","parameters":["KtExpression"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"usesVariableAsConstant","parameters":["KtExpression"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorKt","methodName":"binaryOperation","parameters":["CompileTimeType","CompileTimeType","String","Function2","Function2"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"isPureConstant","parameters":["KtExpression"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"evaluateUnaryAndCheck","parameters":["OperationArgument","String","KtExpression"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorKt","methodName":"evaluateUnaryAndCheck","parameters":["String","CompileTimeType","Any","() -> Unit"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorKt","methodName":"unaryOperation","parameters":["CompileTimeType","String","Function1","Function1"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"usesNonConstValAsConstant","parameters":["KtExpression"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.JvmBackendContext","methodName":"referenceFunction","parameters":["FunctionDescriptor"],"returnType":"IrFunctionSymbol"},1,{"pathToFun":"org.jetbrains.kotlin.ir.declarations.lazy.IrLazySymbolTable","methodName":"referenceSimpleFunction","parameters":["FunctionDescriptor"],"returnType":"IrSimpleFunctionSymbol"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorKt","methodName":"evaluateUnary","parameters":["String","String","Any","() -> Unit"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.IrConstKind","methodName":"toString","parameters":[""],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorKt","methodName":"typeStrToCompileTimeType","parameters":["String"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitIfExpression","parameters":["KtIfExpression","StackValue"],"returnType":"StackValue"},5,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"withNullability","parameters":["SimpleTypeMarker","Boolean"],"returnType":"SimpleTypeMarker"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper$Companion","methodName":"getContainerClassIdForClassDescriptor","parameters":["ClassDescriptor"],"returnType":"ClassId"},4,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"getApproximatedIntegerLiteralType","parameters":["TypeConstructorMarker"],"returnType":"KotlinTypeMarker"},2,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher","methodName":"visitIfExpression","parameters":["KtIfExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},5,{"pathToFun":"org.jetbrains.kotlin.types.model.TypeSystemContext","methodName":"isFlexibleNothing","parameters":["KotlinTypeMarker"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"withNullability","parameters":["KotlinTypeMarker","Boolean"],"returnType":"KotlinTypeMarker"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.state.KotlinTypeMapper$ContainingClassesInfo$Companion","methodName":"forClassMember","parameters":["ClassId"],"returnType":"ContainingClassesInfo"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InlineCodegen$Companion","methodName":"getMemberScope","parameters":["FunctionDescriptor"],"returnType":"MemberScope"},4,{"pathToFun":"org.jetbrains.kotlin.ir.descriptors.WrappedTypeParameterDescriptor","methodName":"getDeclarationDescriptor","parameters":[""],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.ReifiedTypeInliner","methodName":"processIs","parameters":["MethodInsnNode","InsnList","KotlinType","Type"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.types.checker.TypeCheckingProcedure","methodName":"getOutType","parameters":["TypeParameterDescriptor","TypeProjection"],"returnType":"KotlinType"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.InlineChecker","methodName":"checkLambdaInvokeOrExtensionCall","parameters":["CallCheckerContext","CallableDescriptor","CallableDescriptor","KtExpression"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tasks.AbstractTracingStrategy","methodName":"noValueForParameter","parameters":["BindingTrace","ValueParameterDescriptor"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.coroutines.CoroutineTransformer","methodName":"shouldGenerateStateMachine","parameters":["MethodNode"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.diagnostics.diagnosticUtilsKt","methodName":"reportDiagnosticOnce","parameters":["BindingTrace","Diagnostic"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.ParametersBuilder","methodName":"addCapturedParamCopy","parameters":["CapturedParamInfo"],"returnType":"CapturedParamInfo"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.AnonymousObjectTransformer","methodName":"getNewFieldName","parameters":["String","Boolean"],"returnType":"String"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.diagnostics.MutableDiagnosticsWithSuppression","methodName":"forElement","parameters":["PsiElement"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.coroutines.CoroutineTransformer","methodName":"replaceFakesWithReals","parameters":["MethodNode"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.inlineCodegenUtilsKt","methodName":"isThis0","parameters":["String"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.types.ErrorUtils\\$UninferredParameterTypeConstructor","methodName":"getDeclarationDescriptor","parameters":[""],"returnType":"ClassifierDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.serialization.JvmSerializerExtension","methodName":"writeInlineParameterNullCheckRequirement","parameters":["MutableVersionRequirementTable","(Int) -> Unit"],"returnType":"Unit"},3,{"pathToFun":"org.jetbrains.kotlin.types.TypeApproximatorConfiguration$AbstractCapturedTypesApproximation","methodName":"capturedType","parameters":["TypeSystemInferenceExtensionContext","CapturedTypeMarker"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.AnonymousObjectTransformer","methodName":"shouldRenameThis0","parameters":["FieldRemapper","Collection"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.AnonymousObjectTransformer","methodName":"doTransform","parameters":["FieldRemapper"],"returnType":"InlineResult"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.ReifiedTypeInliner","methodName":"rewriteNextTypeInsn","parameters":["MethodInsnNode","Int","(AbstractInsnNode) -> Boolean"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.RemapVisitor","methodName":"visitIincInsn","parameters":["int","int"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.ClassFileFactory","methodName":"get","parameters":["String"],"returnType":"OutputFile"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.FileMapping","methodName":"toSourceInfo","parameters":[""],"returnType":"SourceInfo"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.transformationUtilsKt","methodName":"getNewFieldsToGenerate","parameters":["List"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.AbstractTypeCheckerContextForConstraintSystem","methodName":"extractTypeForProjectedType","parameters":["KotlinTypeMarker","Boolean"],"returnType":"KotlinTypeMarker"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.InlineChecker","methodName":"checkNotInDefaultParameter","parameters":["CallCheckerContext","CallableDescriptor","KtExpression"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.AnonymousObjectTransformer","methodName":"inlineMethod","parameters":["FieldRemapper","MethodVisitor","MethodNode","ParametersBuilder","Boolean"],"returnType":"InlineResult"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InliningContext","methodName":"recordRegeneratedAnonymousObject","parameters":["String"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.AnonymousObjectTransformer","methodName":"writeOuterInfo","parameters":["ClassVisitor"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.AnonymousObjectTransformationInfo","methodName":"createTransformer","parameters":["InliningContext","Boolean","String"],"returnType":"ObjectTransformer"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.RemappingClassBuilder","methodName":"defineClass","parameters":["PsiElement","int","int","String","String","String","String[]"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.callUtil.callUtilKt","methodName":"getValueArgumentListOrElement","parameters":["Call"],"returnType":"KtElement"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.ObjectTransformer","methodName":"createRemappingClassBuilderViaFactory","parameters":["InliningContext"],"returnType":"ClassBuilder"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.RegeneratedLambdaFieldRemapper","methodName":"findFieldInSuper","parameters":["FieldInsnNode"],"returnType":"CapturedParamInfo"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.transformationUtilsKt","methodName":"filterSkipped","parameters":["List"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.AnonymousObjectTransformationInfo","methodName":"canRemoveAfterTransformation","parameters":[""],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.NameGenerator","methodName":"genLambdaClassName","parameters":[""],"returnType":"String"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.inlineCodegenUtilsKt","methodName":"buildClassReaderByInternalName","parameters":["GenerationState","String"],"returnType":"ClassReader"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.coroutines.CoroutineTransformer","methodName":"isContinuationNotLambda","parameters":[""],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.PossiblyBareType","methodName":"bare","parameters":["TypeConstructor","boolean"],"returnType":"PossiblyBareType"},1,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"removeExactAnnotation","parameters":["KotlinTypeMarker"],"returnType":"KotlinTypeMarker"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.inline.InlineUtil","methodName":"allowsNonLocalReturns","parameters":["CallableDescriptor"],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.TypeRemapper","methodName":"addMapping","parameters":["String","String"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.AnonymousObjectTransformer","methodName":"getMethodParametersWithCaptured","parameters":["ParametersBuilder","MethodNode"],"returnType":"Parameters"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.ParametersBuilder","methodName":"listCaptured","parameters":[""],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InlineResult","methodName":"addChangedType","parameters":["String","String"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.coroutines.CoroutineTransformer","methodName":"isSuspendFunctionWithFakeConstructorCall","parameters":["MethodNode"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.diagnostics.DiagnosticsWithSuppression","methodName":"forElement","parameters":["PsiElement"],"returnType":"Collection"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.model.NoValueForParameter","methodName":"report","parameters":["DiagnosticReporter"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.resolvedCallUtil.resolvedCallUtilKt","methodName":"getExplicitReceiverValue","parameters":["ResolvedCall"],"returnType":"ReceiverValue"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.AsmTypeRemapper","methodName":"createSignatureRemapper","parameters":["SignatureVisitor"],"returnType":"SignatureVisitor"},1,{"pathToFun":"org.jetbrains.kotlin.types.model.MarkerExtensionsKt","methodName":"captureStatus","parameters":["CapturedTypeMarker","TypeSystemInferenceExtensionContext"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.AnonymousObjectTransformer","methodName":"inlineMethodAndUpdateGlobalResult","parameters":["FieldRemapper","MethodVisitor","MethodNode","ParametersBuilder","Boolean"],"returnType":"InlineResult"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.RegeneratedLambdaFieldRemapper","methodName":"isRecapturedLambdaType","parameters":["String","Boolean"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.RegeneratedLambdaFieldRemapper","methodName":"canProcess","parameters":["String","String","Boolean"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.ParametersBuilder","methodName":"addCapturedParam","parameters":["Type","String","String","Type","Boolean","ParameterInfo"],"returnType":"CapturedParamInfo"},1,{"pathToFun":"org.jetbrains.kotlin.types.ErrorType","methodName":"replaceAnnotations","parameters":["Annotations"],"returnType":"SimpleType"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.TypeParameterMappings","methodName":"get","parameters":["String"],"returnType":"TypeParameterMapping"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.PossiblyBareType","methodName":"getBareTypeConstructor","parameters":[""],"returnType":"TypeConstructor"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.RemappingClassBuilder","methodName":"isSpilledCoroutineVariableName","parameters":["String"],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"typeParameter","parameters":["CapturedTypeMarker"],"returnType":"TypeParameterMarker"},1,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaScope","methodName":"definitelyDoesNotContainName","parameters":["Name"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.coroutines.CoroutineTransformer","methodName":"isSuspendLambda","parameters":["MethodNode"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.RemappingClassBuilder","methodName":"newAnnotation","parameters":["String","boolean"],"returnType":"AnnotationVisitor"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.AnonymousObjectTransformer","methodName":"writeTransformedMetadata","parameters":["KotlinClassHeader","ClassBuilder"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.AnonymousObjectTransformer","methodName":"addUniqueField","parameters":["String"],"returnType":"String"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.PossiblyBareType","methodName":"isBareTypeNullable","parameters":[""],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InliningContext","methodName":"subInlineWithClassRegeneration","parameters":["NameGenerator","MutableMap","InlineCallSiteInfo","TransformationInfo"],"returnType":"InliningContext"},1,{"pathToFun":"org.jetbrains.kotlin.types.TypeApproximatorConfiguration$IntegerLiteralsTypesApproximation","methodName":"capturedType","parameters":["TypeSystemInferenceExtensionContext","CapturedTypeMarker"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.GlobalInlineContext","methodName":"isTypeFromInlineFunction","parameters":["String"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.AnonymousObjectTransformer","methodName":"transformMetadata","parameters":["KotlinClassHeader"],"returnType":"Pair"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.coroutines.CoroutineTransformer","methodName":"isResumeImpl","parameters":["MethodNode"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.DiagnosticReporterByTrackingStrategy","methodName":"isSpecialFunction","parameters":["ResolvedAtom"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.RemappingClassBuilder","methodName":"getVisitor","parameters":[""],"returnType":"ClassVisitor"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.MethodInlinerUtilKt","methodName":"findCapturedFieldAssignmentInstructions","parameters":["MethodNode"],"returnType":"Sequence"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"isStaticField","parameters":["StackValue"],"returnType":"boolean"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.InlineChecker","methodName":"isInsideCall","parameters":["KtExpression"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.DiagnosticReporterByTrackingStrategy","methodName":"onCall","parameters":["KotlinCallDiagnostic"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.RemappingClassBuilder","methodName":"getDelegate","parameters":[""],"returnType":"ClassBuilder"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.RemappingClassBuilder","methodName":"newMethod","parameters":["JvmDeclarationOrigin","int","String","String","String","String[]"],"returnType":"MethodVisitor"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InlineAdapter","methodName":"visitIincInsn","parameters":["int","int"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.AnonymousObjectTransformer","methodName":"isFirstDeclSiteLambdaFieldRemapper","parameters":["FieldRemapper"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.transformationUtilsKt","methodName":"transformToFieldInfo","parameters":["Type","List"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.AnonymousObjectTransformer","methodName":"extractParametersMappingAndPatchConstructor","parameters":["MethodNode","ParametersBuilder","ParametersBuilder","AnonymousObjectTransformationInfo","FieldRemapper"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.AnonymousObjectTransformer","methodName":"isSuspendFunctionOrLambda","parameters":["MethodNode"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.AnonymousObjectTransformer","methodName":"newMethod","parameters":["ClassBuilder","MethodNode"],"returnType":"DeferredMethodVisitor"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.coroutines.coroutineCodegenUtilKt","methodName":"isResumeImplMethodName","parameters":["LanguageVersionSettings","String"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.types.ErrorType","methodName":"makeNullableAsSpecified","parameters":["Boolean"],"returnType":"SimpleType"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.DeferredMethodVisitor","methodName":"visitEnd","parameters":[""],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InlineResult","methodName":"addClassToRemove","parameters":["String"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.KotlinConstraintSystemCompleter","methodName":"processVariableWhenNotEnoughInformation","parameters":["Context","VariableWithConstraints","List","KotlinDiagnosticsHolder"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.RegeneratedLambdaFieldRemapper","methodName":"getFieldForInline","parameters":["FieldInsnNode","StackValue"],"returnType":"StackValue"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.AbstractTypeCheckerContextForConstraintSystem","methodName":"assertFlexibleTypeVariable","parameters":["FlexibleTypeMarker"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.LocalVarRemapper","methodName":"visitIincInsn","parameters":["Int","Int","MethodVisitor"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.transformationUtilsKt","methodName":"toNameTypePair","parameters":["List"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.ReifiedTypeInliner","methodName":"processReifyMarker","parameters":["MethodInsnNode","InsnList"],"returnType":"String"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.InlineChecker","methodName":"isInvokeOrInlineExtension","parameters":["CallableDescriptor"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.RemappingClassBuilder","methodName":"newField","parameters":["JvmDeclarationOrigin","int","String","String","String","Object"],"returnType":"FieldVisitor"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.KotlinConstraintSystemCompleter","methodName":"analyzeRemainingNotAnalyzedPostponedArgument","parameters":["List","(PostponedResolvedAtom) -> Unit"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.NameGenerator","methodName":"getGeneratorClass","parameters":[""],"returnType":"String"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.RegeneratedLambdaFieldRemapper","methodName":"findField","parameters":["FieldInsnNode","Collection"],"returnType":"CapturedParamInfo"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.checkers.InlineChecker","methodName":"checkNonLocalReturn","parameters":["CallCheckerContext","CallableDescriptor","KtExpression"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.PsiInlineIntrinsicsSupport","methodName":"toKotlinType","parameters":["KotlinType"],"returnType":"KotlinType"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalChainedScope","methodName":"getContributedClassifier","parameters":["Name","LookupLocation"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContextKt","methodName":"makeSimpleTypeDefinitelyNotNullOrNotNullInternal","parameters":["SimpleType"],"returnType":"SimpleType"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.ReifiedTypeInliner","methodName":"reify","parameters":["ReificationArgument","Type","KT"],"returnType":"Pair"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.InlineResult","methodName":"getChangedTypes","parameters":[""],"returnType":"Map"},1,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"createFlexibleType","parameters":["SimpleTypeMarker","SimpleTypeMarker"],"returnType":"KotlinTypeMarker"},3,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.AnonymousObjectTransformer","methodName":"generateConstructorAndFields","parameters":["ClassBuilder","ParametersBuilder","ParametersBuilder","FieldRemapper","List"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.types.checker.NewCapturedType","methodName":"replaceAnnotations","parameters":["Annotations"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.types.checker.NewCapturedTypeConstructor","methodName":"getParameters","parameters":[""],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.coroutines.CoroutineTransformer","methodName":"shouldSkip","parameters":["MethodNode"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.ReifiedTypeInliner","methodName":"arrayOf","parameters":["KotlinTypeMarker","Int"],"returnType":"KotlinTypeMarker"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.NameGenerator","methodName":"subGenerator","parameters":["boolean","String"],"returnType":"NameGenerator"},1,{"pathToFun":"org.jetbrains.kotlin.types.checker.TypeCheckerProcedureCallbacksImpl","methodName":"assertSubtype","parameters":["KotlinType","KotlinType","TypeCheckingProcedure"],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.ObjectTransformer","methodName":"createClassReader","parameters":[""],"returnType":"ClassReader"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.diagnostics.DiagnosticsWithSuppression","methodName":"iterator","parameters":[""],"returnType":"Iterator"},2,{"pathToFun":"org.jetbrains.kotlin.types.checker.TypeCheckingProcedure","methodName":"getInType","parameters":["TypeParameterDescriptor","TypeProjection"],"returnType":"KotlinType"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.coroutines.CoroutineTransformer","methodName":"oldContinuationFrom","parameters":["MethodNode"],"returnType":"String"},1,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"makeSimpleTypeDefinitelyNotNullOrNotNull","parameters":["SimpleTypeMarker"],"returnType":"SimpleTypeMarker"},1,{"pathToFun":"org.jetbrains.kotlin.types.ErrorUtils","methodName":"createUninferredParameterType","parameters":["TypeParameterDescriptor"],"returnType":"KotlinType"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.IrInlineIntrinsicsSupport","methodName":"toKotlinType","parameters":["IrType"],"returnType":"KotlinType"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.IfNullExpressionsFusionLowering$Transformer","methodName":"isStableCall","parameters":["IrCall"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.util.ValueParameterCountCheck$AtLeast","methodName":"check","parameters":["FunctionDescriptor"],"returnType":"Any"},5,{"pathToFun":"org.jetbrains.kotlin.parsing.SemanticWhitespaceAwarePsiBuilderAdapter","methodName":"disableNewlines","parameters":[""],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.parsing.SemanticWhitespaceAwarePsiBuilderAdapter","methodName":"restoreNewlinesState","parameters":[""],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorKt","methodName":"isIntegerType","parameters":["Any"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.context.EnclosedValueDescriptor","methodName":"getInnerValue","parameters":[""],"returnType":"StackValueWithSimpleReceiver"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.GlobalInlineContext","methodName":"recordTypeFromInlineFunction","parameters":["String"],"returnType":"Any"},3,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitTryExpression","parameters":["KtTryExpression","D"],"returnType":"R"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.AnalyzeTryCatchBlocksKt","methodName":"collectDecompiledTryDescriptors","parameters":["MethodNode"],"returnType":"Map"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackAnalyzer$InternalAnalyzer","methodName":"executeRestoreStackInTryCatch","parameters":["FixStackFrame","AbstractInsnNode"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtCatchClause","methodName":"getCatchParameter","parameters":[""],"returnType":"KtParameter"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateExceptionTable","parameters":["Label","List","String"],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.MethodAnalyzer","methodName":"visitControlFlowExceptionEdge","parameters":["Int","Int"],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackAnalyzer$InternalAnalyzer","methodName":"executeSaveStackBeforeTry","parameters":["FixStackFrame","AbstractInsnNode"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.LocalVariablesManager","methodName":"markRestoreStackMarkerEmitted","parameters":["AbstractInsnNode"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher","methodName":"visitTryExpression","parameters":["KtTryExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},4,{"pathToFun":"org.jetbrains.kotlin.types.TypeAliasExpander","methodName":"combineAnnotations","parameters":["SimpleType","Annotations"],"returnType":"SimpleType"},4,{"pathToFun":"org.jetbrains.kotlin.types.TypeAliasExpander$Companion","methodName":"assertRecursionDepth","parameters":["Int","TypeAliasDescriptor"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"genFinallyBlockOrGoto","parameters":["TryWithFinallyBlockStackElement","Label","Label","List"],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"addPropertyOverrideByMethod","parameters":["Set","MutableCollection","MutableSet","(Name) -> Collection"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingVisitor","methodName":"checkCatchParameterType","parameters":["KtParameter","KotlinType","ExpressionTypingContext"],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"findGetterByName","parameters":["PropertyDescriptor","String","(Name) -> Collection"],"returnType":"SimpleFunctionDescriptor"},4,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingUtils","methodName":"createDataFlowInfoForArgumentsOfTryCall","parameters":["Call","DataFlowInfo","DataFlowInfo"],"returnType":"MutableDataFlowInfoForArguments"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtTryExpression","methodName":"getCatchClauses","parameters":[""],"returnType":"List"},4,{"pathToFun":"org.jetbrains.kotlin.parsing.KotlinExpressionParsing","methodName":"parseTry","parameters":[""],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.types.TypeAliasExpander","methodName":"createAbbreviation","parameters":["TypeAliasExpansion","Annotations","Boolean"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.types.TypeAliasExpansion$Companion","methodName":"create","parameters":["TypeAliasExpansion","TypeAliasDescriptor","List"],"returnType":"TypeAliasExpansion"},4,{"pathToFun":"org.jetbrains.kotlin.types.expressions.PreliminaryLoopVisitor$Companion","methodName":"visitTryBlock","parameters":["KtTryExpression"],"returnType":"PreliminaryLoopVisitor"},4,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingVisitor","methodName":"getCleanedContextFromTryWithAssignmentsToVar","parameters":["KtTryExpression","boolean","ExpressionTypingContext"],"returnType":"ExpressionTypingContext"},4,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingVisitor","methodName":"isCatchBranchesReturnsNothing","parameters":["List","BindingContext"],"returnType":"boolean"},4,{"pathToFun":"org.jetbrains.kotlin.load.java.JavaVisibilities","methodName":"areInSamePackage","parameters":["DeclarationDescriptor","DeclarationDescriptor"],"returnType":"boolean"},5,{"pathToFun":"org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt","methodName":"requiresTypeAliasExpansion","parameters":["KotlinType"],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.StackTransformationUtilsKt","methodName":"generateLoadInstructions","parameters":["MethodNode","AbstractInsnNode","SavedStackDescriptor"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.inline.MaxStackFrameSizeAndLocalsCalculator","methodName":"visitTryCatchBlock","parameters":["Label","Label","Label","String"],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackMethodTransformer","methodName":"transformRestoreStackMarker","parameters":["MethodNode","MutableList","AbstractInsnNode","LocalVariablesManager"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingServices","methodName":"createLocalRedeclarationChecker","parameters":["BindingTrace"],"returnType":"LocalRedeclarationChecker"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.UtilKt","methodName":"hasOpcode","parameters":["AbstractInsnNode"],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.types.TypeAliasExpansion","methodName":"getReplacement","parameters":["TypeConstructor"],"returnType":"TypeProjection"},4,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingVisitor","methodName":"checkCatchParameterDeclaration","parameters":["KtParameter","ExpressionTypingContext"],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.pseudoInsns.PseudoInsn","methodName":"createInsnNode","parameters":[""],"returnType":"MethodInsnNode"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.DescriptorResolver","methodName":"resolveLocalVariableDescriptor","parameters":["LexicalScope","KtParameter","BindingTrace"],"returnType":"VariableDescriptor"},4,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingVisitor","methodName":"resolveAndCheckCatchParameter","parameters":["KtParameter","ExpressionTypingContext"],"returnType":"VariableDescriptor"},4,{"pathToFun":"org.jetbrains.kotlin.types.TypeAliasExpander","methodName":"expandNonArgumentTypeProjection","parameters":["TypeProjection","TypeAliasExpansion","Int"],"returnType":"TypeProjection"},4,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"createPropertyDescriptorByMethods","parameters":["PropertyDescriptor","(Name) -> Collection"],"returnType":"JavaPropertyDescriptor"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitCatchSection","parameters":["KtCatchClause","D"],"returnType":"R"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitTryExpression","parameters":["KtTryExpression"],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.StackTransformationUtilsKt","methodName":"restoreStack","parameters":["MethodNode","AbstractInsnNode","SavedStackDescriptor"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtTryExpression","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},4,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"visitTryExpression","parameters":["KtTryExpression"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.load.java.JavaVisibilities","methodName":"isVisible","parameters":["ReceiverValue","DeclarationDescriptorWithVisibility","DeclarationDescriptor"],"returnType":"boolean"},5,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.AnalyzeTryCatchBlocksKt","methodName":"insertSaveRestoreStackMarkers","parameters":["Map","MethodNode","MutableMap"],"returnType":"Map"},4,{"pathToFun":"org.jetbrains.kotlin.types.TypeAliasExpander","methodName":"expandTypeProjection","parameters":["TypeProjection","TypeAliasExpansion","TypeParameterDescriptor","Int"],"returnType":"TypeProjection"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtTryExpression","methodName":"getFinallyBlock","parameters":[""],"returnType":"KtFinallySection"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitCatchSection","parameters":["KtCatchClause","Void"],"returnType":"Void"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitTryExpression","parameters":["KtTryExpression","Void"],"returnType":"Void"},4,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"findGetterOverride","parameters":["PropertyDescriptor","(Name) -> Collection"],"returnType":"SimpleFunctionDescriptor"},4,{"pathToFun":"org.jetbrains.kotlin.types.TypeAliasExpander","methodName":"checkRepeatedAnnotations","parameters":["Annotations","Annotations"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtTryExpression","methodName":"getTryBlock","parameters":[""],"returnType":"KtBlockExpression"},4,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingVisitor","methodName":"whichCatchBranchesReturnNothing","parameters":["List","BindingContext"],"returnType":"List"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtCatchClause","methodName":"getParameterList","parameters":[""],"returnType":"KtParameterList"},4,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingUtils","methodName":"resolveTryAsCall","parameters":["Call","List","ExpressionTypingContext","MutableDataFlowInfoForArguments"],"returnType":"ResolvedCall"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.FixStackMethodTransformer","methodName":"transformSaveStackMarker","parameters":["MethodNode","MutableList","FixStackAnalyzer","AbstractInsnNode","LocalVariablesManager"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtCatchClause","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},4,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"doesClassOverridesProperty","parameters":["PropertyDescriptor","(Name) -> Collection"],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.AnalyzeTryCatchBlocksKt","methodName":"transformTryCatchBlocks","parameters":["MethodNode","HashMap"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.types.TypeAliasExpander","methodName":"createCombinedAnnotations","parameters":["KotlinType","Annotations"],"returnType":"Annotations"},4,{"pathToFun":"org.jetbrains.kotlin.types.TypeAliasExpander","methodName":"expandRecursively","parameters":["TypeAliasExpansion","Annotations","Boolean","Int","Boolean"],"returnType":"SimpleType"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtCatchClause","methodName":"getCatchBody","parameters":[""],"returnType":"KtExpression"},4,{"pathToFun":"org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaClassMemberScope","methodName":"findSetterOverride","parameters":["PropertyDescriptor","(Name) -> Collection"],"returnType":"SimpleFunctionDescriptor"},4,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingVisitor","methodName":"processTryBranches","parameters":["KtTryExpression","KtBlockExpression","ExpressionTypingContext","List","KtBlockExpression","BindingContext","KotlinType"],"returnType":"KotlinTypeInfo"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.LocalVariablesManager","methodName":"getSavedStackDescriptor","parameters":["AbstractInsnNode"],"returnType":"SavedStackDescriptor"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.common.MethodAnalyzer","methodName":"visitControlFlowExceptionEdge","parameters":["Int","TryCatchBlockNode"],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"getCurrentCatchIntervals","parameters":["TryBlockStackElement","Label","Label"],"returnType":"List"},4,{"pathToFun":"org.jetbrains.kotlin.types.TypeAliasExpander","methodName":"expand","parameters":["TypeAliasExpansion","Annotations"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitCatchSection","parameters":["KtCatchClause"],"returnType":"void"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.AnalyzeTryCatchBlocksKt","methodName":"isDefaultHandlerNode","parameters":["TryCatchBlockNode"],"returnType":"Boolean"},4,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingVisitor","methodName":"visitTryExpression","parameters":["KtTryExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},4,{"pathToFun":"org.jetbrains.kotlin.cfg.ControlFlowProcessor$CFPVisitor","methodName":"generateTryAndCatches","parameters":["KtTryExpression"],"returnType":"Label"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.CodegenStatementVisitor","methodName":"visitTryExpression","parameters":["KtTryExpression","StackValue"],"returnType":"StackValue"},4,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ControlStructureTypingVisitor","methodName":"resolveTryExpressionWithNewInference","parameters":["KtTryExpression","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.optimization.fixStack.LocalVariablesManager","methodName":"allocateVariablesForSaveStackMarker","parameters":["AbstractInsnNode","List"],"returnType":"SavedStackDescriptor"},4,{"pathToFun":"org.jetbrains.kotlin.load.java.JavaVisibilities","methodName":"isVisibleForProtectedAndPackage","parameters":["ReceiverValue","DeclarationDescriptorWithVisibility","DeclarationDescriptor"],"returnType":"boolean"},5,{"pathToFun":"org.jetbrains.kotlin.resolve.TypeResolver","methodName":"resolveTypeForTypeAlias","parameters":["TypeResolutionContext","Annotations","TypeAliasDescriptor","KtElement","QualifiedExpressionResolver.TypeQualifierResolutionResult"],"returnType":"PossiblyBareType"},4,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"generateTryExpression","parameters":["KtTryExpression","boolean"],"returnType":"StackValue"},4,{"pathToFun":"org.jetbrains.kotlin.ir.IrElement","methodName":"transform","parameters":["IrElementTransformer","D"],"returnType":"IrElement"},4,{"pathToFun":"org.jetbrains.kotlin.psi2ir.transformations.InsertImplicitCasts","methodName":"visitTry","parameters":["IrTry"],"returnType":"IrExpression"},4,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitCatch","parameters":["IrCatch","D"],"returnType":"IrCatch"},4,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.IrCatch","methodName":"transform","parameters":["IrElementTransformer","D"],"returnType":"IrCatch"},4,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitCatch","parameters":["IrCatch"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitTry","parameters":["IrTry"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitTry","parameters":["IrTry","D"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitTryExpression","parameters":["KtTryExpression","Nothing"],"returnType":"IrStatement"},4,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrTryImpl","methodName":"acceptChildren","parameters":["IrElementVisitor","D"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitTry","parameters":["IrTry","Nothing"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitor","methodName":"visitCatch","parameters":["IrCatch","D"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitTry","parameters":["IrTry"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrCatchImpl","methodName":"acceptChildren","parameters":["IrElementVisitor","D"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrCatchImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},4,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"visitTry","parameters":["IrTry","BlockInfo"],"returnType":"PromisedValue"},4,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"visitTryWithInfo","parameters":["IrTry","BlockInfo","TryInfo"],"returnType":"PromisedValue"},4,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrTryImpl","methodName":"accept","parameters":["IrElementVisitor","D"],"returnType":"R"},4,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrTryImpl","methodName":"transformChildren","parameters":["IrElementTransformer","D"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitCatch","parameters":["IrCatch","Nothing"],"returnType":"IrCatch"},4,{"pathToFun":"org.jetbrains.kotlin.ir.expressions.impl.IrCatchImpl","methodName":"transformChildren","parameters":["IrElementTransformer","D"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.irCodegenUtilsKt","methodName":"leave","parameters":["IrFrameMap","IrSymbolOwner"],"returnType":"Int"},4,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen","methodName":"genTryCatchCover","parameters":["Label","Label","Label","List","String"],"returnType":"Unit"},4,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformer","methodName":"visitTry","parameters":["IrTry","D"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid","methodName":"visitCatch","parameters":["IrCatch"],"returnType":"IrCatch"},4,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitTry","parameters":["IrTry","Nothing"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid","methodName":"visitCatch","parameters":["IrCatch","Nothing"],"returnType":"Any"},4,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.TryCatchExpressionGenerator","methodName":"generateTryCatch","parameters":["KtTryExpression"],"returnType":"IrExpression"},4,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.CapturedTypeConstructorImpl","methodName":"getBuiltIns","parameters":[""],"returnType":"KotlinBuiltIns"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tasks.TracingStrategyForInvoke","methodName":"bindResolvedCall","parameters":["BindingTrace","ResolvedCall"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.InvokeProcessorsKt","methodName":"createCallTowerProcessorForExplicitInvoke","parameters":["ImplicitScopeTower","CandidateFactory","ReceiverValueWithSmartCastInfo","ReceiverValueWithSmartCastInfo"],"returnType":"ScopeTowerProcessor"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallTransformer\\$CallForImplicitInvoke","methodName":"getDispatchReceiver","parameters":[""],"returnType":"ExpressionReceiver"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tasks.TracingStrategyForInvoke","methodName":"bindCall","parameters":["BindingTrace","Call"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"asmPrimitiveTypeToLangPrimitiveType","parameters":["Type"],"returnType":"PrimitiveType"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallResolver","methodName":"resolveCallForInvoke","parameters":["BasicCallResolutionContext","TracingStrategy"],"returnType":"OverloadResolutionResults"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.context.BasicCallResolutionContext","methodName":"replaceCall","parameters":["Call"],"returnType":"BasicCallResolutionContext"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.CallTransformer\\$CallForImplicitInvoke","methodName":"getCallType","parameters":[""],"returnType":"CallType"},1,{"pathToFun":"org.jetbrains.kotlin.parsing.DoNotBindAnything","methodName":"getEdgePosition","parameters":["List","Boolean","WhitespacesAndCommentsBinder.TokenTextGetter"],"returnType":"Int"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.ktDescriptorUtilKt","methodName":"isEffectivelyFinal","parameters":["CallableMemberDescriptor","Boolean"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitBlockStringTemplateEntry","parameters":["KtBlockStringTemplateEntry","Void"],"returnType":"Void"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitorVoid","methodName":"visitBlockStringTemplateEntry","parameters":["KtBlockStringTemplateEntry"],"returnType":"void"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtBlockStringTemplateEntry","methodName":"accept","parameters":["KtVisitor","D"],"returnType":"R"},2,{"pathToFun":"org.jetbrains.kotlin.psi.KtVisitor","methodName":"visitBlockStringTemplateEntry","parameters":["KtBlockStringTemplateEntry","D"],"returnType":"R"},2,{"pathToFun":"org.jetbrains.kotlin.cfg.UnreachableCode$Companion","methodName":"getUnreachableTextRanges","parameters":["KtElement","Set","Set"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.cfg.UnreachableCode$Companion","methodName":"hasChildrenInSet","parameters":["KtElement","Set"],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.diagnostics.PositioningStrategies","methodName":"markDiagnostic","parameters":["ParametrizedDiagnostic"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.types.AbstractStubType","methodName":"replaceAnnotations","parameters":["Annotations"],"returnType":"SimpleType"},1,{"pathToFun":"org.jetbrains.kotlin.diagnostics.diagnosticUtilsKt","methodName":"reportDiagnosticOnceWrtDiagnosticFactoryList","parameters":["BindingTrace","Diagnostic","DiagnosticFactory"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.components.ClassicTypeSystemContextForCS","methodName":"createStubType","parameters":["TypeVariableMarker"],"returnType":"StubTypeMarker"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.InferenceUtilsKt","methodName":"buildNotFixedVariablesToNonSubtypableTypesSubstitutor","parameters":["ConstraintStorage","TypeSystemInferenceExtensionContext"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl","methodName":"buildNotFixedVariablesToStubTypesSubstitutor","parameters":[""],"returnType":"TypeSubstitutorMarker"},1,{"pathToFun":"org.jetbrains.kotlin.diagnostics.DiagnosticFactory","methodName":"cast","parameters":["Diagnostic"],"returnType":"D"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.TypeVariableTypeConstructor","methodName":"toString","parameters":[""],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.ir.types.IrTypeSystemContext","methodName":"getParameter","parameters":["TypeConstructorMarker","Int"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.components.AbstractTypeCheckerContextForConstraintSystem","methodName":"isSubtypeOfByTypeChecker","parameters":["KotlinTypeMarker","KotlinTypeMarker"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"nullableNothingType","parameters":[""],"returnType":"SimpleTypeMarker"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmInlineClassLowering","methodName":"specializeEqualsCall","parameters":["IrBuilderWithScope","IrExpression","IrExpression"],"returnType":"IrExpression"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.inference.model.TypeVariableForLambdaReturnType","methodName":"hasOnlyInputTypesAnnotation","parameters":[""],"returnType":"Boolean"},1,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"arrow","parameters":[""],"returnType":"String"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.SingleSmartCast","methodName":"plus","parameters":["SingleSmartCast"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.SingleSmartCast","methodName":"type","parameters":["Call"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.renderer.DescriptorRendererImpl","methodName":"renderFunctionType","parameters":["StringBuilder","KotlinType"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.KotlinResolutionCallbacksImpl","methodName":"convertSignedConstantToUnsigned","parameters":["KtExpression"],"returnType":"IntegerValueTypeConstant"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.tower.KotlinResolutionCallbacksImpl","methodName":"convertSignedConstantToUnsigned","parameters":["KotlinCallArgument"],"returnType":"IntegerValueTypeConstant"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.intrinsics.NumberCast","methodName":"toCallable","parameters":["IrFunctionAccessExpression","JvmMethodSignature","JvmBackendContext"],"returnType":"IrIntrinsicFunction"},1,{"pathToFun":"org.jetbrains.kotlin.backend.common.lower.optimizations.FoldConstantLowering","methodName":"buildIrConstant","parameters":["Int","Int","IrType","Any"],"returnType":"IrConst"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ReflectionReferencesGenerator","methodName":"createAdapterParameter","parameters":["Int","Int","Name","Int","KotlinType"],"returnType":"IrValueParameter"},2,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.ReflectionReferencesGenerator","methodName":"isSafeToUseWithoutCopying","parameters":["IrExpression"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.constants.evaluate.ConstantExpressionEvaluatorVisitor","methodName":"isPropertyCompileTimeConstant","parameters":["VariableDescriptor"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.MutableClosure","methodName":"setNeedsCaptureReceiverFromOuterContext","parameters":[""],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.context.MethodContext","methodName":"generateReceiver","parameters":["CallableDescriptor","GenerationState","boolean"],"returnType":"StackValue"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.context.CodegenContext","methodName":"getCallableDescriptorWithReceiver","parameters":[""],"returnType":"CallableDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"unwrapOriginalReceiverOwnerForSuspendLambda","parameters":["MethodContext"],"returnType":"CallableDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.binding.MutableClosure","methodName":"getEnclosingCallableDescriptorWithReceiver","parameters":[""],"returnType":"CallableDescriptor"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"getNameForCapturedReceiverField","parameters":["CallableDescriptor","BindingContext","LanguageVersionSettings"],"returnType":"String"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.smartcasts.Nullability","methodName":"or","parameters":["Nullability"],"returnType":"Nullability"},1,{"pathToFun":"org.jetbrains.kotlin.psi.KtPsiUtil","methodName":"getLastStatementInABlock","parameters":["KtBlockExpression"],"returnType":"KtExpression"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.CodegenStatementVisitor","methodName":"visitNamedFunction","parameters":["KtNamedFunction","StackValue"],"returnType":"StackValue"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.FunctionsTypingVisitor","methodName":"visitNamedFunction","parameters":["KtNamedFunction","ExpressionTypingContext","Boolean","LexicalWritableScope"],"returnType":"KotlinTypeInfo"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalScopeStorage","methodName":"toDescriptors","parameters":["IntList"],"returnType":"List"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"addLeaveTaskToRemoveNamedFunctionFromFrameMap","parameters":["KtNamedFunction","Label","List"],"returnType":"void"},1,{"pathToFun":"org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorForStatements","methodName":"visitNamedFunction","parameters":["KtNamedFunction","ExpressionTypingContext"],"returnType":"KotlinTypeInfo"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.ExpressionCodegen","methodName":"visitNamedFunction","parameters":["KtNamedFunction","StackValue","boolean"],"returnType":"StackValue"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.DeclarationsCheckerBuilder","methodName":"withTrace","parameters":["BindingTrace"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalWritableScope","methodName":"addFunctionDescriptor","parameters":["FunctionDescriptor"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalScopeStorage","methodName":"addFunctionDescriptorInternal","parameters":["FunctionDescriptor"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.LocalFunctionGenerator","methodName":"generateFunction","parameters":["KtNamedFunction"],"returnType":"IrStatement"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.LocalFunctionGenerator","methodName":"generateFunctionDeclaration","parameters":["KtNamedFunction"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitNamedFunction","parameters":["KtNamedFunction","Nothing"],"returnType":"IrStatement"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalChainedScope","methodName":"getContributedVariables","parameters":["Name","LookupLocation"],"returnType":"Any"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.MemberScopeImpl","methodName":"getClassifierNames","parameters":[""],"returnType":"Set"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.InterfaceLowering","methodName":"bridgeToStatic","parameters":["IrFunction","IrFunction"],"returnType":"Unit"},1,{"pathToFun":"org.jetbrains.kotlin.codegen.AsmUtil","methodName":"stringValueOfType","parameters":["Type"],"returnType":"Type"},2,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.JvmSymbols","methodName":"typeToStringValueOfFunction","parameters":["IrType"],"returnType":"IrSimpleFunctionSymbol"},1,{"pathToFun":"org.jetbrains.kotlin.backend.jvm.lower.JvmStringConcatenationLowering","methodName":"callToString","parameters":["JvmIrBuilder","IrExpression"],"returnType":"IrExpression"},1,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.GeneratorKt","methodName":"getOrFail","parameters":["Generator","ReadOnlySlice","K","(K) -> String"],"returnType":"V"},2,{"pathToFun":"org.jetbrains.kotlin.psi2ir.generators.StatementGenerator","methodName":"visitThisExpression","parameters":["KtThisExpression","Nothing"],"returnType":"IrExpression"},2,{"pathToFun":"org.jetbrains.kotlin.types.TypeProjectionBase","methodName":"equals","parameters":["Object"],"returnType":"boolean"},1,{"pathToFun":"org.jetbrains.kotlin.resolve.scopes.LexicalChainedScope","methodName":"getContributedFunctions","parameters":["Name","LookupLocation"],"returnType":"Any"},1,{"pathToFun":"org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext","methodName":"canHaveUndefinedNullability","parameters":["KotlinTypeMarker"],"returnType":"Boolean"},2,{"pathToFun":"org.jetbrains.kotlin.resolve.calls.NewCommonSuperTypeCalculator","methodName":"refineNullabilityForUndefinedNullability","parameters":["TypeSystemCommonSuperTypesContext","List","SimpleTypeMarker"],"returnType":"SimpleTypeMarker"},2]