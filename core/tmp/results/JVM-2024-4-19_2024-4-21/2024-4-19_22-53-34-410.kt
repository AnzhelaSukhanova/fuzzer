// result:[]

// progressionMinValueToMinValue3.kt
// isKlib=false

internal final class Gbm  private constructor(var jhg: Sequence<UByte>, val gja: Long = 70, vararg tsf: Jxl?, val zee: Jxl, val drf: UShort){


private inline    fun  scsrw(a: Jxl, b: UInt, c: Char, d: Double?): Short = TODO()

internal fun <T, S>  enodt(a: S, b: S, c: Float, d: Jxl?): Array<Set<Pair<Double?, Long>>> = TODO()
companion object {

inline  internal  fun  xbfxe(a: Jxl): Function1<Jxl, Float> = TODO()

internal  fun  lvosg(a: Jxl, b: Float, c: Jxl?, d: Jxl): ArrayDeque<Jxl> = TODO()

private var atsf: Jxl  
get() = TODO()
set(value) = TODO()


private var iesx: Pair<Byte, Gbm>  
get() = TODO()
set(value) = TODO()
}



}
internal abstract class Jxl  private constructor(val xic: Float, val fnb: Pair<Char, UByte> = Pair<Char, UByte>('ꦲ', 72.toUByte()), vararg ems: UInt){


abstract fun <T: Set<Int>, S>  lkmdz(a: Char = '͠', b: T, c: Byte = 8, d: Byte = (
val a = false
when (a) {
 true -> {fnb}
 else -> {fnb}
}
).component2().toByte()): Byte

lateinit var gsgi: ArrayDeque<UByte?>



}
// DONT_TARGET_EXACT_BACKEND: WASM
// KJS_WITH_FULL_RUNTIME
// Auto-generated by org.jetbrains.kotlin.generators.tests.GenerateRangesCodegenTestData. DO NOT EDIT!
// WITH_RUNTIME


val MinUI = UInt.MIN_VALUE
val MinUB = UByte.MIN_VALUE
val MinUS = UShort.MIN_VALUE
val MinUL = ULong.MIN_VALUE

fun box(): String {
    val list1 = ArrayList<UInt>()
    for (i in MinUI..MinUI step 1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(MinUI)) {
        return "Wrong elements for MinUI..MinUI step 1: $list1"
    }

    val list2 = ArrayList<UInt>()
    for (i in MinUB..MinUB step 1) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(MinUB.toUInt())) {
        return "Wrong elements for MinUB..MinUB step 1: $list2"
    }

    val list3 = ArrayList<UInt>()
    for (i in MinUS..MinUS step 1) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(MinUS.toUInt())) {
        return "Wrong elements for MinUS..MinUS step 1: $list3"
    }

    val list4 = ArrayList<ULong>()
    for (i in MinUL..MinUL step 1) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(MinUL)) {
        return "Wrong elements for MinUL..MinUL step 1: $list4"
    }

    return "OK"
}



//Combined output:
//java.lang.NullPointerException
//	at org.jetbrains.kotlin.resolve.calls.checkers.NewSchemeOfIntegerOperatorResolutionChecker.checkArgument(NewSchemeOfIntegerOperatorResolutionChecker.kt:57)
//	at org.jetbrains.kotlin.types.expressions.ValueParameterResolver.resolveDefaultValue(ValueParameterResolver.kt:75)
//	at org.jetbrains.kotlin.types.expressions.ValueParameterResolver.resolveValueParameters(ValueParameterResolver.kt:62)
//	at org.jetbrains.kotlin.resolve.BodyResolver.resolveFunctionBody(BodyResolver.java:1016)
//	at org.jetbrains.kotlin.resolve.BodyResolver.resolveFunctionBody(BodyResolver.java:992)
//	at org.jetbrains.kotlin.resolve.BodyResolver.resolveFunctionBodies(BodyResolver.java:977)
//	at org.jetbrains.kotlin.resolve.BodyResolver.resolveBehaviorDeclarationBodies(BodyResolver.java:129)
//	at org.jetbrains.kotlin.resolve.BodyResolver.resolveBodies(BodyResolver.java:256)
//	at org.jetbrains.kotlin.resolve.LazyTopDownAnalyzer.analyzeDeclarations(LazyTopDownAnalyzer.kt:227)
//	at org.jetbrains.kotlin.resolve.LazyTopDownAnalyzer.analyzeDeclarations$default(LazyTopDownAnalyzer.kt:58)
//	at org.jetbrains.kotlin.cli.jvm.compiler.TopDownAnalyzerFacadeForJVM.analyzeFilesWithJavaIntegration(TopDownAnalyzerFacadeForJVM.kt:119)
//	at org.jetbrains.kotlin.cli.jvm.compiler.TopDownAnalyzerFacadeForJVM.analyzeFilesWithJavaIntegration$default(TopDownAnalyzerFacadeForJVM.kt:88)
//	at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler$analyze$1.invoke(KotlinToJVMBytecodeCompiler.kt:256)
//	at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler$analyze$1.invoke(KotlinToJVMBytecodeCompiler.kt:42)
//	at org.jetbrains.kotlin.cli.common.messages.AnalyzerWithCompilerReport.analyzeAndReport(AnalyzerWithCompilerReport.kt:115)
//	at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler.analyze(KotlinToJVMBytecodeCompiler.kt:247)
//	at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler.compileModules$cli(KotlinToJVMBytecodeCompiler.kt:87)
//	at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler.compileModules$cli$default(KotlinToJVMBytecodeCompiler.kt:47)
//	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:168)
//	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:53)
//	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:100)
//	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:46)
//	at org.jetbrains.kotlin.cli.common.CLITool.exec(CLITool.kt:101)
//	at com.stepanov.bbf.JVMCompiler.executeCompilationCheck$lambda$0(JVMCompiler.kt:30)
//	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
//	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
//	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
//	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
//	at java.base/java.lang.Thread.run(Thread.java:829)
//