// INVOCATOR_FAIL
// result:[-p, library, -o, lib.klib, projectTmp/oldKlib.kt]
// result:[-p, library, -l, lib.klib, -o, main.klib, projectTmp/main.kt]

// files
// main.kt
// isKlib=false
fun main() {


val nnkjo: Lxsna = object: Lxsna {
}
val dztee: String = box()
val aibza: Lxsna = nnkjo.wazi
nnkjo.wazi = TODO()
}
// oldKlib.kt
// isKlib=true
// DONT_TARGET_EXACT_BACKEND: WASM
// KJS_WITH_FULL_RUNTIME
// Auto-generated by org.jetbrains.kotlin.generators.tests.GenerateRangesCodegenTestData. DO NOT EDIT!
// WITH_RUNTIME



fun box(): String {
    val list1 = ArrayList<Int>()
    for (i in 5 downTo 5) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<Int>(5)) {
        return "Wrong elements for 5 downTo 5: $list1"
    }

    var list2  = ArrayList<Int>()
    for (i in 5.toByte() downTo 5.toByte()) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<Int>(5)) {
        return "Wrong elements for 5.toByte() downTo 5.toByte(): $list2"
    }

    val list3 = ArrayList<Int>()
    for (i in 5.toShort() downTo 5.toShort()) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<Int>(5)) {
        return "Wrong elements for 5.toShort() downTo 5.toShort(): $list3"
    }

    val list4 = ArrayList<Long>()
    for (i in 5L downTo 5L) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<Long>(5L)) {
        return "Wrong elements for 5L downTo 5L: $list4"
    }

    val list5 = ArrayList<Char>()
    for (i in 'k' downTo 'k') {
        list5.add(i)
        if (list5.size > 23) break
    }
    if (list5 != listOf<Char>('k')) {
        return "Wrong elements for 'k' downTo 'k': $list5"
    }

    return "OK"
}
private fun <T, S>  csplv(): Float { TODO() }
 abstract class Lxsna  {

lateinit var wazi: Lxsna

}
inline  internal fun  klgck(): Lxsna? { TODO() }
suspend private fun  gglhx(): LinkedHashMap<UByte, Double> { TODO() }
// newKlib.kt
// isKlib=true
// DONT_TARGET_EXACT_BACKEND: WASM
// KJS_WITH_FULL_RUNTIME
// Auto-generated by org.jetbrains.kotlin.generators.tests.GenerateRangesCodegenTestData. DO NOT EDIT!
// WITH_RUNTIME



fun box(): String {
    val list1 = ArrayList<Int>()
    for (i in 5 downTo 5) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<Int>(5)) {
        return "Wrong elements for 5 downTo 5: $list1"
    }

    var list2  = ArrayList<Int>()
    for (i in 5.toByte() downTo 5.toByte()) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<Int>(5)) {
        return "Wrong elements for 5.toByte() downTo 5.toByte(): $list2"
    }

    val list3 = ArrayList<Int>()
    for (i in 5.toShort() downTo 5.toShort()) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<Int>(5)) {
        return "Wrong elements for 5.toShort() downTo 5.toShort(): $list3"
    }

    val list4 = ArrayList<Long>()
    for (i in 5L downTo 5L) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<Long>(5L)) {
        return "Wrong elements for 5L downTo 5L: $list4"
    }

    val list5 = ArrayList<Char>()
    for (i in 'k' downTo 'k') {
        list5.add(i)
        if (list5.size > 23) break
    }
    if (list5 != listOf<Char>('k')) {
        return "Wrong elements for 'k' downTo 'k': $list5"
    }

    return "OK"
}
private fun <T, S>  csplv(): Float { TODO() }
 abstract class Lxsna  {

lateinit var wazi: Lxsna

}
inline  internal fun  klgck(): Lxsna? { TODO() }
suspend private fun  gglhx(): LinkedHashMap<UByte, Double> { TODO() }
class Ppgfv


Combined output:
====================
This type has a constructor, and thus must be initialized here