// INCOMPATIBLE_LINKING
// result:[-p, library, -o, lib.klib, projectTmp/oldKlib.kt]
// result:[-p, library, -l, lib.klib, -o, main.klib, projectTmp/main.kt]
// result:[-Xinclude=main.klib, -l, lib.klib, -Xpartial-linkage-loglevel=error]
// result:[-p, library, -o, lib.klib, projectTmp/newKlib.kt]
// result:[-Xinclude=main.klib, -l, lib.klib, -Xpartial-linkage-loglevel=error]

// files
// main.kt
// isKlib=false
fun main() {


val zgffx: Dkjir = Dkjir()
val nxowl: Suies = object: Suies {
}
val swkpo: String = box()

}
// oldKlib.kt
// isKlib=true
// Auto-generated by GenerateSteppedRangesCodegenTestData. Do not edit!
// DONT_TARGET_EXACT_BACKEND: WASM
// KJS_WITH_FULL_RUNTIME
// WITH_RUNTIME
import kotlin.test.*

fun box(): String {
    val uintList = mutableListOf<UInt>()
    val uintProgression = 6u downTo 1u
    for (i in uintProgression step 2 step 1) {
        uintList += i
    }
    assertEquals(listOf(6u, 5u, 4u, 3u, 2u), uintList)

    val ulongList = mutableListOf<ULong>()
    val ulongProgression = 6uL downTo 1uL
    for (i in ulongProgression step 2L step 1L) {
        ulongList += i
    }
    assertEquals(listOf(6uL, 5uL, 4uL, 3uL, 2uL), ulongList)

    return "OK"
}
open class Dkjir
interface Suies
// newKlib.kt
// isKlib=true
// Auto-generated by GenerateSteppedRangesCodegenTestData. Do not edit!
// DONT_TARGET_EXACT_BACKEND: WASM
// KJS_WITH_FULL_RUNTIME
// WITH_RUNTIME
import kotlin.test.*

fun box(): String {
    val uintList = mutableListOf<UInt>()
    val uintProgression = 6u downTo 1u
    for (i in uintProgression step 2 step 1) {
        uintList += i
    }
    assertEquals(listOf(6u, 5u, 4u, 3u, 2u), uintList)

    val ulongList = mutableListOf<ULong>()
    val ulongProgression = 6uL downTo 1uL
    for (i in ulongProgression step 2L step 1L) {
        ulongList += i
    }
    assertEquals(listOf(6uL, 5uL, 4uL, 3uL, 2uL), ulongList)

    return "OK"
}
class Dkjir
interface Suies


Combined output:
====================
====================
====================
====================
