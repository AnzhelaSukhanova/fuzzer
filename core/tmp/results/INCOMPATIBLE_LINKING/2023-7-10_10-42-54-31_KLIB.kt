// INCOMPATIBLE_LINKING
// result:[-p, library, -o, lib.klib, projectTmp/oldKlib.kt]
// result:[-p, library, -l, lib.klib, -o, main.klib, projectTmp/main.kt]
// result:[-Xinclude=main.klib, -l, lib.klib, -Xpartial-linkage-loglevel=error]
// result:[-p, library, -o, lib.klib, projectTmp/newKlib.kt]
// result:[-Xinclude=main.klib, -l, lib.klib, -Xpartial-linkage-loglevel=error]

// files
// main.kt
// isKlib=false
fun main() {


val rrhcz: Qrckx = object: Qrckx {
override fun dgimm(): Char { TODO() }
}
val mpzgy: Nvedz = Nvedz()
val jjsir: Qrckx.Inlgd = Qrckx.Inlgd
val litcw: Char = rrhcz.dgimm()

}
// oldKlib.kt
// isKlib=true
// Auto-generated by GenerateSteppedRangesCodegenTestData. Do not edit!
// DONT_TARGET_EXACT_BACKEND: WASM
// KJS_WITH_FULL_RUNTIME
// WITH_RUNTIME
import kotlin.test.*

private fun  box(): String {
    val intList = mutableListOf<Int>()
    for (i in 1 until 9 step 2 step 3) {
        intList += i
    }
    assertEquals(listOf(1, 4, 7), intList)

    val longList = mutableListOf<Long>()
    for (i in 1L until 9L step 2L step 3L) {
        longList += i
    }
    assertEquals(listOf(1L, 4L, 7L), longList)

    val charList = mutableListOf<Char>()
    for (i in 'a' until 'i' step 2 step 3) {
        charList += i
    }
    assertEquals(listOf('a', 'd', 'g'), charList)

    return "OK"
}
interface Qrckx{
fun  dgimm(): Char { TODO() }
object Inlgd{
interface Hmhwn{
fun <T, S>  menae(): Float { TODO() }
}
}
}
open class Nvedz
// newKlib.kt
// isKlib=true
// Auto-generated by GenerateSteppedRangesCodegenTestData. Do not edit!
// DONT_TARGET_EXACT_BACKEND: WASM
// KJS_WITH_FULL_RUNTIME
// WITH_RUNTIME
import kotlin.test.*

private fun  box(): String {
    val intList = mutableListOf<Int>()
    for (i in 1 until 9 step 2 step 3) {
        intList += i
    }
    assertEquals(listOf(1, 4, 7), intList)

    val longList = mutableListOf<Long>()
    for (i in 1L until 9L step 2L step 3L) {
        longList += i
    }
    assertEquals(listOf(1L, 4L, 7L), longList)

    val charList = mutableListOf<Char>()
    for (i in 'a' until 'i' step 2 step 3) {
        charList += i
    }
    assertEquals(listOf('a', 'd', 'g'), charList)

    return "OK"
}
interface Qrckx{
fun  dgimm(): Char { TODO() }
object Inlgd{
interface Hmhwn{
abstract fun <T, S>  menae(): Float
}
}
}
open class Nvedz


Combined output:
====================
====================
====================
====================
